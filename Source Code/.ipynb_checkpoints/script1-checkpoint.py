{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "pYO5KnzwNFnw"
   },
   "source": [
    "# Loading Raw Dataset File"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 454
    },
    "id": "VFiqcJq0bfDL",
    "outputId": "c98c88d1-ddf5-4c8b-959e-ba8a1bc4e355"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DataFrame created from : haunted_places.csv\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package punkt to\n",
      "[nltk_data]     /Users/andrewturangan/nltk_data...\n",
      "[nltk_data]   Package punkt is already up-to-date!\n",
      "[nltk_data] Downloading package punkt_tab to\n",
      "[nltk_data]     /Users/andrewturangan/nltk_data...\n",
      "[nltk_data]   Package punkt_tab is already up-to-date!\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import nltk\n",
    "from nltk.tokenize import word_tokenize\n",
    "import re\n",
    "\n",
    "# Download the necessary resources\n",
    "nltk.download('punkt')\n",
    "nltk.download('punkt_tab')\n",
    "\n",
    "# Load the CSV file\n",
    "df = pd.read_csv('../data/haunted_places.csv')\n",
    "print('DataFrame created from : haunted_places.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "j-MW5KRbLmaQ"
   },
   "source": [
    "# Data Cleaning\n",
    "The haunted_places.csv contains unstructured description text.\n",
    "Cleaning strings of tokenized words (removing punctuations and capitalizations)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 241
    },
    "id": "3g20EzBzMx3B",
    "outputId": "a3a2692a-c937-4924-9b98-454a12448587"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    Ada witch Sometimes you can see a misty blue f...\n",
       "1    A little girl was killed suddenly while waitin...\n",
       "2    If you take Gorman Rd west towards Sand Creek ...\n",
       "3    In the 1970 one room room 211 in the old secti...\n",
       "4    Kappa Delta Sorority The Kappa Delta Sorority ...\n",
       "Name: clean_description, dtype: object"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def clean_text(text):\n",
    "    # Tokenize the text\n",
    "    tokens = word_tokenize(text)\n",
    "    # Remove all punctuation and non-alphanumeric characters, keep only words\n",
    "    tokens = [word for word in tokens if word.isalnum()]\n",
    "    # Join tokens into a single space-separated string\n",
    "    cleaned_text = ' '.join(tokens)\n",
    "    return cleaned_text\n",
    "\n",
    "# Apply the function to each cell in the DataFrame\n",
    "df['clean_description'] = df['description'].apply(clean_text)\n",
    "\n",
    "# Download results\n",
    "df.to_csv('cleaned_haunted_file.csv', index=False)\n",
    "\n",
    "df.clean_description.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "id": "nKmpws-PM4pR"
   },
   "outputs": [],
   "source": [
    "def clean_misspellings(df, column, corrections: dict):\n",
    "    for misspelling, correct in corrections.items():\n",
    "        df[column] = df[column].str.replace(fr'\\b{misspelling}\\b', correct, regex=True)\n",
    "        df[column] = df[column].str.replace(fr'\\b{misspelling}s\\b', correct + 's', regex=True)\n",
    "    df['clean_spelling'] = df[column]\n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "9ilnghqPvu4t",
    "outputId": "c5b5349e-bb8c-422a-f259-3dfe9f8245e2"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "df['clean_spelling'] created\n"
     ]
    }
   ],
   "source": [
    "# Dictionary of misspellings - {Misspelled word: Correct word}, simple 's' pluralization is accounted for.\n",
    "corrections = {'sprit': 'spirit',\n",
    "               'gost': 'ghost',\n",
    "               'aparition': 'apparition', 'apperition': 'apparition',\n",
    "               'poltergiest': 'poltergeist',\n",
    "               'figer': 'figure'}\n",
    "\n",
    "# Apply function\n",
    "df = clean_misspellings(df, 'clean_description', corrections)\n",
    "print(\"df['clean_spelling'] created\")\n",
    "# Download results\n",
    "#df.to_csv('cleaned_spelling_haunted_file.csv', index=False)\n",
    "#print('Downloaded cleaned_spelling_haunted_file.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "gLCNKFUq2C4t"
   },
   "source": [
    "Function to search specified misspelled words and replace them with the correct word."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "5tio5iV45Zhz"
   },
   "source": [
    "# Featurization (LLM)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "pbUWbBzn4d-Q"
   },
   "source": [
    "## LLM (Audio Evidence)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 304
    },
    "id": "-iJgXIdq5suM",
    "outputId": "243768ff-73ef-4a01-d31a-224e028b7e49"
   },
   "outputs": [],
   "source": [
    "import openai\n",
    "import pandas as pd\n",
    "from tqdm import tqdm\n",
    "import re\n",
    "\n",
    "# initialize OpenAI client\n",
    "client = openai.OpenAI(api_key=\"Key-HERE\")\n",
    "\n",
    "df_raw = pd.read_csv('../data/haunted_places.csv')\n",
    "\n",
    "\n",
    "# select a random sample\n",
    "# df_sample = df.sample(n=20, random_state=25).copy()\n",
    "\n",
    "def extract_audio_evidence(description):\n",
    "    prompt = f\"\"\"\n",
    "    You are analyzing descriptions of haunted locations to determine if they contain **audio evidence** of paranormal activity.\n",
    "\n",
    "    - Only consider sounds that are **explicitly linked to a supernatural presence**, such as **unexplained whispers, ghostly voices, eerie sounds, disembodied footsteps, supernatural noises, or loud bangs with no source**.\n",
    "    - Ignore background noises like **wind, animals, creaking houses, traffic, or other natural/environmental sounds** unless connected to the paranormal event.\n",
    "\n",
    "    ### **Task**\n",
    "    Analyze the following description and determine **if it contains audio evidence of paranormal activity**. Your answer must be in the format:\n",
    "\n",
    "    **Answer:** Yes or No\n",
    "    **Reasoning:** [Brief explanation of why audio evidence is or is not present]\n",
    "\n",
    "    ### **Example 1 (Audio Evidence Present)**\n",
    "    **Description:**\n",
    "    _\"Visitors often hear whispers echoing through the empty halls at night. Some claim to hear their names being called when no one is there.\"_\n",
    "\n",
    "    **Expected Response:**\n",
    "    **Answer:** Yes\n",
    "    **Reasoning:** The description explicitly mentions unexplained whispers and voices, which are directly tied to paranormal activity.\n",
    "\n",
    "    ---\n",
    "    ### **Example 2 (No Audio Evidence)**\n",
    "    **Description:**\n",
    "    _\"A woman in a white dress has been spotted near the graveyard, standing motionless under the moonlight.\"_\n",
    "\n",
    "    **Expected Response:**\n",
    "    **Answer:** No\n",
    "    **Reasoning:** There is no mention of sound-related experiences in this description.\n",
    "    ---\n",
    "    ### **Now analyze this description:**\n",
    "    {description}\n",
    "    \"\"\"\n",
    "    try:\n",
    "        response = client.chat.completions.create(\n",
    "            model=\"gpt-4o-mini\",\n",
    "            messages=[{\"role\": \"user\", \"content\": prompt}],\n",
    "            max_tokens=100,\n",
    "            temperature=0.1\n",
    "        )\n",
    "\n",
    "        # obtain response(this was for testing)\n",
    "        content = response.choices[0].message.content.strip()\n",
    "        # print(\"RAW RESPONSE:\", content)\n",
    "\n",
    "        # get yes/no answer\n",
    "        answer_match = re.search(r\"\\*\\*Answer:\\*\\*\\s*(Yes|No)\", content, re.IGNORECASE)\n",
    "        reasoning_match = re.search(r\"\\*\\*Reasoning:\\*\\*\\s*(.*)\", content, re.DOTALL)\n",
    "\n",
    "        answer = answer_match.group(1) if answer_match else \"Not Found\"\n",
    "        reasoning = reasoning_match.group(1).strip() if reasoning_match else \"Not Found\"\n",
    "\n",
    "        # binary answer\n",
    "        return pd.Series([answer, reasoning])\n",
    "\n",
    "    except Exception as e:\n",
    "        return pd.Series([f\"Error: {str(e)}\", \"\"])\n",
    "\n",
    "# apply to 2 columns\n",
    "tqdm.pandas()\n",
    "df[[\"Audio Evidence\", \"Reasoning\"]] = df[\"description\"].progress_apply(extract_audio_evidence)\n",
    "\n",
    "# save\n",
    "df.to_csv(\"../data/haunted_places_sample_audio.csv\", index=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "gqvWmKspiYtf"
   },
   "source": [
    "Read the csv input (haunted_places_sample_audio.csv) of the Audio Evidence LLM output.\n",
    "Then append those columns to the main df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 625
    },
    "id": "sdrb_Xpe07Z5",
    "outputId": "0f7edd20-7f1e-41f9-d04c-3f692341117b"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>city</th>\n",
       "      <th>country</th>\n",
       "      <th>description</th>\n",
       "      <th>location</th>\n",
       "      <th>state</th>\n",
       "      <th>state_abbrev</th>\n",
       "      <th>longitude</th>\n",
       "      <th>latitude</th>\n",
       "      <th>city_longitude</th>\n",
       "      <th>city_latitude</th>\n",
       "      <th>Audio Evidence</th>\n",
       "      <th>Reasoning</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Ada</td>\n",
       "      <td>United States</td>\n",
       "      <td>Ada witch - Sometimes you can see a misty blue...</td>\n",
       "      <td>Ada Cemetery</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-85.504893</td>\n",
       "      <td>42.962106</td>\n",
       "      <td>-85.495480</td>\n",
       "      <td>42.960727</td>\n",
       "      <td>Yes</td>\n",
       "      <td>The description includes reports of hearing th...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Addison</td>\n",
       "      <td>United States</td>\n",
       "      <td>A little girl was killed suddenly while waitin...</td>\n",
       "      <td>North Adams Rd.</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-84.381843</td>\n",
       "      <td>41.971425</td>\n",
       "      <td>-84.347168</td>\n",
       "      <td>41.986434</td>\n",
       "      <td>Yes</td>\n",
       "      <td>The description includes instances of knocking...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Adrian</td>\n",
       "      <td>United States</td>\n",
       "      <td>If you take Gorman Rd. west towards Sand Creek...</td>\n",
       "      <td>Ghost Trestle</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-84.035656</td>\n",
       "      <td>41.904538</td>\n",
       "      <td>-84.037166</td>\n",
       "      <td>41.897547</td>\n",
       "      <td>No</td>\n",
       "      <td>The description does not mention any specific ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Adrian</td>\n",
       "      <td>United States</td>\n",
       "      <td>In the 1970's, one room, room 211, in the old ...</td>\n",
       "      <td>Siena Heights University</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-84.017565</td>\n",
       "      <td>41.905712</td>\n",
       "      <td>-84.037166</td>\n",
       "      <td>41.897547</td>\n",
       "      <td>No</td>\n",
       "      <td>The description details various phenomena such...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Albion</td>\n",
       "      <td>United States</td>\n",
       "      <td>Kappa Delta Sorority - The Kappa Delta Sororit...</td>\n",
       "      <td>Albion College</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-84.745177</td>\n",
       "      <td>42.244006</td>\n",
       "      <td>-84.753030</td>\n",
       "      <td>42.243097</td>\n",
       "      <td>Yes</td>\n",
       "      <td>The description includes reports of giggling a...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      city        country                                        description  \\\n",
       "0      Ada  United States  Ada witch - Sometimes you can see a misty blue...   \n",
       "1  Addison  United States  A little girl was killed suddenly while waitin...   \n",
       "2   Adrian  United States  If you take Gorman Rd. west towards Sand Creek...   \n",
       "3   Adrian  United States  In the 1970's, one room, room 211, in the old ...   \n",
       "4   Albion  United States  Kappa Delta Sorority - The Kappa Delta Sororit...   \n",
       "\n",
       "                   location     state state_abbrev  longitude   latitude  \\\n",
       "0              Ada Cemetery  Michigan           MI -85.504893  42.962106   \n",
       "1           North Adams Rd.  Michigan           MI -84.381843  41.971425   \n",
       "2             Ghost Trestle  Michigan           MI -84.035656  41.904538   \n",
       "3  Siena Heights University  Michigan           MI -84.017565  41.905712   \n",
       "4            Albion College  Michigan           MI -84.745177  42.244006   \n",
       "\n",
       "   city_longitude  city_latitude Audio Evidence  \\\n",
       "0      -85.495480      42.960727            Yes   \n",
       "1      -84.347168      41.986434            Yes   \n",
       "2      -84.037166      41.897547             No   \n",
       "3      -84.037166      41.897547             No   \n",
       "4      -84.753030      42.243097            Yes   \n",
       "\n",
       "                                           Reasoning  \n",
       "0  The description includes reports of hearing th...  \n",
       "1  The description includes instances of knocking...  \n",
       "2  The description does not mention any specific ...  \n",
       "3  The description details various phenomena such...  \n",
       "4  The description includes reports of giggling a...  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_audio = pd.read_csv(\"../data/haunted_places_sample_audio.csv\", sep=\",\")\n",
    "df_audio.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 625
    },
    "id": "19d59gh51Epo",
    "outputId": "e339051e-bf6c-4c1c-9ab5-535e5da94cd8"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>city</th>\n",
       "      <th>country</th>\n",
       "      <th>description</th>\n",
       "      <th>location</th>\n",
       "      <th>state</th>\n",
       "      <th>state_abbrev</th>\n",
       "      <th>longitude</th>\n",
       "      <th>latitude</th>\n",
       "      <th>city_longitude</th>\n",
       "      <th>city_latitude</th>\n",
       "      <th>clean_description</th>\n",
       "      <th>clean_spelling</th>\n",
       "      <th>Audio Evidence</th>\n",
       "      <th>Reasoning</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Ada</td>\n",
       "      <td>United States</td>\n",
       "      <td>Ada witch - Sometimes you can see a misty blue...</td>\n",
       "      <td>Ada Cemetery</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-85.504893</td>\n",
       "      <td>42.962106</td>\n",
       "      <td>-85.495480</td>\n",
       "      <td>42.960727</td>\n",
       "      <td>Ada witch Sometimes you can see a misty blue f...</td>\n",
       "      <td>Ada witch Sometimes you can see a misty blue f...</td>\n",
       "      <td>Yes</td>\n",
       "      <td>The description includes reports of hearing th...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Addison</td>\n",
       "      <td>United States</td>\n",
       "      <td>A little girl was killed suddenly while waitin...</td>\n",
       "      <td>North Adams Rd.</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-84.381843</td>\n",
       "      <td>41.971425</td>\n",
       "      <td>-84.347168</td>\n",
       "      <td>41.986434</td>\n",
       "      <td>A little girl was killed suddenly while waitin...</td>\n",
       "      <td>A little girl was killed suddenly while waitin...</td>\n",
       "      <td>Yes</td>\n",
       "      <td>The description includes instances of knocking...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Adrian</td>\n",
       "      <td>United States</td>\n",
       "      <td>If you take Gorman Rd. west towards Sand Creek...</td>\n",
       "      <td>Ghost Trestle</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-84.035656</td>\n",
       "      <td>41.904538</td>\n",
       "      <td>-84.037166</td>\n",
       "      <td>41.897547</td>\n",
       "      <td>If you take Gorman Rd west towards Sand Creek ...</td>\n",
       "      <td>If you take Gorman Rd west towards Sand Creek ...</td>\n",
       "      <td>No</td>\n",
       "      <td>The description does not mention any specific ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Adrian</td>\n",
       "      <td>United States</td>\n",
       "      <td>In the 1970's, one room, room 211, in the old ...</td>\n",
       "      <td>Siena Heights University</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-84.017565</td>\n",
       "      <td>41.905712</td>\n",
       "      <td>-84.037166</td>\n",
       "      <td>41.897547</td>\n",
       "      <td>In the 1970 one room room 211 in the old secti...</td>\n",
       "      <td>In the 1970 one room room 211 in the old secti...</td>\n",
       "      <td>No</td>\n",
       "      <td>The description details various phenomena such...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Albion</td>\n",
       "      <td>United States</td>\n",
       "      <td>Kappa Delta Sorority - The Kappa Delta Sororit...</td>\n",
       "      <td>Albion College</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-84.745177</td>\n",
       "      <td>42.244006</td>\n",
       "      <td>-84.753030</td>\n",
       "      <td>42.243097</td>\n",
       "      <td>Kappa Delta Sorority The Kappa Delta Sorority ...</td>\n",
       "      <td>Kappa Delta Sorority The Kappa Delta Sorority ...</td>\n",
       "      <td>Yes</td>\n",
       "      <td>The description includes reports of giggling a...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      city        country                                        description  \\\n",
       "0      Ada  United States  Ada witch - Sometimes you can see a misty blue...   \n",
       "1  Addison  United States  A little girl was killed suddenly while waitin...   \n",
       "2   Adrian  United States  If you take Gorman Rd. west towards Sand Creek...   \n",
       "3   Adrian  United States  In the 1970's, one room, room 211, in the old ...   \n",
       "4   Albion  United States  Kappa Delta Sorority - The Kappa Delta Sororit...   \n",
       "\n",
       "                   location     state state_abbrev  longitude   latitude  \\\n",
       "0              Ada Cemetery  Michigan           MI -85.504893  42.962106   \n",
       "1           North Adams Rd.  Michigan           MI -84.381843  41.971425   \n",
       "2             Ghost Trestle  Michigan           MI -84.035656  41.904538   \n",
       "3  Siena Heights University  Michigan           MI -84.017565  41.905712   \n",
       "4            Albion College  Michigan           MI -84.745177  42.244006   \n",
       "\n",
       "   city_longitude  city_latitude  \\\n",
       "0      -85.495480      42.960727   \n",
       "1      -84.347168      41.986434   \n",
       "2      -84.037166      41.897547   \n",
       "3      -84.037166      41.897547   \n",
       "4      -84.753030      42.243097   \n",
       "\n",
       "                                   clean_description  \\\n",
       "0  Ada witch Sometimes you can see a misty blue f...   \n",
       "1  A little girl was killed suddenly while waitin...   \n",
       "2  If you take Gorman Rd west towards Sand Creek ...   \n",
       "3  In the 1970 one room room 211 in the old secti...   \n",
       "4  Kappa Delta Sorority The Kappa Delta Sorority ...   \n",
       "\n",
       "                                      clean_spelling Audio Evidence  \\\n",
       "0  Ada witch Sometimes you can see a misty blue f...            Yes   \n",
       "1  A little girl was killed suddenly while waitin...            Yes   \n",
       "2  If you take Gorman Rd west towards Sand Creek ...             No   \n",
       "3  In the 1970 one room room 211 in the old secti...             No   \n",
       "4  Kappa Delta Sorority The Kappa Delta Sorority ...            Yes   \n",
       "\n",
       "                                           Reasoning  \n",
       "0  The description includes reports of hearing th...  \n",
       "1  The description includes instances of knocking...  \n",
       "2  The description does not mention any specific ...  \n",
       "3  The description details various phenomena such...  \n",
       "4  The description includes reports of giggling a...  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = df.join(df_audio[['Audio Evidence', 'Reasoning']])\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "b3BGLHBu58uu",
    "outputId": "4f134dbe-31b6-498d-f5e0-0f102efcfdbb"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['city', 'country', 'description', 'location', 'state', 'state_abbrev',\n",
      "       'longitude', 'latitude', 'city_longitude', 'city_latitude',\n",
      "       'clean_description', 'clean_spelling', 'Audio Evidence',\n",
      "       'Audio Reasoning'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "df.rename(columns={'Reasoning': 'Audio Reasoning'}, inplace=True)\n",
    "print(df.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "YDGbAjS72sbr",
    "outputId": "ab313dd0-3007-4d3b-bab4-cc36ce9deaa7"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['city', 'country', 'description', 'location', 'state', 'state_abbrev',\n",
      "       'longitude', 'latitude', 'city_longitude', 'city_latitude',\n",
      "       'clean_description', 'clean_spelling', 'Audio Evidence',\n",
      "       'Audio Reasoning'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "print(df.columns)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "lJ6NLQEA5gir"
   },
   "source": [
    "## Time of Day"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "KIs02KdRbk8B"
   },
   "source": [
    "**Time of day evidence code**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 269,
     "referenced_widgets": [
      "8271d7226d3c4301a43b266f8f731eb7",
      "db3407f54bb8404697cb29e704ded51c",
      "f6c2e20d7f3f42f386f40b10ee7a9687",
      "31cee55fa1b3423d98cf13520d81c815",
      "7660778347674e65bb6c2ffd4bc8d81f",
      "525823eaba784bbb8d96dc9828c0eb4f"
     ]
    },
    "id": "kSXpoWtnbgop",
    "outputId": "1b0b6259-106e-4790-9dfa-0a252e14f88d"
   },
   "outputs": [],
   "source": [
    "##uncomment this to install the keras tensorflow\n",
    "## pip install tensorflow\n",
    "# pip install tf-keras\n",
    "\n",
    "## This feature approach return the time of the day label using zero-shot classification\n",
    "## of the zero=shot classification from facebool/bart-large-mnli\n",
    "\n",
    "\n",
    "import pandas as pd\n",
    "from transformers import pipeline\n",
    "\n",
    "# Initialize the NLI pipeline using a pre-trained model from Hugging Face\n",
    "classifier = pipeline(\"zero-shot-classification\", model=\"facebook/bart-large-mnli\")\n",
    "\n",
    "# Function to classify time of day using NLI\n",
    "def classify_time_of_day(text):\n",
    "    # Define the possible labels (morning, evening, dusk, unknown)\n",
    "    candidate_labels = [\"Morning\", \"Evening\", \"Dusk\", \"Unknown\"]\n",
    "\n",
    "    # Use the zero-shot classification to classify the text\n",
    "    result = classifier(text, candidate_labels)\n",
    "\n",
    "    # Return the label with the highest score\n",
    "    return result['labels'][0]\n",
    "\n",
    "# Function to process the CSV and add the time of day column\n",
    "def update_time_of_day(input_file):\n",
    "    # Read the CSV file into a pandas DataFrame\n",
    "    df_time_of_day = pd.read_csv(input_file)\n",
    "\n",
    "    # Check if 'description' column exists\n",
    "    if 'description' not in df.columns:\n",
    "        print(\"Error: The CSV file must contain a 'description' column with text data.\")\n",
    "        return\n",
    "\n",
    "    # Create a list to hold the time of day results\n",
    "    time_of_day_list = []\n",
    "\n",
    "    # Iterate through each row in the DataFrame\n",
    "    for index, row in df.iterrows():\n",
    "        text = row['description']  # Get the text data from the 'description' column\n",
    "\n",
    "        # Use the NLI classifier to determine the time of day\n",
    "        time_of_day = classify_time_of_day(text)\n",
    "        time_of_day_list.append(time_of_day)\n",
    "\n",
    "    # Add the 'time_of_day' column to the DataFrame\n",
    "    df_time_of_day['time_of_day'] = time_of_day_list\n",
    "\n",
    "    # Save the updated DataFrame to a new CSV file\n",
    "    df.to_csv('../data/time_of_day_file.csv', index=False)\n",
    "    print(\"Updated file saved as 'time_of_day_file.csv'.\")\n",
    "\n",
    "# Example usage: Pass your CSV file path as an argument\n",
    "update_time_of_day('../data/cleaned_haunted_file.csv')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 469
    },
    "id": "NR9KiARP3-vm",
    "outputId": "fe980898-c188-48ad-9ad0-7f63e0a91369"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>city</th>\n",
       "      <th>country</th>\n",
       "      <th>description</th>\n",
       "      <th>location</th>\n",
       "      <th>state</th>\n",
       "      <th>state_abbrev</th>\n",
       "      <th>longitude</th>\n",
       "      <th>latitude</th>\n",
       "      <th>city_longitude</th>\n",
       "      <th>city_latitude</th>\n",
       "      <th>time_of_day</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Ada</td>\n",
       "      <td>United States</td>\n",
       "      <td>Ada witch Sometimes you can see a misty blue f...</td>\n",
       "      <td>Ada Cemetery</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-85.504893</td>\n",
       "      <td>42.962106</td>\n",
       "      <td>-85.495480</td>\n",
       "      <td>42.960727</td>\n",
       "      <td>Dusk</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Addison</td>\n",
       "      <td>United States</td>\n",
       "      <td>A little girl was killed suddenly while waitin...</td>\n",
       "      <td>North Adams Rd</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-84.381843</td>\n",
       "      <td>41.971425</td>\n",
       "      <td>-84.347168</td>\n",
       "      <td>41.986434</td>\n",
       "      <td>Dusk</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Adrian</td>\n",
       "      <td>United States</td>\n",
       "      <td>If you take Gorman Rd west towards Sand Creek ...</td>\n",
       "      <td>Ghost Trestle</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-84.035656</td>\n",
       "      <td>41.904538</td>\n",
       "      <td>-84.037166</td>\n",
       "      <td>41.897547</td>\n",
       "      <td>Evening</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Adrian</td>\n",
       "      <td>United States</td>\n",
       "      <td>In the 1970 one room room 211 in the old secti...</td>\n",
       "      <td>Siena Heights University</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-84.017565</td>\n",
       "      <td>41.905712</td>\n",
       "      <td>-84.037166</td>\n",
       "      <td>41.897547</td>\n",
       "      <td>Unknown</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Albion</td>\n",
       "      <td>United States</td>\n",
       "      <td>Kappa Delta Sorority The Kappa Delta Sorority ...</td>\n",
       "      <td>Albion College</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-84.745177</td>\n",
       "      <td>42.244006</td>\n",
       "      <td>-84.753030</td>\n",
       "      <td>42.243097</td>\n",
       "      <td>Evening</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      city        country                                        description  \\\n",
       "0      Ada  United States  Ada witch Sometimes you can see a misty blue f...   \n",
       "1  Addison  United States  A little girl was killed suddenly while waitin...   \n",
       "2   Adrian  United States  If you take Gorman Rd west towards Sand Creek ...   \n",
       "3   Adrian  United States  In the 1970 one room room 211 in the old secti...   \n",
       "4   Albion  United States  Kappa Delta Sorority The Kappa Delta Sorority ...   \n",
       "\n",
       "                   location     state state_abbrev  longitude   latitude  \\\n",
       "0              Ada Cemetery  Michigan           MI -85.504893  42.962106   \n",
       "1            North Adams Rd  Michigan           MI -84.381843  41.971425   \n",
       "2             Ghost Trestle  Michigan           MI -84.035656  41.904538   \n",
       "3  Siena Heights University  Michigan           MI -84.017565  41.905712   \n",
       "4            Albion College  Michigan           MI -84.745177  42.244006   \n",
       "\n",
       "   city_longitude  city_latitude time_of_day  \n",
       "0      -85.495480      42.960727        Dusk  \n",
       "1      -84.347168      41.986434        Dusk  \n",
       "2      -84.037166      41.897547     Evening  \n",
       "3      -84.037166      41.897547     Unknown  \n",
       "4      -84.753030      42.243097     Evening  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_time_of_day = pd.read_csv(\"../data/updated_time_of_day_file.csv\", sep=\",\")\n",
    "df_time_of_day.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 625
    },
    "id": "QkBewdIZ4MVH",
    "outputId": "7826c579-f3a9-4422-ecbf-b51d9cffe0d2"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>city</th>\n",
       "      <th>country</th>\n",
       "      <th>description</th>\n",
       "      <th>location</th>\n",
       "      <th>state</th>\n",
       "      <th>state_abbrev</th>\n",
       "      <th>longitude</th>\n",
       "      <th>latitude</th>\n",
       "      <th>city_longitude</th>\n",
       "      <th>city_latitude</th>\n",
       "      <th>clean_description</th>\n",
       "      <th>clean_spelling</th>\n",
       "      <th>Audio Evidence</th>\n",
       "      <th>Audio Reasoning</th>\n",
       "      <th>time_of_day</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Ada</td>\n",
       "      <td>United States</td>\n",
       "      <td>Ada witch - Sometimes you can see a misty blue...</td>\n",
       "      <td>Ada Cemetery</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-85.504893</td>\n",
       "      <td>42.962106</td>\n",
       "      <td>-85.495480</td>\n",
       "      <td>42.960727</td>\n",
       "      <td>Ada witch Sometimes you can see a misty blue f...</td>\n",
       "      <td>Ada witch Sometimes you can see a misty blue f...</td>\n",
       "      <td>Yes</td>\n",
       "      <td>The description includes reports of hearing th...</td>\n",
       "      <td>Dusk</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Addison</td>\n",
       "      <td>United States</td>\n",
       "      <td>A little girl was killed suddenly while waitin...</td>\n",
       "      <td>North Adams Rd.</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-84.381843</td>\n",
       "      <td>41.971425</td>\n",
       "      <td>-84.347168</td>\n",
       "      <td>41.986434</td>\n",
       "      <td>A little girl was killed suddenly while waitin...</td>\n",
       "      <td>A little girl was killed suddenly while waitin...</td>\n",
       "      <td>Yes</td>\n",
       "      <td>The description includes instances of knocking...</td>\n",
       "      <td>Dusk</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Adrian</td>\n",
       "      <td>United States</td>\n",
       "      <td>If you take Gorman Rd. west towards Sand Creek...</td>\n",
       "      <td>Ghost Trestle</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-84.035656</td>\n",
       "      <td>41.904538</td>\n",
       "      <td>-84.037166</td>\n",
       "      <td>41.897547</td>\n",
       "      <td>If you take Gorman Rd west towards Sand Creek ...</td>\n",
       "      <td>If you take Gorman Rd west towards Sand Creek ...</td>\n",
       "      <td>No</td>\n",
       "      <td>The description does not mention any specific ...</td>\n",
       "      <td>Evening</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Adrian</td>\n",
       "      <td>United States</td>\n",
       "      <td>In the 1970's, one room, room 211, in the old ...</td>\n",
       "      <td>Siena Heights University</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-84.017565</td>\n",
       "      <td>41.905712</td>\n",
       "      <td>-84.037166</td>\n",
       "      <td>41.897547</td>\n",
       "      <td>In the 1970 one room room 211 in the old secti...</td>\n",
       "      <td>In the 1970 one room room 211 in the old secti...</td>\n",
       "      <td>No</td>\n",
       "      <td>The description details various phenomena such...</td>\n",
       "      <td>Unknown</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Albion</td>\n",
       "      <td>United States</td>\n",
       "      <td>Kappa Delta Sorority - The Kappa Delta Sororit...</td>\n",
       "      <td>Albion College</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-84.745177</td>\n",
       "      <td>42.244006</td>\n",
       "      <td>-84.753030</td>\n",
       "      <td>42.243097</td>\n",
       "      <td>Kappa Delta Sorority The Kappa Delta Sorority ...</td>\n",
       "      <td>Kappa Delta Sorority The Kappa Delta Sorority ...</td>\n",
       "      <td>Yes</td>\n",
       "      <td>The description includes reports of giggling a...</td>\n",
       "      <td>Evening</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      city        country                                        description  \\\n",
       "0      Ada  United States  Ada witch - Sometimes you can see a misty blue...   \n",
       "1  Addison  United States  A little girl was killed suddenly while waitin...   \n",
       "2   Adrian  United States  If you take Gorman Rd. west towards Sand Creek...   \n",
       "3   Adrian  United States  In the 1970's, one room, room 211, in the old ...   \n",
       "4   Albion  United States  Kappa Delta Sorority - The Kappa Delta Sororit...   \n",
       "\n",
       "                   location     state state_abbrev  longitude   latitude  \\\n",
       "0              Ada Cemetery  Michigan           MI -85.504893  42.962106   \n",
       "1           North Adams Rd.  Michigan           MI -84.381843  41.971425   \n",
       "2             Ghost Trestle  Michigan           MI -84.035656  41.904538   \n",
       "3  Siena Heights University  Michigan           MI -84.017565  41.905712   \n",
       "4            Albion College  Michigan           MI -84.745177  42.244006   \n",
       "\n",
       "   city_longitude  city_latitude  \\\n",
       "0      -85.495480      42.960727   \n",
       "1      -84.347168      41.986434   \n",
       "2      -84.037166      41.897547   \n",
       "3      -84.037166      41.897547   \n",
       "4      -84.753030      42.243097   \n",
       "\n",
       "                                   clean_description  \\\n",
       "0  Ada witch Sometimes you can see a misty blue f...   \n",
       "1  A little girl was killed suddenly while waitin...   \n",
       "2  If you take Gorman Rd west towards Sand Creek ...   \n",
       "3  In the 1970 one room room 211 in the old secti...   \n",
       "4  Kappa Delta Sorority The Kappa Delta Sorority ...   \n",
       "\n",
       "                                      clean_spelling Audio Evidence  \\\n",
       "0  Ada witch Sometimes you can see a misty blue f...            Yes   \n",
       "1  A little girl was killed suddenly while waitin...            Yes   \n",
       "2  If you take Gorman Rd west towards Sand Creek ...             No   \n",
       "3  In the 1970 one room room 211 in the old secti...             No   \n",
       "4  Kappa Delta Sorority The Kappa Delta Sorority ...            Yes   \n",
       "\n",
       "                                     Audio Reasoning time_of_day  \n",
       "0  The description includes reports of hearing th...        Dusk  \n",
       "1  The description includes instances of knocking...        Dusk  \n",
       "2  The description does not mention any specific ...     Evening  \n",
       "3  The description details various phenomena such...     Unknown  \n",
       "4  The description includes reports of giggling a...     Evening  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = df.join(df_time_of_day[['time_of_day']])\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "nYVERr6k2QND"
   },
   "source": [
    "## **Image/Video/Visual Evidence**\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "T4C7tnpr0yqA"
   },
   "outputs": [],
   "source": [
    "\n",
    "import openai\n",
    "import pandas as pd\n",
    "from tqdm import tqdm\n",
    "import os\n",
    "import re\n",
    "\n",
    "\n",
    "# initialize OpenAI client\n",
    "client = openai.OpenAI(api_key=\"API KEY\")\n",
    "\n",
    "# Normalize column names (remove spaces, convert to lowercase)\n",
    "df.columns = df.columns.str.lower().str.strip()\n",
    "\n",
    "# Check if \"description\" column exists\n",
    "if \"description\" not in df.columns:\n",
    "    raise KeyError(\"The column 'description' is missing from the dataset. Check your CSV file.\")\n",
    "\n",
    "# Define function to extract visual evidence\n",
    "def extract_visual_evidence(description):\n",
    "    prompt = f\"\"\"\n",
    "    Does the following text specifically mention existing images, videos, or photographic evidence of paranormal activity?\n",
    "    Only count it as 'Yes' if the text explicitly states that a photo, video, or recorded footage exists.\n",
    "    Include security camera footage only if it captured something unusual, but ignore mentions of security cameras in general or warnings about surveillance if it does not have to do with paranormal activity.\n",
    "    Ignore any mentions of security guards recording trespassers, people seeing something with their own eyes, or unverified claims.\n",
    "    Count news reports if they state a photo or video was included.\n",
    "    Include historical or archival footage if it is still available.\n",
    "    Include multiple witness reports if they claim to have recorded evidence.\n",
    "\n",
    "    **Task:**\n",
    "    Analyze the following description and determine if it contains visual evidence of paranormal activity.\n",
    "    Your answer must be in the following format:\n",
    "\n",
    "    **Answer:** Yes or No\n",
    "    **Reasoning:** [Brief explanation of why visual evidence is or is not present]\n",
    "\n",
    "    **Example 1 (Visual Evidence Present)**\n",
    "    **Description:**\n",
    "    _\"Denton Rd. - There's an overall bad feeling in this cemetery. If you take a camera (preferably digital) and take pictures, you'll see orbs everywhere. There's a specific large, greenish orb that shows up in photographs quite a bit.\"_\n",
    "\n",
    "    **Expected Response:**\n",
    "    **Answer:** Yes\n",
    "    **Reasoning:** The description explicitly mentions unexplained green orbs that are in photographs, which are directly tied to paranormal activity.\n",
    "\n",
    "    **Example 2 (No Visual Evidence)**\n",
    "    **Description:**\n",
    "    _\"People report hearing footsteps, and doors slamming where there are no doors, a small child's voice say 'Mama?'.\"_\n",
    "\n",
    "    **Expected Response:**\n",
    "    **Answer:** No\n",
    "    **Reasoning:** There is no mention of visual-related experiences in this description.\n",
    "\n",
    "    ---\n",
    "    ### **Now analyze this description:**\n",
    "    {description}\n",
    "    \"\"\"\n",
    "\n",
    "    try:\n",
    "        response = client.chat.completions.create(\n",
    "            model=\"gpt-4o-mini\",\n",
    "            messages=[{\"role\": \"user\", \"content\": prompt}],\n",
    "            max_tokens=100,\n",
    "            temperature=0.1\n",
    "        )\n",
    "\n",
    "        # Obtain raw response\n",
    "        content = response.choices[0].message.content.strip()\n",
    "        # print(\"RAW RESPONSE:\", content)  # Debugging\n",
    "\n",
    "        # Improved regex parsing\n",
    "        answer_match = re.search(r\"(?i)\\*\\*Answer:\\*\\*\\s*(True|False)\", content)\n",
    "        reasoning_match = re.search(r\"(?i)\\*\\*Reasoning:\\*\\*\\s*(.+)\", content, re.DOTALL)\n",
    "\n",
    "        answer = answer_match.group(1) if answer_match else \"Unknown\"\n",
    "        reasoning = reasoning_match.group(1).strip() if reasoning_match else \"Parsing error\"\n",
    "\n",
    "        return pd.Series([answer, reasoning])\n",
    "\n",
    "    except Exception as e:\n",
    "        return pd.Series([f\"Error: {str(e)}\", \"\"])\n",
    "\n",
    "# Apply function to DataFrame with tqdm progress bar\n",
    "tqdm.pandas()\n",
    "df[[\"visual_evidence\", \"reasoning\"]] = df[\"description\"].progress_apply(extract_visual_evidence)\n",
    "\n",
    "# Save results\n",
    "df.to_csv(\"../data/haunted_places_visual_evidence.csv\", index=False)\n",
    "print(\"Processing complete. File saved as 'cleaned_haunted_file.csv'.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 660
    },
    "id": "AiAuQl7k4rJh",
    "outputId": "385ea471-921e-44d4-c3ab-ac9cab5e8f3a"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>city</th>\n",
       "      <th>country</th>\n",
       "      <th>description</th>\n",
       "      <th>location</th>\n",
       "      <th>state</th>\n",
       "      <th>state_abbrev</th>\n",
       "      <th>longitude</th>\n",
       "      <th>latitude</th>\n",
       "      <th>city_longitude</th>\n",
       "      <th>city_latitude</th>\n",
       "      <th>visual_evidence</th>\n",
       "      <th>reasoning</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Ada</td>\n",
       "      <td>United States</td>\n",
       "      <td>Ada witch - Sometimes you can see a misty blue...</td>\n",
       "      <td>Ada Cemetery</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-85.504893</td>\n",
       "      <td>42.962106</td>\n",
       "      <td>-85.495480</td>\n",
       "      <td>42.960727</td>\n",
       "      <td>False</td>\n",
       "      <td>The description does not mention any existing ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Addison</td>\n",
       "      <td>United States</td>\n",
       "      <td>A little girl was killed suddenly while waitin...</td>\n",
       "      <td>North Adams Rd.</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-84.381843</td>\n",
       "      <td>41.971425</td>\n",
       "      <td>-84.347168</td>\n",
       "      <td>41.986434</td>\n",
       "      <td>False</td>\n",
       "      <td>The description details various paranormal act...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Adrian</td>\n",
       "      <td>United States</td>\n",
       "      <td>If you take Gorman Rd. west towards Sand Creek...</td>\n",
       "      <td>Ghost Trestle</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-84.035656</td>\n",
       "      <td>41.904538</td>\n",
       "      <td>-84.037166</td>\n",
       "      <td>41.897547</td>\n",
       "      <td>False</td>\n",
       "      <td>The description does not mention any existing ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Adrian</td>\n",
       "      <td>United States</td>\n",
       "      <td>In the 1970's, one room, room 211, in the old ...</td>\n",
       "      <td>Siena Heights University</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-84.017565</td>\n",
       "      <td>41.905712</td>\n",
       "      <td>-84.037166</td>\n",
       "      <td>41.897547</td>\n",
       "      <td>False</td>\n",
       "      <td>The description details various paranormal phe...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Albion</td>\n",
       "      <td>United States</td>\n",
       "      <td>Kappa Delta Sorority - The Kappa Delta Sororit...</td>\n",
       "      <td>Albion College</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-84.745177</td>\n",
       "      <td>42.244006</td>\n",
       "      <td>-84.753030</td>\n",
       "      <td>42.243097</td>\n",
       "      <td>False</td>\n",
       "      <td>The description does not mention any existing ...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      city        country                                        description  \\\n",
       "0      Ada  United States  Ada witch - Sometimes you can see a misty blue...   \n",
       "1  Addison  United States  A little girl was killed suddenly while waitin...   \n",
       "2   Adrian  United States  If you take Gorman Rd. west towards Sand Creek...   \n",
       "3   Adrian  United States  In the 1970's, one room, room 211, in the old ...   \n",
       "4   Albion  United States  Kappa Delta Sorority - The Kappa Delta Sororit...   \n",
       "\n",
       "                   location     state state_abbrev  longitude   latitude  \\\n",
       "0              Ada Cemetery  Michigan           MI -85.504893  42.962106   \n",
       "1           North Adams Rd.  Michigan           MI -84.381843  41.971425   \n",
       "2             Ghost Trestle  Michigan           MI -84.035656  41.904538   \n",
       "3  Siena Heights University  Michigan           MI -84.017565  41.905712   \n",
       "4            Albion College  Michigan           MI -84.745177  42.244006   \n",
       "\n",
       "   city_longitude  city_latitude  visual_evidence  \\\n",
       "0      -85.495480      42.960727            False   \n",
       "1      -84.347168      41.986434            False   \n",
       "2      -84.037166      41.897547            False   \n",
       "3      -84.037166      41.897547            False   \n",
       "4      -84.753030      42.243097            False   \n",
       "\n",
       "                                           reasoning  \n",
       "0  The description does not mention any existing ...  \n",
       "1  The description details various paranormal act...  \n",
       "2  The description does not mention any existing ...  \n",
       "3  The description details various paranormal phe...  \n",
       "4  The description does not mention any existing ...  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_visual_evidence = pd.read_csv(\"../data/haunted_places_visual_evidence.csv\", sep=\",\")\n",
    "df_visual_evidence.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 678
    },
    "id": "n_UG3voc5Kle",
    "outputId": "28801a31-3736-4d6a-c278-675dc1619029"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>city</th>\n",
       "      <th>country</th>\n",
       "      <th>description</th>\n",
       "      <th>location</th>\n",
       "      <th>state</th>\n",
       "      <th>state_abbrev</th>\n",
       "      <th>longitude</th>\n",
       "      <th>latitude</th>\n",
       "      <th>city_longitude</th>\n",
       "      <th>city_latitude</th>\n",
       "      <th>clean_description</th>\n",
       "      <th>clean_spelling</th>\n",
       "      <th>Audio Evidence</th>\n",
       "      <th>Audio Reasoning</th>\n",
       "      <th>time_of_day</th>\n",
       "      <th>visual_evidence</th>\n",
       "      <th>reasoning</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Ada</td>\n",
       "      <td>United States</td>\n",
       "      <td>Ada witch - Sometimes you can see a misty blue...</td>\n",
       "      <td>Ada Cemetery</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-85.504893</td>\n",
       "      <td>42.962106</td>\n",
       "      <td>-85.495480</td>\n",
       "      <td>42.960727</td>\n",
       "      <td>Ada witch Sometimes you can see a misty blue f...</td>\n",
       "      <td>Ada witch Sometimes you can see a misty blue f...</td>\n",
       "      <td>Yes</td>\n",
       "      <td>The description includes reports of hearing th...</td>\n",
       "      <td>Dusk</td>\n",
       "      <td>False</td>\n",
       "      <td>The description does not mention any existing ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Addison</td>\n",
       "      <td>United States</td>\n",
       "      <td>A little girl was killed suddenly while waitin...</td>\n",
       "      <td>North Adams Rd.</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-84.381843</td>\n",
       "      <td>41.971425</td>\n",
       "      <td>-84.347168</td>\n",
       "      <td>41.986434</td>\n",
       "      <td>A little girl was killed suddenly while waitin...</td>\n",
       "      <td>A little girl was killed suddenly while waitin...</td>\n",
       "      <td>Yes</td>\n",
       "      <td>The description includes instances of knocking...</td>\n",
       "      <td>Dusk</td>\n",
       "      <td>False</td>\n",
       "      <td>The description details various paranormal act...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Adrian</td>\n",
       "      <td>United States</td>\n",
       "      <td>If you take Gorman Rd. west towards Sand Creek...</td>\n",
       "      <td>Ghost Trestle</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-84.035656</td>\n",
       "      <td>41.904538</td>\n",
       "      <td>-84.037166</td>\n",
       "      <td>41.897547</td>\n",
       "      <td>If you take Gorman Rd west towards Sand Creek ...</td>\n",
       "      <td>If you take Gorman Rd west towards Sand Creek ...</td>\n",
       "      <td>No</td>\n",
       "      <td>The description does not mention any specific ...</td>\n",
       "      <td>Evening</td>\n",
       "      <td>False</td>\n",
       "      <td>The description does not mention any existing ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Adrian</td>\n",
       "      <td>United States</td>\n",
       "      <td>In the 1970's, one room, room 211, in the old ...</td>\n",
       "      <td>Siena Heights University</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-84.017565</td>\n",
       "      <td>41.905712</td>\n",
       "      <td>-84.037166</td>\n",
       "      <td>41.897547</td>\n",
       "      <td>In the 1970 one room room 211 in the old secti...</td>\n",
       "      <td>In the 1970 one room room 211 in the old secti...</td>\n",
       "      <td>No</td>\n",
       "      <td>The description details various phenomena such...</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>False</td>\n",
       "      <td>The description details various paranormal phe...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Albion</td>\n",
       "      <td>United States</td>\n",
       "      <td>Kappa Delta Sorority - The Kappa Delta Sororit...</td>\n",
       "      <td>Albion College</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-84.745177</td>\n",
       "      <td>42.244006</td>\n",
       "      <td>-84.753030</td>\n",
       "      <td>42.243097</td>\n",
       "      <td>Kappa Delta Sorority The Kappa Delta Sorority ...</td>\n",
       "      <td>Kappa Delta Sorority The Kappa Delta Sorority ...</td>\n",
       "      <td>Yes</td>\n",
       "      <td>The description includes reports of giggling a...</td>\n",
       "      <td>Evening</td>\n",
       "      <td>False</td>\n",
       "      <td>The description does not mention any existing ...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      city        country                                        description  \\\n",
       "0      Ada  United States  Ada witch - Sometimes you can see a misty blue...   \n",
       "1  Addison  United States  A little girl was killed suddenly while waitin...   \n",
       "2   Adrian  United States  If you take Gorman Rd. west towards Sand Creek...   \n",
       "3   Adrian  United States  In the 1970's, one room, room 211, in the old ...   \n",
       "4   Albion  United States  Kappa Delta Sorority - The Kappa Delta Sororit...   \n",
       "\n",
       "                   location     state state_abbrev  longitude   latitude  \\\n",
       "0              Ada Cemetery  Michigan           MI -85.504893  42.962106   \n",
       "1           North Adams Rd.  Michigan           MI -84.381843  41.971425   \n",
       "2             Ghost Trestle  Michigan           MI -84.035656  41.904538   \n",
       "3  Siena Heights University  Michigan           MI -84.017565  41.905712   \n",
       "4            Albion College  Michigan           MI -84.745177  42.244006   \n",
       "\n",
       "   city_longitude  city_latitude  \\\n",
       "0      -85.495480      42.960727   \n",
       "1      -84.347168      41.986434   \n",
       "2      -84.037166      41.897547   \n",
       "3      -84.037166      41.897547   \n",
       "4      -84.753030      42.243097   \n",
       "\n",
       "                                   clean_description  \\\n",
       "0  Ada witch Sometimes you can see a misty blue f...   \n",
       "1  A little girl was killed suddenly while waitin...   \n",
       "2  If you take Gorman Rd west towards Sand Creek ...   \n",
       "3  In the 1970 one room room 211 in the old secti...   \n",
       "4  Kappa Delta Sorority The Kappa Delta Sorority ...   \n",
       "\n",
       "                                      clean_spelling Audio Evidence  \\\n",
       "0  Ada witch Sometimes you can see a misty blue f...            Yes   \n",
       "1  A little girl was killed suddenly while waitin...            Yes   \n",
       "2  If you take Gorman Rd west towards Sand Creek ...             No   \n",
       "3  In the 1970 one room room 211 in the old secti...             No   \n",
       "4  Kappa Delta Sorority The Kappa Delta Sorority ...            Yes   \n",
       "\n",
       "                                     Audio Reasoning time_of_day  \\\n",
       "0  The description includes reports of hearing th...        Dusk   \n",
       "1  The description includes instances of knocking...        Dusk   \n",
       "2  The description does not mention any specific ...     Evening   \n",
       "3  The description details various phenomena such...     Unknown   \n",
       "4  The description includes reports of giggling a...     Evening   \n",
       "\n",
       "   visual_evidence                                          reasoning  \n",
       "0            False  The description does not mention any existing ...  \n",
       "1            False  The description details various paranormal act...  \n",
       "2            False  The description does not mention any existing ...  \n",
       "3            False  The description details various paranormal phe...  \n",
       "4            False  The description does not mention any existing ...  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = df.join(df_visual_evidence[[\"visual_evidence\", \"reasoning\"]])\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "id": "hTcZSVw96Gh-"
   },
   "outputs": [],
   "source": [
    "df.rename(columns={'visual_evidence': 'Visual Evidence', 'reasoning': 'Visual Reasoning'}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 678
    },
    "id": "amCvPl3NI0DA",
    "outputId": "d8061351-c528-495f-d1fe-936b56be026c"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>city</th>\n",
       "      <th>country</th>\n",
       "      <th>description</th>\n",
       "      <th>location</th>\n",
       "      <th>state</th>\n",
       "      <th>state_abbrev</th>\n",
       "      <th>longitude</th>\n",
       "      <th>latitude</th>\n",
       "      <th>city_longitude</th>\n",
       "      <th>city_latitude</th>\n",
       "      <th>clean_description</th>\n",
       "      <th>clean_spelling</th>\n",
       "      <th>Audio Evidence</th>\n",
       "      <th>Audio Reasoning</th>\n",
       "      <th>time_of_day</th>\n",
       "      <th>Visual Evidence</th>\n",
       "      <th>Visual Reasoning</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Ada</td>\n",
       "      <td>United States</td>\n",
       "      <td>Ada witch - Sometimes you can see a misty blue...</td>\n",
       "      <td>Ada Cemetery</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-85.504893</td>\n",
       "      <td>42.962106</td>\n",
       "      <td>-85.495480</td>\n",
       "      <td>42.960727</td>\n",
       "      <td>Ada witch Sometimes you can see a misty blue f...</td>\n",
       "      <td>Ada witch Sometimes you can see a misty blue f...</td>\n",
       "      <td>Yes</td>\n",
       "      <td>The description includes reports of hearing th...</td>\n",
       "      <td>Dusk</td>\n",
       "      <td>False</td>\n",
       "      <td>The description does not mention any existing ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Addison</td>\n",
       "      <td>United States</td>\n",
       "      <td>A little girl was killed suddenly while waitin...</td>\n",
       "      <td>North Adams Rd.</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-84.381843</td>\n",
       "      <td>41.971425</td>\n",
       "      <td>-84.347168</td>\n",
       "      <td>41.986434</td>\n",
       "      <td>A little girl was killed suddenly while waitin...</td>\n",
       "      <td>A little girl was killed suddenly while waitin...</td>\n",
       "      <td>Yes</td>\n",
       "      <td>The description includes instances of knocking...</td>\n",
       "      <td>Dusk</td>\n",
       "      <td>False</td>\n",
       "      <td>The description details various paranormal act...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Adrian</td>\n",
       "      <td>United States</td>\n",
       "      <td>If you take Gorman Rd. west towards Sand Creek...</td>\n",
       "      <td>Ghost Trestle</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-84.035656</td>\n",
       "      <td>41.904538</td>\n",
       "      <td>-84.037166</td>\n",
       "      <td>41.897547</td>\n",
       "      <td>If you take Gorman Rd west towards Sand Creek ...</td>\n",
       "      <td>If you take Gorman Rd west towards Sand Creek ...</td>\n",
       "      <td>No</td>\n",
       "      <td>The description does not mention any specific ...</td>\n",
       "      <td>Evening</td>\n",
       "      <td>False</td>\n",
       "      <td>The description does not mention any existing ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Adrian</td>\n",
       "      <td>United States</td>\n",
       "      <td>In the 1970's, one room, room 211, in the old ...</td>\n",
       "      <td>Siena Heights University</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-84.017565</td>\n",
       "      <td>41.905712</td>\n",
       "      <td>-84.037166</td>\n",
       "      <td>41.897547</td>\n",
       "      <td>In the 1970 one room room 211 in the old secti...</td>\n",
       "      <td>In the 1970 one room room 211 in the old secti...</td>\n",
       "      <td>No</td>\n",
       "      <td>The description details various phenomena such...</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>False</td>\n",
       "      <td>The description details various paranormal phe...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Albion</td>\n",
       "      <td>United States</td>\n",
       "      <td>Kappa Delta Sorority - The Kappa Delta Sororit...</td>\n",
       "      <td>Albion College</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-84.745177</td>\n",
       "      <td>42.244006</td>\n",
       "      <td>-84.753030</td>\n",
       "      <td>42.243097</td>\n",
       "      <td>Kappa Delta Sorority The Kappa Delta Sorority ...</td>\n",
       "      <td>Kappa Delta Sorority The Kappa Delta Sorority ...</td>\n",
       "      <td>Yes</td>\n",
       "      <td>The description includes reports of giggling a...</td>\n",
       "      <td>Evening</td>\n",
       "      <td>False</td>\n",
       "      <td>The description does not mention any existing ...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      city        country                                        description  \\\n",
       "0      Ada  United States  Ada witch - Sometimes you can see a misty blue...   \n",
       "1  Addison  United States  A little girl was killed suddenly while waitin...   \n",
       "2   Adrian  United States  If you take Gorman Rd. west towards Sand Creek...   \n",
       "3   Adrian  United States  In the 1970's, one room, room 211, in the old ...   \n",
       "4   Albion  United States  Kappa Delta Sorority - The Kappa Delta Sororit...   \n",
       "\n",
       "                   location     state state_abbrev  longitude   latitude  \\\n",
       "0              Ada Cemetery  Michigan           MI -85.504893  42.962106   \n",
       "1           North Adams Rd.  Michigan           MI -84.381843  41.971425   \n",
       "2             Ghost Trestle  Michigan           MI -84.035656  41.904538   \n",
       "3  Siena Heights University  Michigan           MI -84.017565  41.905712   \n",
       "4            Albion College  Michigan           MI -84.745177  42.244006   \n",
       "\n",
       "   city_longitude  city_latitude  \\\n",
       "0      -85.495480      42.960727   \n",
       "1      -84.347168      41.986434   \n",
       "2      -84.037166      41.897547   \n",
       "3      -84.037166      41.897547   \n",
       "4      -84.753030      42.243097   \n",
       "\n",
       "                                   clean_description  \\\n",
       "0  Ada witch Sometimes you can see a misty blue f...   \n",
       "1  A little girl was killed suddenly while waitin...   \n",
       "2  If you take Gorman Rd west towards Sand Creek ...   \n",
       "3  In the 1970 one room room 211 in the old secti...   \n",
       "4  Kappa Delta Sorority The Kappa Delta Sorority ...   \n",
       "\n",
       "                                      clean_spelling Audio Evidence  \\\n",
       "0  Ada witch Sometimes you can see a misty blue f...            Yes   \n",
       "1  A little girl was killed suddenly while waitin...            Yes   \n",
       "2  If you take Gorman Rd west towards Sand Creek ...             No   \n",
       "3  In the 1970 one room room 211 in the old secti...             No   \n",
       "4  Kappa Delta Sorority The Kappa Delta Sorority ...            Yes   \n",
       "\n",
       "                                     Audio Reasoning time_of_day  \\\n",
       "0  The description includes reports of hearing th...        Dusk   \n",
       "1  The description includes instances of knocking...        Dusk   \n",
       "2  The description does not mention any specific ...     Evening   \n",
       "3  The description details various phenomena such...     Unknown   \n",
       "4  The description includes reports of giggling a...     Evening   \n",
       "\n",
       "   Visual Evidence                                   Visual Reasoning  \n",
       "0            False  The description does not mention any existing ...  \n",
       "1            False  The description details various paranormal act...  \n",
       "2            False  The description does not mention any existing ...  \n",
       "3            False  The description details various paranormal phe...  \n",
       "4            False  The description does not mention any existing ...  "
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "cst1OtpB7XKQ"
   },
   "source": [
    "## Witness Count\n",
    "Witness count parser + LLM extraction = ~30% 0's (As long as the scene was witness/seen by anyone, it should be counted; prior would exclude 1st person; included example as references, pattern box with REGEX)\n",
    "\n",
    "Hybrid approach: Pre-process with library/REGEX -->\n",
    "- Multiple and nuanced approach to testing/trial -> long delay in running operations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "jYuy0ApSpq5b"
   },
   "outputs": [],
   "source": [
    "import openai\n",
    "import pandas as pd\n",
    "from tqdm import tqdm\n",
    "import re\n",
    "from number_parser import parse\n",
    "\n",
    "# initialize OpenAI client\n",
    "client = openai.OpenAI(api_key=\"KEY-HERE\")\n",
    "\n",
    "# read in df\n",
    "df_witness = pd.read_csv(\"../data/df_with_img_feat.csv\", sep=\",\")\n",
    "\n",
    "# select a random sample for testing\n",
    "# df_sample = df.sample(n=50, random_state=24).copy()\n",
    "\n",
    "\n",
    "def extract_candidate_number(description):\n",
    "    \"\"\"\n",
    "    uses regex patterns along with number-parser to extract a candidate  for the witness count.\n",
    "    looks for the following phrases\n",
    "    \"\"\"\n",
    "    patterns = [\n",
    "        r\"I saw ([A-Za-z0-9\\-]+)\",\n",
    "        r\"I experienced ([A-Za-z0-9\\-]+)\",\n",
    "        r\"I witnessed ([A-Za-z0-9\\-]+)\",\n",
    "        r\"(\\w+)\\s+visitors\",\n",
    "        r\"(\\w+)\\s+onlookers\",\n",
    "        r\"(\\w+)\\s+people\",\n",
    "        r\"(\\w+)\\s+individuals\",\n",
    "        r\"(\\w+)\\s+witnesses\",\n",
    "        r\"(\\w+)\\s+bystanders\",\n",
    "        r\"(\\w+)\\s+spectators\",\n",
    "        r\"at least (\\w+)\",\n",
    "        r\"no less than (\\w+)\",\n",
    "        r\"around (\\w+)\",\n",
    "        r\"approximately (\\w+)\",\n",
    "        r\"witnessed by (\\w+)\"\n",
    "\n",
    "    ]\n",
    "    for pattern in patterns:\n",
    "        match = re.search(pattern, description, re.IGNORECASE)\n",
    "        if match:\n",
    "            candidate_str = match.group(1)\n",
    "            try:\n",
    "                # Try direct integer conversion first.\n",
    "                candidate_num = int(candidate_str)\n",
    "            except ValueError:\n",
    "                # If that fails, use number-parser to convert textual numbers.\n",
    "                candidate_num = parse(candidate_str)\n",
    "            if candidate_num is not None:\n",
    "                return str(candidate_num)\n",
    "    return \"0\"\n",
    "\n",
    "\n",
    "def refine_witness_count(description, candidate):\n",
    "    \"\"\"\n",
    "    uses the LLM to evaluate whether the candidate witness count is correct.\n",
    "    if not, the model should output the corrected witness count and justification.\n",
    "    \"\"\"\n",
    "    prompt = f\"\"\"\n",
    "    You are an expert in sentiment analysis and contextual reading. We have automatically extracted a candidate witness count of \"{candidate}\" from the following description:\n",
    "\n",
    "    {description}\n",
    "\n",
    "    Based on the context, tone, and details provided, please evaluate whether this candidate accurately represents the number of witnesses to the paranormal event. If it is correct, confirm it and explain your reasoning. If it is not correct, please provide the corrected witness count and justify your answer.\n",
    "\n",
    "    Please consider:\n",
    "    - If the narrator explicitly states their own experience (e.g., \"I saw\", \"I experienced\", or \"I witnessed\") and no other witnesses are mentioned, count the narrator as one witness.\n",
    "    - If the description clearly states or implies that multiple people witnessed the event, use that number.\n",
    "    - Ignore numbers that refer to unrelated details (e.g., \"5 bodies\" or \"3 floors\").\n",
    "    - If the description only provides a lower bound or a tentative figure (for example, using qualitative clues such as \"some\", \"a couple\", etc.), output the floor value and append a '+' sign (e.g., \"2+\") to indicate it may be higher.\n",
    "    - Default to 0 if, after a thorough analysis, there is an indication that nobody witnessed the event. Use fair judgement, but do not go overboard stretching the text to find a non-existent witnesses.\n",
    "    - If the event was witnessed or seen/experienced by someone, even if not specified by exactly who, they should count as a witness. ex.\n",
    "      The Richardi House (now known as The Grand Victorian Bed & Breakfast) is rumored to be haunted by Henri Richardi. Richardi built the house for his intended bride. When she left him for another man, he was heartbroken. Strange lights were seen in the cupola when the house was uninhabited (before being turned into a Bed & Breakfast). This should yield at least one person as it claims the lights were \"seen\" even if we dont know by who.\n",
    "    - Only provide numbers for count, do not give answers like. \"many\" or \"a lot\"\n",
    "\n",
    "    Format your answer exactly as follows:\n",
    "\n",
    "    **Correct Witness Count:** [number or number with a '+' if it's a floor estimate]\n",
    "    **Reasoning:** [A brief explanation of your evaluation and how you arrived at the number]\n",
    "    \"\"\"\n",
    "    try:\n",
    "        response = client.chat.completions.create(\n",
    "            model=\"gpt-4o-mini\",\n",
    "            messages=[{\"role\": \"user\", \"content\": prompt}],\n",
    "            max_tokens=100,\n",
    "            temperature=0.1\n",
    "        )\n",
    "        content = response.choices[0].message.content.strip()\n",
    "        # debugging output\n",
    "        print(\"Refinement RAW RESPONSE:\", content)\n",
    "\n",
    "        # extract the witness count and reasoning from the LLM's response.\n",
    "        witness_match = re.search(r\"\\*\\*Correct Witness Count:\\*\\*\\s*([A-Za-z0-9\\s\\+\\-]+)\", content, re.IGNORECASE)\n",
    "        reasoning_match = re.search(r\"\\*\\*Reasoning:\\*\\*\\s*(.*)\", content, re.DOTALL)\n",
    "        witness_count_raw = witness_match.group(1).strip() if witness_match else candidate\n",
    "        reasoning = reasoning_match.group(1).strip() if reasoning_match else \"Not Found\"\n",
    "\n",
    "        # process the extracted witness count:\n",
    "        if \"plus\" in witness_count_raw.lower() or '+' in witness_count_raw:\n",
    "            number_match = re.search(r\"(\\d+)\", witness_count_raw)\n",
    "            if number_match:\n",
    "                witness_count = number_match.group(1) + \"+\"\n",
    "            else:\n",
    "                witness_count = witness_count_raw\n",
    "        else:\n",
    "            try:\n",
    "                witness_count = str(int(witness_count_raw))\n",
    "            except ValueError:\n",
    "                witness_count = \"0\"\n",
    "\n",
    "        return pd.Series([witness_count, reasoning])\n",
    "    except Exception as e:\n",
    "        return pd.Series([f\"Error: {str(e)}\", \"\"])\n",
    "\n",
    "\n",
    "\n",
    "def process_witness_count(description):\n",
    "    candidate = extract_candidate_number(description)\n",
    "    return refine_witness_count(description, candidate)\n",
    "\n",
    "\n",
    "# apply function to sample\n",
    "tqdm.pandas()\n",
    "df[[\"Witness Count\", \"Witness Reasoning\"]] = df_witness[\"description\"].progress_apply(process_witness_count)\n",
    "\n",
    "# save\n",
    "df.to_csv(\"../data/haunted_places_with_witness_Final.csv\", index=False)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 678
    },
    "id": "OAyK3BeW6axY",
    "outputId": "262d48bf-4ac5-4677-d50a-c21b8f34d932"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>city</th>\n",
       "      <th>country</th>\n",
       "      <th>description</th>\n",
       "      <th>location</th>\n",
       "      <th>state</th>\n",
       "      <th>state_abbrev</th>\n",
       "      <th>longitude</th>\n",
       "      <th>latitude</th>\n",
       "      <th>city_longitude</th>\n",
       "      <th>city_latitude</th>\n",
       "      <th>Audio Evidence</th>\n",
       "      <th>Reasoning</th>\n",
       "      <th>Undergrad_Grad_Rate</th>\n",
       "      <th>HS_Grad_Rate</th>\n",
       "      <th>STEM_Grad_Percentage</th>\n",
       "      <th>Witness Count</th>\n",
       "      <th>Witness Reasoning</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Ada</td>\n",
       "      <td>United States</td>\n",
       "      <td>Ada witch - Sometimes you can see a misty blue...</td>\n",
       "      <td>Ada Cemetery</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-85.504893</td>\n",
       "      <td>42.962106</td>\n",
       "      <td>-85.495480</td>\n",
       "      <td>42.960727</td>\n",
       "      <td>Yes</td>\n",
       "      <td>The description includes reports of hearing th...</td>\n",
       "      <td>62.0%</td>\n",
       "      <td>84.1%</td>\n",
       "      <td>22.0%</td>\n",
       "      <td>3+</td>\n",
       "      <td>The description mentions \"Some people have rep...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Addison</td>\n",
       "      <td>United States</td>\n",
       "      <td>A little girl was killed suddenly while waitin...</td>\n",
       "      <td>North Adams Rd.</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-84.381843</td>\n",
       "      <td>41.971425</td>\n",
       "      <td>-84.347168</td>\n",
       "      <td>41.986434</td>\n",
       "      <td>Yes</td>\n",
       "      <td>The description includes instances of knocking...</td>\n",
       "      <td>62.0%</td>\n",
       "      <td>84.1%</td>\n",
       "      <td>22.0%</td>\n",
       "      <td>3+</td>\n",
       "      <td>The description mentions several instances of ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Adrian</td>\n",
       "      <td>United States</td>\n",
       "      <td>If you take Gorman Rd. west towards Sand Creek...</td>\n",
       "      <td>Ghost Trestle</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-84.035656</td>\n",
       "      <td>41.904538</td>\n",
       "      <td>-84.037166</td>\n",
       "      <td>41.897547</td>\n",
       "      <td>No</td>\n",
       "      <td>The description does not mention any specific ...</td>\n",
       "      <td>62.0%</td>\n",
       "      <td>84.1%</td>\n",
       "      <td>22.0%</td>\n",
       "      <td>2+</td>\n",
       "      <td>The narrative describes a tragic event where t...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Adrian</td>\n",
       "      <td>United States</td>\n",
       "      <td>In the 1970's, one room, room 211, in the old ...</td>\n",
       "      <td>Siena Heights University</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-84.017565</td>\n",
       "      <td>41.905712</td>\n",
       "      <td>-84.037166</td>\n",
       "      <td>41.897547</td>\n",
       "      <td>No</td>\n",
       "      <td>The description details various phenomena such...</td>\n",
       "      <td>62.0%</td>\n",
       "      <td>84.1%</td>\n",
       "      <td>22.0%</td>\n",
       "      <td>3+</td>\n",
       "      <td>The text mentions \"several witnesses\" during a...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Albion</td>\n",
       "      <td>United States</td>\n",
       "      <td>Kappa Delta Sorority - The Kappa Delta Sororit...</td>\n",
       "      <td>Albion College</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-84.745177</td>\n",
       "      <td>42.244006</td>\n",
       "      <td>-84.753030</td>\n",
       "      <td>42.243097</td>\n",
       "      <td>Yes</td>\n",
       "      <td>The description includes reports of giggling a...</td>\n",
       "      <td>62.0%</td>\n",
       "      <td>84.1%</td>\n",
       "      <td>22.0%</td>\n",
       "      <td>2+</td>\n",
       "      <td>The description mentions \"Current sisters ther...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      city        country                                        description  \\\n",
       "0      Ada  United States  Ada witch - Sometimes you can see a misty blue...   \n",
       "1  Addison  United States  A little girl was killed suddenly while waitin...   \n",
       "2   Adrian  United States  If you take Gorman Rd. west towards Sand Creek...   \n",
       "3   Adrian  United States  In the 1970's, one room, room 211, in the old ...   \n",
       "4   Albion  United States  Kappa Delta Sorority - The Kappa Delta Sororit...   \n",
       "\n",
       "                   location     state state_abbrev  longitude   latitude  \\\n",
       "0              Ada Cemetery  Michigan           MI -85.504893  42.962106   \n",
       "1           North Adams Rd.  Michigan           MI -84.381843  41.971425   \n",
       "2             Ghost Trestle  Michigan           MI -84.035656  41.904538   \n",
       "3  Siena Heights University  Michigan           MI -84.017565  41.905712   \n",
       "4            Albion College  Michigan           MI -84.745177  42.244006   \n",
       "\n",
       "   city_longitude  city_latitude Audio Evidence  \\\n",
       "0      -85.495480      42.960727            Yes   \n",
       "1      -84.347168      41.986434            Yes   \n",
       "2      -84.037166      41.897547             No   \n",
       "3      -84.037166      41.897547             No   \n",
       "4      -84.753030      42.243097            Yes   \n",
       "\n",
       "                                           Reasoning Undergrad_Grad_Rate  \\\n",
       "0  The description includes reports of hearing th...               62.0%   \n",
       "1  The description includes instances of knocking...               62.0%   \n",
       "2  The description does not mention any specific ...               62.0%   \n",
       "3  The description details various phenomena such...               62.0%   \n",
       "4  The description includes reports of giggling a...               62.0%   \n",
       "\n",
       "  HS_Grad_Rate STEM_Grad_Percentage Witness Count  \\\n",
       "0        84.1%                22.0%            3+   \n",
       "1        84.1%                22.0%            3+   \n",
       "2        84.1%                22.0%            2+   \n",
       "3        84.1%                22.0%            3+   \n",
       "4        84.1%                22.0%            2+   \n",
       "\n",
       "                                   Witness Reasoning  \n",
       "0  The description mentions \"Some people have rep...  \n",
       "1  The description mentions several instances of ...  \n",
       "2  The narrative describes a tragic event where t...  \n",
       "3  The text mentions \"several witnesses\" during a...  \n",
       "4  The description mentions \"Current sisters ther...  "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_witness = pd.read_csv(\"../data/haunted_places_with_witness_Final.csv\", sep=\",\")\n",
    "df_witness.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 678
    },
    "id": "EukS6T2T62Ys",
    "outputId": "6a8078af-e865-4acc-e854-bea404efbc2c"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>city</th>\n",
       "      <th>country</th>\n",
       "      <th>description</th>\n",
       "      <th>location</th>\n",
       "      <th>state</th>\n",
       "      <th>state_abbrev</th>\n",
       "      <th>longitude</th>\n",
       "      <th>latitude</th>\n",
       "      <th>city_longitude</th>\n",
       "      <th>city_latitude</th>\n",
       "      <th>clean_description</th>\n",
       "      <th>clean_spelling</th>\n",
       "      <th>Audio Evidence</th>\n",
       "      <th>Audio Reasoning</th>\n",
       "      <th>time_of_day</th>\n",
       "      <th>Visual Evidence</th>\n",
       "      <th>Visual Reasoning</th>\n",
       "      <th>Witness Count</th>\n",
       "      <th>Witness Reasoning</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Ada</td>\n",
       "      <td>United States</td>\n",
       "      <td>Ada witch - Sometimes you can see a misty blue...</td>\n",
       "      <td>Ada Cemetery</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-85.504893</td>\n",
       "      <td>42.962106</td>\n",
       "      <td>-85.495480</td>\n",
       "      <td>42.960727</td>\n",
       "      <td>Ada witch Sometimes you can see a misty blue f...</td>\n",
       "      <td>Ada witch Sometimes you can see a misty blue f...</td>\n",
       "      <td>Yes</td>\n",
       "      <td>The description includes reports of hearing th...</td>\n",
       "      <td>Dusk</td>\n",
       "      <td>False</td>\n",
       "      <td>The description does not mention any existing ...</td>\n",
       "      <td>3+</td>\n",
       "      <td>The description mentions \"Some people have rep...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Addison</td>\n",
       "      <td>United States</td>\n",
       "      <td>A little girl was killed suddenly while waitin...</td>\n",
       "      <td>North Adams Rd.</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-84.381843</td>\n",
       "      <td>41.971425</td>\n",
       "      <td>-84.347168</td>\n",
       "      <td>41.986434</td>\n",
       "      <td>A little girl was killed suddenly while waitin...</td>\n",
       "      <td>A little girl was killed suddenly while waitin...</td>\n",
       "      <td>Yes</td>\n",
       "      <td>The description includes instances of knocking...</td>\n",
       "      <td>Dusk</td>\n",
       "      <td>False</td>\n",
       "      <td>The description details various paranormal act...</td>\n",
       "      <td>3+</td>\n",
       "      <td>The description mentions several instances of ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Adrian</td>\n",
       "      <td>United States</td>\n",
       "      <td>If you take Gorman Rd. west towards Sand Creek...</td>\n",
       "      <td>Ghost Trestle</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-84.035656</td>\n",
       "      <td>41.904538</td>\n",
       "      <td>-84.037166</td>\n",
       "      <td>41.897547</td>\n",
       "      <td>If you take Gorman Rd west towards Sand Creek ...</td>\n",
       "      <td>If you take Gorman Rd west towards Sand Creek ...</td>\n",
       "      <td>No</td>\n",
       "      <td>The description does not mention any specific ...</td>\n",
       "      <td>Evening</td>\n",
       "      <td>False</td>\n",
       "      <td>The description does not mention any existing ...</td>\n",
       "      <td>2+</td>\n",
       "      <td>The narrative describes a tragic event where t...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Adrian</td>\n",
       "      <td>United States</td>\n",
       "      <td>In the 1970's, one room, room 211, in the old ...</td>\n",
       "      <td>Siena Heights University</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-84.017565</td>\n",
       "      <td>41.905712</td>\n",
       "      <td>-84.037166</td>\n",
       "      <td>41.897547</td>\n",
       "      <td>In the 1970 one room room 211 in the old secti...</td>\n",
       "      <td>In the 1970 one room room 211 in the old secti...</td>\n",
       "      <td>No</td>\n",
       "      <td>The description details various phenomena such...</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>False</td>\n",
       "      <td>The description details various paranormal phe...</td>\n",
       "      <td>3+</td>\n",
       "      <td>The text mentions \"several witnesses\" during a...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Albion</td>\n",
       "      <td>United States</td>\n",
       "      <td>Kappa Delta Sorority - The Kappa Delta Sororit...</td>\n",
       "      <td>Albion College</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-84.745177</td>\n",
       "      <td>42.244006</td>\n",
       "      <td>-84.753030</td>\n",
       "      <td>42.243097</td>\n",
       "      <td>Kappa Delta Sorority The Kappa Delta Sorority ...</td>\n",
       "      <td>Kappa Delta Sorority The Kappa Delta Sorority ...</td>\n",
       "      <td>Yes</td>\n",
       "      <td>The description includes reports of giggling a...</td>\n",
       "      <td>Evening</td>\n",
       "      <td>False</td>\n",
       "      <td>The description does not mention any existing ...</td>\n",
       "      <td>2+</td>\n",
       "      <td>The description mentions \"Current sisters ther...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      city        country                                        description  \\\n",
       "0      Ada  United States  Ada witch - Sometimes you can see a misty blue...   \n",
       "1  Addison  United States  A little girl was killed suddenly while waitin...   \n",
       "2   Adrian  United States  If you take Gorman Rd. west towards Sand Creek...   \n",
       "3   Adrian  United States  In the 1970's, one room, room 211, in the old ...   \n",
       "4   Albion  United States  Kappa Delta Sorority - The Kappa Delta Sororit...   \n",
       "\n",
       "                   location     state state_abbrev  longitude   latitude  \\\n",
       "0              Ada Cemetery  Michigan           MI -85.504893  42.962106   \n",
       "1           North Adams Rd.  Michigan           MI -84.381843  41.971425   \n",
       "2             Ghost Trestle  Michigan           MI -84.035656  41.904538   \n",
       "3  Siena Heights University  Michigan           MI -84.017565  41.905712   \n",
       "4            Albion College  Michigan           MI -84.745177  42.244006   \n",
       "\n",
       "   city_longitude  city_latitude  \\\n",
       "0      -85.495480      42.960727   \n",
       "1      -84.347168      41.986434   \n",
       "2      -84.037166      41.897547   \n",
       "3      -84.037166      41.897547   \n",
       "4      -84.753030      42.243097   \n",
       "\n",
       "                                   clean_description  \\\n",
       "0  Ada witch Sometimes you can see a misty blue f...   \n",
       "1  A little girl was killed suddenly while waitin...   \n",
       "2  If you take Gorman Rd west towards Sand Creek ...   \n",
       "3  In the 1970 one room room 211 in the old secti...   \n",
       "4  Kappa Delta Sorority The Kappa Delta Sorority ...   \n",
       "\n",
       "                                      clean_spelling Audio Evidence  \\\n",
       "0  Ada witch Sometimes you can see a misty blue f...            Yes   \n",
       "1  A little girl was killed suddenly while waitin...            Yes   \n",
       "2  If you take Gorman Rd west towards Sand Creek ...             No   \n",
       "3  In the 1970 one room room 211 in the old secti...             No   \n",
       "4  Kappa Delta Sorority The Kappa Delta Sorority ...            Yes   \n",
       "\n",
       "                                     Audio Reasoning time_of_day  \\\n",
       "0  The description includes reports of hearing th...        Dusk   \n",
       "1  The description includes instances of knocking...        Dusk   \n",
       "2  The description does not mention any specific ...     Evening   \n",
       "3  The description details various phenomena such...     Unknown   \n",
       "4  The description includes reports of giggling a...     Evening   \n",
       "\n",
       "   Visual Evidence                                   Visual Reasoning  \\\n",
       "0            False  The description does not mention any existing ...   \n",
       "1            False  The description details various paranormal act...   \n",
       "2            False  The description does not mention any existing ...   \n",
       "3            False  The description details various paranormal phe...   \n",
       "4            False  The description does not mention any existing ...   \n",
       "\n",
       "  Witness Count                                  Witness Reasoning  \n",
       "0            3+  The description mentions \"Some people have rep...  \n",
       "1            3+  The description mentions several instances of ...  \n",
       "2            2+  The narrative describes a tragic event where t...  \n",
       "3            3+  The text mentions \"several witnesses\" during a...  \n",
       "4            2+  The description mentions \"Current sisters ther...  "
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = df.join(df_witness[[\"Witness Count\", \"Witness Reasoning\"]])\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "TLqAM4r-B3md"
   },
   "source": [
    "# Featurization (Keyword Matching & Word Vectorization)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "S1_-o2Zr-gND"
   },
   "source": [
    "## Helper Tools\n",
    "Helper tool to look for a specific keyword within a dataframe column.\n",
    "Capitalization doesn't matter. Spelling and characters do matter."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "VxDNQ09J99Ad",
    "outputId": "ba1531c6-8b76-43c5-e546-1e9c10b1328e"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The word 'gost' was found 1 times in 1 rows.\n",
      "The word 'sprit' was found 5 times in 5 rows.\n",
      "The word 'aparition' was found 1 times in 1 rows.\n",
      "The word 'apperition' was found 1 times in 1 rows.\n",
      "The word 'poltergiest' was found 1 times in 1 rows.\n",
      "The word 'figer' was found 1 times in 1 rows.\n",
      "[{'Row Index': 858, 'Word': 'apperition', 'Count': 1, 'Text': 'in the back part of the park towards the football feild theres a stone type memorial detacated to a young man. There has been some weird sightings of an apperition of the young man by the woods, his neck is bent to the side posibly because of the injury that he got by falling from the steel jungle gym. thats how he died. The park officals have torn down jungle gym since other kids have been injured by falling from it.'}, {'Row Index': 2348, 'Word': 'sprit', 'Count': 1, 'Text': 'Somersville - Sarah Norton - Sarah Norton was a midwife who died on the way to deliver a baby when her carriage over turned and killed her. Sarah was not a religious woman and told her kids that she did not want a funeral. So when she died the town s people of Somersville wanted to give her a funeral. The first time they went to give her a funeral a fierce storm struck up and cause the towns people to delay the funeral till the next day, the next time they tried to give her a funeral another storm came out of no where and the live stock started charging thru town, at that point the towns people stopped trying to give her a funeral and just brought her to Rosehill Cemetery, From that day her sprit has been seen around Somersville and the other locations where the mining towns use to be know as The Black Diamond Mines in eastern Contra Costa County and other locations off of m arsh creek rd. Her ghost has been known to be called the White Witch.'}, {'Row Index': 2489, 'Word': 'sprit', 'Count': 1, 'Text': 'The Restaurant has been around since the time the town was founded in 1857. The story goes is that during the day a miner from the black diamond mine area of Somersville was in Clayton and got into a argument in the old Eagle Saloon across the street. The argument turned into a shoot out and one of the bullets went thru the window and stuck a little girl on the street. The people on the street brought the little girl in to the restaurant where she died. In a pool of blood on the floor. to this day her sprit can be seen from time to time playing in the street, and the Blood stain can not be removed from the floor of the restaurant. Everything they do to remove it does not work and the stain returns to this day it is still there under the carpet.'}, {'Row Index': 3313, 'Word': 'sprit', 'Count': 1, 'Text': 'The sprit of a nun has been seen walking around the 4th floor.- January 2007 Correction: There was a rumor that years ago this nun hung herself It is not true. She died of old age.'}, {'Row Index': 4347, 'Word': 'figer', 'Count': 1, 'Text': 'shadowy figures seen walking down darken halls in all four of the dorms figer have been know to attack female student in a sexual manner stranger unearthly smells have been experience in the Roseay Parkes dorm and the business tech class stranger creature have seen near the smell.'}, {'Row Index': 5062, 'Word': 'gost', 'Count': 1, 'Text': 'there have been reports from students that men with old greenarmy suits have been stading over them. Others say that they was strangled by gost while they were trying to sleep. You also feel like somone is watching you, doors close and open on thier own. Sometimes you can feel something touching your shoulder and nthing is there. Some people say that Genneral Breckinridge himself walks the hallways of the dormatorys'}, {'Row Index': 5511, 'Word': 'poltergiest', 'Count': 1, 'Text': \"poltergiest activity, her name is Lizzy she died in a fire a long time ago when the building was a privete home. at night you can see the lights go on and off room to room, and she knocks over objects when she's upset, the feeling of another presence when your alone in the building. things like that\"}, {'Row Index': 5802, 'Word': 'sprit', 'Count': 1, 'Text': 'Tower - Students are forbidden to go into the tower and in fact the top floor was padlocked and no one seemed to know where the key was. The tower was once used to house the school newspaper and yearbook offices. However, it is rumored that it is haunted by the sprit of a student whom jumped to their death from the top of the tower. General uneasiness, cold spots and apparitions have been rumored.'}, {'Row Index': 9100, 'Word': 'sprit', 'Count': 1, 'Text': \"is said to have a ghost that plays a violin in the dead of night. Some say its the sprit of one of the old maintenance man that worked there in the 20's & 30's.\"}, {'Row Index': 9127, 'Word': 'aparition', 'Count': 1, 'Text': \"This interior design store was once one of the oldest homes in Keller. It is alleged to be haunted by its original owners. A paranormal investigative group witnessed a whiskey bottle falling over by itself and dowsing rods being pulled from an investigator's hands. Reports include neighbors seeing an aparition appearing in a window of the building, a ball of orange light floating through the air, voices, strange noises, and odd smells.\"}]\n"
     ]
    }
   ],
   "source": [
    "def search_words_in_column(df, column, words: list):\n",
    "    results = []\n",
    "    total_counts = {word: 0 for word in words}\n",
    "    rows_found = {word: 0 for word in words}\n",
    "\n",
    "    for index, row in df.iterrows():\n",
    "        text = row[column].lower()\n",
    "\n",
    "        row_counts = {word: text.split().count(word.lower()) for word in words}  # Count each word\n",
    "\n",
    "        for word, count in row_counts.items():\n",
    "            if count > 0:\n",
    "                results.append({'Row Index': index, 'Word': word, 'Count': count, 'Text': row[column]})\n",
    "                total_counts[word] += count\n",
    "                rows_found[word] += 1\n",
    "\n",
    "    for word in words:\n",
    "        if total_counts[word] > 0:\n",
    "          print(f\"The word '{word}' was found {total_counts[word]} times in {rows_found[word]} rows.\")\n",
    "        else:\n",
    "          continue\n",
    "\n",
    "    return results\n",
    "\n",
    "potential_misspelled_words = [\n",
    "    \"gost\", \"ghots\", \"gohst\", \"ghst\",  # ghost\n",
    "    \"sprit\", \"spirrit\", \"spiret\", \"spirut\",  # spirit\n",
    "    \"appirition\", \"apparitian\", \"appariton\", \"aparition\", \"apperition\",  # apparition\n",
    "    \"shaddow\", \"shado\", \"schadow\", \"shawdow\",  # shadow\n",
    "    \"fantom\", \"phantum\", \"phantam\", \"phentom\",  # phantom\n",
    "    \"poltergiest\", \"poltergeest\", \"poltergyst\", \"poltergiast\",  # poltergeist\n",
    "    \"deamon\", \"deman\", \"daimon\", \"demonn\",  # demon\n",
    "    \"spectre\", \"spectar\", \"spectir\", \"spekter\",  # specter\n",
    "    \"orbe\", \"orbb\", \"obre\",  # orb\n",
    "    \"figer\", \"figyre\", \"figgur\", \"figuire\",  # figure\n",
    "    \"entiti\", \"entety\", \"entitty\", \"entety\",  # entity\n",
    "    \"miste\", \"misst\", \"mistt\",  # mist\n",
    "    \"presense\", \"presance\", \"pressence\", \"prescence\",  # presence\n",
    "    \"wich\", \"whitch\", \"wytch\", \"witsh\",  # witch\n",
    "    \"vamire\", \"vampyre\", \"vampeer\", \"vampir\",  # vampire\n",
    "    \"warlok\", \"warloc\", \"worlock\", \"wurlock\",  # warlock\n",
    "    \"werewulf\", \"wearwolf\", \"werwolf\", \"werwolv\",  # werewolf\n",
    "    \"trol\", \"trole\", \"trall\", \"trowl\",  # troll\n",
    "    \"impa\", \"ipm\", \"impy\", \"impz\"  # imp\n",
    "]\n",
    "\n",
    "print(search_words_in_column(df, 'description', potential_misspelled_words))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "id": "VUOVbnSL912-"
   },
   "outputs": [],
   "source": [
    "def download_csv(df, file_output_name):\n",
    "  df.to_csv(file_output_name, index=False)\n",
    "  print(f'Downloaded {file_output_name}')\n",
    "\n",
    "#Test call\n",
    "#download_csv(df, 'test2_haunted_file.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "WkbI8cEZUMX-"
   },
   "source": [
    "## Tokenization"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "TRpJZQ7x0dEu"
   },
   "source": [
    "This takes the cleaned descriptions and splits up the description into tokenization to prepare it for single keyword matching approach."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "id": "BIMkGFKHwsEy"
   },
   "outputs": [],
   "source": [
    "def tokenize_and_filter(text):\n",
    "    # Tokenize\n",
    "    tokens = word_tokenize(text)\n",
    "    # Remove any token that contains a digit\n",
    "    tokens = [t for t in tokens if t.isalpha()]\n",
    "    return tokens\n",
    "\n",
    "df['tokenized'] = df['clean_spelling'].apply(tokenize_and_filter)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "7dWzo2zqyq1D"
   },
   "source": [
    "## Part of Speech Tagging\n",
    "This model looks at the tokenized description and predicts what part of speech it likely is. The intent is to be able to later extract adjectives that describe apparition_types and to get the syntactic function of tokenized words in relation to the sentence."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "jOA1rp5Gyp4X",
    "outputId": "3f1e7723-3018-422a-b0d5-5d2636c7367b"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package averaged_perceptron_tagger_eng to\n",
      "[nltk_data]     /Users/andrewturangan/nltk_data...\n",
      "[nltk_data]   Package averaged_perceptron_tagger_eng is already up-to-\n",
      "[nltk_data]       date!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0        [(Ada, NNP), (witch, NN), (Sometimes, RB), (yo...\n",
      "1        [(A, DT), (little, JJ), (girl, NN), (was, VBD)...\n",
      "2        [(If, IN), (you, PRP), (take, VBP), (Gorman, N...\n",
      "3        [(In, IN), (the, DT), (one, CD), (room, NN), (...\n",
      "4        [(Kappa, NNP), (Delta, NNP), (Sorority, NNP), ...\n",
      "                               ...                        \n",
      "10987    [(at, IN), (midnight, NN), (you, PRP), (can, M...\n",
      "10988    [(Is, VBZ), (haunted, VBN), (by, IN), (the, DT...\n",
      "10989    [(The, DT), (institution, NN), (was, VBD), (fo...\n",
      "10990    [(Gymnasium, NNP), (their, PRP$), (have, VBP),...\n",
      "10991    [(Cadets, NNS), (from, IN), (the, DT), (Air, N...\n",
      "Name: pos_tokenized, Length: 10992, dtype: object\n"
     ]
    }
   ],
   "source": [
    "from nltk import pos_tag\n",
    "nltk.download('averaged_perceptron_tagger_eng')\n",
    "\n",
    "df['pos_tokenized'] = df['tokenized'].apply(pos_tag)\n",
    "print(df['pos_tokenized'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "f3bw05IS5Bnv",
    "outputId": "f43e7d93-9a50-4b54-9277-33dce2bf7cff"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "POS Tags for Row 354: North: NNP, Oakland: NNP, Medical: NNP, Center: NNP, used: VBD, to: TO, be: VB, called: VBN, Pontiac: NNP, General: NNP, Hospital: NNP, Apparition: NNP, of: IN, an: DT, elderly: JJ, white: JJ, lady: NN, dressed: VBN, in: IN, a: DT, patient: NN, gown: NN, seen: VBN, on: IN, the: DT, floor: NN, seen: VBN, by: IN, myself: PRP, and: CC, at: IN, least: JJS, one: CD, other: JJ, employee: NN, Also: RB, televisions: VBZ, turning: VBG, on: IN, by: IN, themselves: PRP, TV: NN, volumes: NNS, being: VBG, turned: VBD, up: RP, Cold: JJ, spots: NNS, and: CC, breezes: NNS, overhead: VBP, cupboard: JJ, doors: NNS, slamming: VBG, shut: NN, in: IN, the: DT, kitchen: NN, while: IN, only: RB, one: CD, person: NN, was: VBD, in: IN, the: DT, room: NN, Other: JJ, instances: NNS, such: JJ, as: IN, being: VBG, touched: VBD, an: DT, employee: NN, hearing: VBG, a: DT, voice: NN, with: IN, no: DT, one: NN, else: RB, in: IN, the: DT, room: NN, and: CC, rumors: NNS, of: IN, a: DT, sensitive: JJ, saying: VBG, there: EX, were: VBD, many: JJ, spirits: NNS, all: DT, over: IN, the: DT, building: NN\n"
     ]
    }
   ],
   "source": [
    "def check_pos_tags_for_row(df, row_index):\n",
    "    try:\n",
    "        # Get the tokenized and POS-tagged tokens for the specific row\n",
    "        pos_tags = df.iloc[row_index-2]['pos_tokenized']\n",
    "        # Create a single line string of the word-POS tag pairs\n",
    "        pos_tags_line = ', '.join([f\"{word}: {tag}\" for word, tag in pos_tags])\n",
    "        print(f\"POS Tags for Row {row_index}: {pos_tags_line}\")\n",
    "    except KeyError:\n",
    "        print(\"The column 'tokenized_pos' does not exist.\")\n",
    "    except IndexError:\n",
    "        print(f\"Row index {row_index} is out of range.\")\n",
    "\n",
    "# Example usage:\n",
    "check_pos_tags_for_row(df, 354)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "pIUumUnuw_n1",
    "outputId": "63f2d594-2ccc-4c79-8700-82b4355a51f5"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package averaged_perceptron_tagger_eng to\n",
      "[nltk_data]     /Users/andrewturangan/nltk_data...\n",
      "[nltk_data]   Package averaged_perceptron_tagger_eng is already up-to-\n",
      "[nltk_data]       date!\n"
     ]
    }
   ],
   "source": [
    "#Proper Noun removal. Needed later for Word Embedding\n",
    "from nltk import pos_tag\n",
    "nltk.download('averaged_perceptron_tagger_eng')\n",
    "\n",
    "def remove_proper_nouns(tokens):\n",
    "    tagged = pos_tag(tokens)  # [('Josh', 'NNP'), ('spirit', 'NN'), ...]\n",
    "    filtered = [word.lower() for word, tag in tagged if tag not in ['NNP', 'NNPS']]\n",
    "    return filtered\n",
    "\n",
    "df['filtered_tokenized'] = df['tokenized'].apply(remove_proper_nouns)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "3ExbMqt2ywdd"
   },
   "source": [
    "## Lemmatization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 643
    },
    "id": "bInWgAQMw6Jq",
    "outputId": "7608387c-c7ec-4760-89c4-319972fd9d98"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package wordnet to\n",
      "[nltk_data]     /Users/andrewturangan/nltk_data...\n",
      "[nltk_data]   Package wordnet is already up-to-date!\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>clean_spelling</th>\n",
       "      <th>tokenized</th>\n",
       "      <th>filtered_tokenized</th>\n",
       "      <th>lemma_filtered_tokenized</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Ada witch Sometimes you can see a misty blue f...</td>\n",
       "      <td>[Ada, witch, Sometimes, you, can, see, a, mist...</td>\n",
       "      <td>[witch, sometimes, you, can, see, a, misty, bl...</td>\n",
       "      <td>[witch, sometimes, you, can, see, a, misty, bl...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>A little girl was killed suddenly while waitin...</td>\n",
       "      <td>[A, little, girl, was, killed, suddenly, while...</td>\n",
       "      <td>[a, little, girl, was, killed, suddenly, while...</td>\n",
       "      <td>[a, little, girl, wa, killed, suddenly, while,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>If you take Gorman Rd west towards Sand Creek ...</td>\n",
       "      <td>[If, you, take, Gorman, Rd, west, towards, San...</td>\n",
       "      <td>[if, you, take, west, towards, you, will, come...</td>\n",
       "      <td>[if, you, take, west, towards, you, will, come...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>In the 1970 one room room 211 in the old secti...</td>\n",
       "      <td>[In, the, one, room, room, in, the, old, secti...</td>\n",
       "      <td>[in, the, one, room, room, in, the, old, secti...</td>\n",
       "      <td>[in, the, one, room, room, in, the, old, secti...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Kappa Delta Sorority The Kappa Delta Sorority ...</td>\n",
       "      <td>[Kappa, Delta, Sorority, The, Kappa, Delta, So...</td>\n",
       "      <td>[the, is, haunted, by, an, entity, simply, kno...</td>\n",
       "      <td>[the, is, haunted, by, an, entity, simply, kno...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                      clean_spelling  \\\n",
       "0  Ada witch Sometimes you can see a misty blue f...   \n",
       "1  A little girl was killed suddenly while waitin...   \n",
       "2  If you take Gorman Rd west towards Sand Creek ...   \n",
       "3  In the 1970 one room room 211 in the old secti...   \n",
       "4  Kappa Delta Sorority The Kappa Delta Sorority ...   \n",
       "\n",
       "                                           tokenized  \\\n",
       "0  [Ada, witch, Sometimes, you, can, see, a, mist...   \n",
       "1  [A, little, girl, was, killed, suddenly, while...   \n",
       "2  [If, you, take, Gorman, Rd, west, towards, San...   \n",
       "3  [In, the, one, room, room, in, the, old, secti...   \n",
       "4  [Kappa, Delta, Sorority, The, Kappa, Delta, So...   \n",
       "\n",
       "                                  filtered_tokenized  \\\n",
       "0  [witch, sometimes, you, can, see, a, misty, bl...   \n",
       "1  [a, little, girl, was, killed, suddenly, while...   \n",
       "2  [if, you, take, west, towards, you, will, come...   \n",
       "3  [in, the, one, room, room, in, the, old, secti...   \n",
       "4  [the, is, haunted, by, an, entity, simply, kno...   \n",
       "\n",
       "                            lemma_filtered_tokenized  \n",
       "0  [witch, sometimes, you, can, see, a, misty, bl...  \n",
       "1  [a, little, girl, wa, killed, suddenly, while,...  \n",
       "2  [if, you, take, west, towards, you, will, come...  \n",
       "3  [in, the, one, room, room, in, the, old, secti...  \n",
       "4  [the, is, haunted, by, an, entity, simply, kno...  "
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from nltk.stem import WordNetLemmatizer\n",
    "nltk.download('wordnet')\n",
    "\n",
    "lemmatizer = WordNetLemmatizer()\n",
    "\n",
    "def lemmatize_tokens(tokens):\n",
    "    return [lemmatizer.lemmatize(token) for token in tokens]\n",
    "\n",
    "df['lemma_filtered_tokenized'] = df['filtered_tokenized'].apply(lemmatize_tokens)\n",
    "\n",
    "# Download results\n",
    "#df.to_csv('token_lemma_haunted_places.csv', index=False)\n",
    "#print('Downloaded token_lemma_haunted_places.csv')\n",
    "\n",
    "df.filter(items=[\"clean_spelling\", \"tokenized\", \"filtered_tokenized\", \"lemma_filtered_tokenized\"]).head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 501
    },
    "id": "hes1rpsE5f5c",
    "outputId": "7ee611c0-8d8a-45bb-a34e-82c5cebe4263"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>clean_spelling</th>\n",
       "      <th>tokenized</th>\n",
       "      <th>pos_tokenized</th>\n",
       "      <th>lemma_pos_tokenized</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Ada witch Sometimes you can see a misty blue f...</td>\n",
       "      <td>[Ada, witch, Sometimes, you, can, see, a, mist...</td>\n",
       "      <td>[(Ada, NNP), (witch, NN), (Sometimes, RB), (yo...</td>\n",
       "      <td>[ada, witch, sometimes, you, can, see, a, mist...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>A little girl was killed suddenly while waitin...</td>\n",
       "      <td>[A, little, girl, was, killed, suddenly, while...</td>\n",
       "      <td>[(A, DT), (little, JJ), (girl, NN), (was, VBD)...</td>\n",
       "      <td>[a, little, girl, be, kill, suddenly, while, w...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>If you take Gorman Rd west towards Sand Creek ...</td>\n",
       "      <td>[If, you, take, Gorman, Rd, west, towards, San...</td>\n",
       "      <td>[(If, IN), (you, PRP), (take, VBP), (Gorman, N...</td>\n",
       "      <td>[if, you, take, gorman, rd, west, towards, san...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>In the 1970 one room room 211 in the old secti...</td>\n",
       "      <td>[In, the, one, room, room, in, the, old, secti...</td>\n",
       "      <td>[(In, IN), (the, DT), (one, CD), (room, NN), (...</td>\n",
       "      <td>[in, the, one, room, room, in, the, old, secti...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Kappa Delta Sorority The Kappa Delta Sorority ...</td>\n",
       "      <td>[Kappa, Delta, Sorority, The, Kappa, Delta, So...</td>\n",
       "      <td>[(Kappa, NNP), (Delta, NNP), (Sorority, NNP), ...</td>\n",
       "      <td>[kappa, delta, sorority, the, kappa, delta, so...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                      clean_spelling  \\\n",
       "0  Ada witch Sometimes you can see a misty blue f...   \n",
       "1  A little girl was killed suddenly while waitin...   \n",
       "2  If you take Gorman Rd west towards Sand Creek ...   \n",
       "3  In the 1970 one room room 211 in the old secti...   \n",
       "4  Kappa Delta Sorority The Kappa Delta Sorority ...   \n",
       "\n",
       "                                           tokenized  \\\n",
       "0  [Ada, witch, Sometimes, you, can, see, a, mist...   \n",
       "1  [A, little, girl, was, killed, suddenly, while...   \n",
       "2  [If, you, take, Gorman, Rd, west, towards, San...   \n",
       "3  [In, the, one, room, room, in, the, old, secti...   \n",
       "4  [Kappa, Delta, Sorority, The, Kappa, Delta, So...   \n",
       "\n",
       "                                       pos_tokenized  \\\n",
       "0  [(Ada, NNP), (witch, NN), (Sometimes, RB), (yo...   \n",
       "1  [(A, DT), (little, JJ), (girl, NN), (was, VBD)...   \n",
       "2  [(If, IN), (you, PRP), (take, VBP), (Gorman, N...   \n",
       "3  [(In, IN), (the, DT), (one, CD), (room, NN), (...   \n",
       "4  [(Kappa, NNP), (Delta, NNP), (Sorority, NNP), ...   \n",
       "\n",
       "                                 lemma_pos_tokenized  \n",
       "0  [ada, witch, sometimes, you, can, see, a, mist...  \n",
       "1  [a, little, girl, be, kill, suddenly, while, w...  \n",
       "2  [if, you, take, gorman, rd, west, towards, san...  \n",
       "3  [in, the, one, room, room, in, the, old, secti...  \n",
       "4  [kappa, delta, sorority, the, kappa, delta, so...  "
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from nltk.stem import WordNetLemmatizer\n",
    "from nltk.corpus import wordnet\n",
    "\n",
    "def get_wordnet_pos(tag):\n",
    "    if tag.startswith('J'):\n",
    "        return wordnet.ADJ  # Adjective\n",
    "    elif tag.startswith('V'):\n",
    "        return wordnet.VERB  # Verb\n",
    "    elif tag.startswith('N'):\n",
    "        return wordnet.NOUN  # Noun\n",
    "    elif tag.startswith('R'):\n",
    "        return wordnet.ADV  # Adverb\n",
    "    else:\n",
    "        return wordnet.NOUN  # Default to noun\n",
    "\n",
    "\n",
    "lemmatizer = WordNetLemmatizer()\n",
    "\n",
    "def lemmatize_tokens_pos(tokens_pos):\n",
    "    return [lemmatizer.lemmatize(word.lower(), get_wordnet_pos(tag)) for word, tag in tokens_pos]\n",
    "\n",
    "df['lemma_pos_tokenized'] = df['pos_tokenized'].apply(lemmatize_tokens_pos)\n",
    "\n",
    "df.filter(items=[\"clean_spelling\", \"tokenized\", \"pos_tokenized\", \"lemma_pos_tokenized\"]).head()\n",
    "\n",
    "#Download results\n",
    "# df.to_csv('token_lemma_haunted_places.csv', index=False)\n",
    "# print('Downloaded token_lemma_haunted_places.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "vCOi6VQb7be6",
    "outputId": "af88313f-700c-4fcf-871f-296ccb08a4f7"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['city', 'country', 'description', 'location', 'state', 'state_abbrev',\n",
      "       'longitude', 'latitude', 'city_longitude', 'city_latitude',\n",
      "       'clean_description', 'clean_spelling', 'Audio Evidence',\n",
      "       'Audio Reasoning', 'time_of_day', 'Visual Evidence', 'Visual Reasoning',\n",
      "       'Witness Count', 'Witness Reasoning', 'tokenized', 'pos_tokenized',\n",
      "       'filtered_tokenized', 'lemma_filtered_tokenized',\n",
      "       'lemma_pos_tokenized'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "#Expected to have a main df with the cleaned columns, LLM features, and token/POS/Lemma\n",
    "print(df.columns)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "YaWndzq-U4gh"
   },
   "source": [
    "## Match and Extract Keyword"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "id": "adhVDuJyyFdG"
   },
   "outputs": [],
   "source": [
    "def extract_keywords(text, keywords):\n",
    "    \"\"\"Extract keywords from the text.\"\"\"\n",
    "    text = text.lower()  # Convert to lowercase\n",
    "    keywords = [str(word) for word in keywords if pd.notna(word)]\n",
    "    matches = [word for word in keywords if re.search(r'\\b' + word + r'(s)?\\b', text)]\n",
    "    return matches"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "4YwQaMAF-drb"
   },
   "source": [
    "## Keyword Bank File Download"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "id": "uufw_DE9Bj2B"
   },
   "outputs": [],
   "source": [
    "#Reading the Keyword bank\n",
    "keyword_bank_df = pd.read_csv('../data/keywords_dictionary.csv', encoding = 'latin1')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "9-5O-MvjelTC"
   },
   "source": [
    "## Event Type"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "5tNRv6iGJtAl"
   },
   "source": [
    "### Get Data\n",
    "1. Haunted Places Dataframe ← haunted_df\n",
    "2. Keywords Dataframe and List of Event Types ← kw_df, events"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "id": "BzhPAg8g8x6Q"
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import re"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "id": "1VYFHA4O83VV"
   },
   "outputs": [],
   "source": [
    "events = [\"Suicide\", \"Murder\", \"Natural Disaster\", \"Death\", \"Supernatural\"]\n",
    "target_cols = [f\"Event: {x}\" for x in events]\n",
    "\n",
    "haunted_df = df.copy()\n",
    "kw_df = keyword_bank_df[target_cols]\n",
    "kw_df = kw_df.rename(columns=lambda x: x.replace('Event: ', ''))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 206
    },
    "id": "_NU5gWkN-t_F",
    "outputId": "89ffe9f9-bfe1-4ef5-97d5-7c44ce8fcbb9"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Suicide</th>\n",
       "      <th>Murder</th>\n",
       "      <th>Natural Disaster</th>\n",
       "      <th>Death</th>\n",
       "      <th>Supernatural</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>killed himself</td>\n",
       "      <td>murder</td>\n",
       "      <td>earthquake</td>\n",
       "      <td>death</td>\n",
       "      <td>ghost</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>killed herself</td>\n",
       "      <td>homnicide</td>\n",
       "      <td>tremor</td>\n",
       "      <td>deceased</td>\n",
       "      <td>figure</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>killed themsel</td>\n",
       "      <td>kill</td>\n",
       "      <td>aftershock</td>\n",
       "      <td>passed away</td>\n",
       "      <td>phantom</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>suicide</td>\n",
       "      <td>slay</td>\n",
       "      <td>seismic activity</td>\n",
       "      <td>died</td>\n",
       "      <td>haunt</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>self-harm</td>\n",
       "      <td>assassin</td>\n",
       "      <td>fault line</td>\n",
       "      <td>body discovered</td>\n",
       "      <td>moving</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Suicide     Murder    Natural Disaster              Death  \\\n",
       "0  killed himself     murder        earthquake              death     \n",
       "1  killed herself  homnicide            tremor           deceased     \n",
       "2  killed themsel       kill        aftershock        passed away     \n",
       "3       suicide         slay  seismic activity               died     \n",
       "4     self-harm     assassin        fault line    body discovered     \n",
       "\n",
       "  Supernatural  \n",
       "0        ghost  \n",
       "1       figure  \n",
       "2      phantom  \n",
       "3        haunt  \n",
       "4       moving  "
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "kw_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 707
    },
    "id": "GI6uvDvsTp0h",
    "outputId": "11614a4f-475c-4fc4-d4ef-b2b544c2b0d8"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>city</th>\n",
       "      <th>country</th>\n",
       "      <th>description</th>\n",
       "      <th>location</th>\n",
       "      <th>state</th>\n",
       "      <th>state_abbrev</th>\n",
       "      <th>longitude</th>\n",
       "      <th>latitude</th>\n",
       "      <th>city_longitude</th>\n",
       "      <th>city_latitude</th>\n",
       "      <th>...</th>\n",
       "      <th>time_of_day</th>\n",
       "      <th>Visual Evidence</th>\n",
       "      <th>Visual Reasoning</th>\n",
       "      <th>Witness Count</th>\n",
       "      <th>Witness Reasoning</th>\n",
       "      <th>tokenized</th>\n",
       "      <th>pos_tokenized</th>\n",
       "      <th>filtered_tokenized</th>\n",
       "      <th>lemma_filtered_tokenized</th>\n",
       "      <th>lemma_pos_tokenized</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Ada</td>\n",
       "      <td>United States</td>\n",
       "      <td>Ada witch - Sometimes you can see a misty blue...</td>\n",
       "      <td>Ada Cemetery</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-85.504893</td>\n",
       "      <td>42.962106</td>\n",
       "      <td>-85.495480</td>\n",
       "      <td>42.960727</td>\n",
       "      <td>...</td>\n",
       "      <td>Dusk</td>\n",
       "      <td>False</td>\n",
       "      <td>The description does not mention any existing ...</td>\n",
       "      <td>3+</td>\n",
       "      <td>The description mentions \"Some people have rep...</td>\n",
       "      <td>[Ada, witch, Sometimes, you, can, see, a, mist...</td>\n",
       "      <td>[(Ada, NNP), (witch, NN), (Sometimes, RB), (yo...</td>\n",
       "      <td>[witch, sometimes, you, can, see, a, misty, bl...</td>\n",
       "      <td>[witch, sometimes, you, can, see, a, misty, bl...</td>\n",
       "      <td>[ada, witch, sometimes, you, can, see, a, mist...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Addison</td>\n",
       "      <td>United States</td>\n",
       "      <td>A little girl was killed suddenly while waitin...</td>\n",
       "      <td>North Adams Rd.</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-84.381843</td>\n",
       "      <td>41.971425</td>\n",
       "      <td>-84.347168</td>\n",
       "      <td>41.986434</td>\n",
       "      <td>...</td>\n",
       "      <td>Dusk</td>\n",
       "      <td>False</td>\n",
       "      <td>The description details various paranormal act...</td>\n",
       "      <td>3+</td>\n",
       "      <td>The description mentions several instances of ...</td>\n",
       "      <td>[A, little, girl, was, killed, suddenly, while...</td>\n",
       "      <td>[(A, DT), (little, JJ), (girl, NN), (was, VBD)...</td>\n",
       "      <td>[a, little, girl, was, killed, suddenly, while...</td>\n",
       "      <td>[a, little, girl, wa, killed, suddenly, while,...</td>\n",
       "      <td>[a, little, girl, be, kill, suddenly, while, w...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Adrian</td>\n",
       "      <td>United States</td>\n",
       "      <td>If you take Gorman Rd. west towards Sand Creek...</td>\n",
       "      <td>Ghost Trestle</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-84.035656</td>\n",
       "      <td>41.904538</td>\n",
       "      <td>-84.037166</td>\n",
       "      <td>41.897547</td>\n",
       "      <td>...</td>\n",
       "      <td>Evening</td>\n",
       "      <td>False</td>\n",
       "      <td>The description does not mention any existing ...</td>\n",
       "      <td>2+</td>\n",
       "      <td>The narrative describes a tragic event where t...</td>\n",
       "      <td>[If, you, take, Gorman, Rd, west, towards, San...</td>\n",
       "      <td>[(If, IN), (you, PRP), (take, VBP), (Gorman, N...</td>\n",
       "      <td>[if, you, take, west, towards, you, will, come...</td>\n",
       "      <td>[if, you, take, west, towards, you, will, come...</td>\n",
       "      <td>[if, you, take, gorman, rd, west, towards, san...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Adrian</td>\n",
       "      <td>United States</td>\n",
       "      <td>In the 1970's, one room, room 211, in the old ...</td>\n",
       "      <td>Siena Heights University</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-84.017565</td>\n",
       "      <td>41.905712</td>\n",
       "      <td>-84.037166</td>\n",
       "      <td>41.897547</td>\n",
       "      <td>...</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>False</td>\n",
       "      <td>The description details various paranormal phe...</td>\n",
       "      <td>3+</td>\n",
       "      <td>The text mentions \"several witnesses\" during a...</td>\n",
       "      <td>[In, the, one, room, room, in, the, old, secti...</td>\n",
       "      <td>[(In, IN), (the, DT), (one, CD), (room, NN), (...</td>\n",
       "      <td>[in, the, one, room, room, in, the, old, secti...</td>\n",
       "      <td>[in, the, one, room, room, in, the, old, secti...</td>\n",
       "      <td>[in, the, one, room, room, in, the, old, secti...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Albion</td>\n",
       "      <td>United States</td>\n",
       "      <td>Kappa Delta Sorority - The Kappa Delta Sororit...</td>\n",
       "      <td>Albion College</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-84.745177</td>\n",
       "      <td>42.244006</td>\n",
       "      <td>-84.753030</td>\n",
       "      <td>42.243097</td>\n",
       "      <td>...</td>\n",
       "      <td>Evening</td>\n",
       "      <td>False</td>\n",
       "      <td>The description does not mention any existing ...</td>\n",
       "      <td>2+</td>\n",
       "      <td>The description mentions \"Current sisters ther...</td>\n",
       "      <td>[Kappa, Delta, Sorority, The, Kappa, Delta, So...</td>\n",
       "      <td>[(Kappa, NNP), (Delta, NNP), (Sorority, NNP), ...</td>\n",
       "      <td>[the, is, haunted, by, an, entity, simply, kno...</td>\n",
       "      <td>[the, is, haunted, by, an, entity, simply, kno...</td>\n",
       "      <td>[kappa, delta, sorority, the, kappa, delta, so...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      city        country                                        description  \\\n",
       "0      Ada  United States  Ada witch - Sometimes you can see a misty blue...   \n",
       "1  Addison  United States  A little girl was killed suddenly while waitin...   \n",
       "2   Adrian  United States  If you take Gorman Rd. west towards Sand Creek...   \n",
       "3   Adrian  United States  In the 1970's, one room, room 211, in the old ...   \n",
       "4   Albion  United States  Kappa Delta Sorority - The Kappa Delta Sororit...   \n",
       "\n",
       "                   location     state state_abbrev  longitude   latitude  \\\n",
       "0              Ada Cemetery  Michigan           MI -85.504893  42.962106   \n",
       "1           North Adams Rd.  Michigan           MI -84.381843  41.971425   \n",
       "2             Ghost Trestle  Michigan           MI -84.035656  41.904538   \n",
       "3  Siena Heights University  Michigan           MI -84.017565  41.905712   \n",
       "4            Albion College  Michigan           MI -84.745177  42.244006   \n",
       "\n",
       "   city_longitude  city_latitude  ... time_of_day Visual Evidence  \\\n",
       "0      -85.495480      42.960727  ...        Dusk           False   \n",
       "1      -84.347168      41.986434  ...        Dusk           False   \n",
       "2      -84.037166      41.897547  ...     Evening           False   \n",
       "3      -84.037166      41.897547  ...     Unknown           False   \n",
       "4      -84.753030      42.243097  ...     Evening           False   \n",
       "\n",
       "                                    Visual Reasoning Witness Count  \\\n",
       "0  The description does not mention any existing ...            3+   \n",
       "1  The description details various paranormal act...            3+   \n",
       "2  The description does not mention any existing ...            2+   \n",
       "3  The description details various paranormal phe...            3+   \n",
       "4  The description does not mention any existing ...            2+   \n",
       "\n",
       "                                   Witness Reasoning  \\\n",
       "0  The description mentions \"Some people have rep...   \n",
       "1  The description mentions several instances of ...   \n",
       "2  The narrative describes a tragic event where t...   \n",
       "3  The text mentions \"several witnesses\" during a...   \n",
       "4  The description mentions \"Current sisters ther...   \n",
       "\n",
       "                                           tokenized  \\\n",
       "0  [Ada, witch, Sometimes, you, can, see, a, mist...   \n",
       "1  [A, little, girl, was, killed, suddenly, while...   \n",
       "2  [If, you, take, Gorman, Rd, west, towards, San...   \n",
       "3  [In, the, one, room, room, in, the, old, secti...   \n",
       "4  [Kappa, Delta, Sorority, The, Kappa, Delta, So...   \n",
       "\n",
       "                                       pos_tokenized  \\\n",
       "0  [(Ada, NNP), (witch, NN), (Sometimes, RB), (yo...   \n",
       "1  [(A, DT), (little, JJ), (girl, NN), (was, VBD)...   \n",
       "2  [(If, IN), (you, PRP), (take, VBP), (Gorman, N...   \n",
       "3  [(In, IN), (the, DT), (one, CD), (room, NN), (...   \n",
       "4  [(Kappa, NNP), (Delta, NNP), (Sorority, NNP), ...   \n",
       "\n",
       "                                  filtered_tokenized  \\\n",
       "0  [witch, sometimes, you, can, see, a, misty, bl...   \n",
       "1  [a, little, girl, was, killed, suddenly, while...   \n",
       "2  [if, you, take, west, towards, you, will, come...   \n",
       "3  [in, the, one, room, room, in, the, old, secti...   \n",
       "4  [the, is, haunted, by, an, entity, simply, kno...   \n",
       "\n",
       "                            lemma_filtered_tokenized  \\\n",
       "0  [witch, sometimes, you, can, see, a, misty, bl...   \n",
       "1  [a, little, girl, wa, killed, suddenly, while,...   \n",
       "2  [if, you, take, west, towards, you, will, come...   \n",
       "3  [in, the, one, room, room, in, the, old, secti...   \n",
       "4  [the, is, haunted, by, an, entity, simply, kno...   \n",
       "\n",
       "                                 lemma_pos_tokenized  \n",
       "0  [ada, witch, sometimes, you, can, see, a, mist...  \n",
       "1  [a, little, girl, be, kill, suddenly, while, w...  \n",
       "2  [if, you, take, gorman, rd, west, towards, san...  \n",
       "3  [in, the, one, room, room, in, the, old, secti...  \n",
       "4  [kappa, delta, sorority, the, kappa, delta, so...  \n",
       "\n",
       "[5 rows x 24 columns]"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "haunted_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "ROvwOBJ2KIiT"
   },
   "source": [
    "### Get Event Column\n",
    "Methods defined:\n",
    "1. Get event from description ← get_event()\n",
    "2. Get event column from DataFrame ← get_event_col()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "id": "-TV90KKW_SAy"
   },
   "outputs": [],
   "source": [
    "def get_event(description, keywords_df, events) -> str:\n",
    "  description = description.lower()\n",
    "  for event in events:\n",
    "    for keyword in keywords_df[event].dropna():\n",
    "      regex = re.compile(keyword)\n",
    "      if regex.search(description):\n",
    "        return event\n",
    "  return \"Unknown\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "id": "sbflThzJF5bQ"
   },
   "outputs": [],
   "source": [
    "def get_event_col(df, keywords_df, events) -> list[str]:\n",
    "  event_col = []\n",
    "\n",
    "  for _, row in df.iterrows():\n",
    "    description = row['clean_spelling']\n",
    "    event = get_event(description, keywords_df, events)\n",
    "    event_col.append(event)\n",
    "\n",
    "  return event_col"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "id": "5f0fdtde_SJX"
   },
   "outputs": [],
   "source": [
    "haunted_df[\"Event\"] = get_event_col(haunted_df, kw_df, events)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "id": "vrYtguSeNu1B"
   },
   "outputs": [],
   "source": [
    "df[\"Event\"] = get_event_col(df, kw_df, events)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "2VtC4_5UKVWG"
   },
   "source": [
    "### Results and Analysis\n",
    "1. Result: haunted_df['Event']\n",
    "2. Counts for each event type\n",
    "3. Random sample for given event type ← get_sample()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "0cr8GO0xCPer",
    "outputId": "4fcbc90c-9c2e-466e-c9cf-90192a40355a"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Event Counts\n",
      "\n",
      "Suicide: 447\n",
      "Murder: 1790\n",
      "Natural Disaster: 313\n",
      "Death: 229\n",
      "Supernatural: 6349\n",
      "Unknown: 1864\n"
     ]
    }
   ],
   "source": [
    "print(\"Event Counts\")\n",
    "print(\"\")\n",
    "for event in events + ['Unknown']:\n",
    "  print(f\"{event}: {haunted_df[haunted_df['Event'] == event].shape[0]}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "NMlKxGmKUfb4",
    "outputId": "fa3452fd-28a4-4304-91a8-e5863739c438"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Unknown count: 1864, Total row count: 10992, Unknown %: 17.0%, Classified %:83.0%\n"
     ]
    }
   ],
   "source": [
    "unknown_count = haunted_df[haunted_df['Event'] == 'Unknown'].shape[0]  # Count 'unknown' (case insensitive)\n",
    "total_count = haunted_df.shape[0]  # Total number of rows\n",
    "print(f\"Unknown count: {unknown_count}, Total row count: {total_count}, Unknown %: {round(unknown_count/total_count*100,1)}%, Classified %:{100-round(unknown_count/total_count*100,1)}%\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 53
    },
    "id": "uIV9QDD7JQpv",
    "outputId": "ec127ab0-aa3c-4a84-8064-b68438470fc3"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Unusually shaped building is the current home of the \"Blue Lady\". Building used to be a speak- easy during the prohibition. A woman who worked at the establishment was married to a seaman, but had an affair with a piano player. When the husband returned from Alaska and found out, he then murdered her on the beach below. The Blue Lady is a friendly and mischievous spirit.'"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def get_sample(df, event) -> pd.DataFrame:\n",
    "  return df[df['Event'] == event].sample(1).description.values[0]\n",
    "\n",
    "get_sample(haunted_df, \"Murder\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "vJPW9TctwlaU"
   },
   "source": [
    "## Apparition Types"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "eykQp6yO30u9"
   },
   "source": [
    "### Extract keywords"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "Efd92nSVxUkB",
    "outputId": "119cedb1-64a7-4aa4-9829-1559aff626b6"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "         apparition_types apparition_descriptors  \\\n",
      "0  [ghost, figure, witch]       [ghostly, misty]   \n",
      "1                      []             [restless]   \n",
      "2                [spirit]                     []   \n",
      "3                      []                     []   \n",
      "4                [entity]                     []   \n",
      "\n",
      "                 apparition_gender apparition_age  \n",
      "0        [man, men, husband, wife]             []  \n",
      "1                     [girl, them]        [child]  \n",
      "2  [father, son, wife, they, them]             []  \n",
      "3                     [they, them]             []  \n",
      "4                   [sister, they]             []  \n"
     ]
    }
   ],
   "source": [
    "#Grabs the keyword columns from the keywords dictionary and extracts those keywords from the processed dataframe\n",
    "df['apparition_types'] = df['lemma_pos_tokenized'].apply(lambda x: extract_keywords(str(x), keyword_bank_df['Apparition_Types']))\n",
    "df['apparition_descriptors'] = df['lemma_pos_tokenized'].apply(lambda x: extract_keywords(str(x), keyword_bank_df['Apparition_Descriptors']))\n",
    "df['apparition_gender'] = df['tokenized'].apply(lambda x: extract_keywords(str(x), keyword_bank_df['Apparition_Gender']))\n",
    "df['apparition_age'] = df['tokenized'].apply(lambda x: extract_keywords(str(x), keyword_bank_df['Apparition_Age']))\n",
    "\n",
    "print(df[['apparition_types', 'apparition_descriptors', 'apparition_gender', 'apparition_age']].head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "cwBUbGuGu2bI",
    "outputId": "9fba13ec-e8cb-49b4-b914-5735ec3ca3fa"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "         apparition_types apparition_descriptors  \\\n",
      "0  [ghost, figure, witch]       [ghostly, misty]   \n",
      "1               [Unknown]             [restless]   \n",
      "2                [spirit]              [Unknown]   \n",
      "3               [Unknown]              [Unknown]   \n",
      "4                [entity]              [Unknown]   \n",
      "\n",
      "                 apparition_gender apparition_age  \n",
      "0        [man, men, husband, wife]      [Unknown]  \n",
      "1                     [girl, them]        [child]  \n",
      "2  [father, son, wife, they, them]      [Unknown]  \n",
      "3                     [they, them]      [Unknown]  \n",
      "4                   [sister, they]      [Unknown]  \n"
     ]
    }
   ],
   "source": [
    "#Turn empty lists into [Unknown]\n",
    "df['apparition_types'] = df['apparition_types'].apply(lambda x: ['Unknown'] if isinstance(x, list) and not x else x)\n",
    "df['apparition_descriptors'] = df['apparition_descriptors'].apply(lambda x: ['Unknown'] if isinstance(x, list) and not x else x)\n",
    "df['apparition_gender'] = df['apparition_gender'].apply(lambda x: ['Unknown'] if isinstance(x, list) and not x else x)\n",
    "df['apparition_age'] = df['apparition_age'].apply(lambda x: ['Unknown'] if isinstance(x, list) and not x else x)\n",
    "\n",
    "print(df[['apparition_types', 'apparition_descriptors', 'apparition_gender', 'apparition_age']].head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "458JFXtO4J2u",
    "outputId": "b2d88a95-b5e5-4cf6-9c0f-93fc902301b4"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  apparition_types_str apparition_descriptors_str      apparition_gender_str  \\\n",
      "0   ghost figure witch              ghostly misty       man men husband wife   \n",
      "1              Unknown                   restless                  girl them   \n",
      "2               spirit                    Unknown  father son wife they them   \n",
      "3              Unknown                    Unknown                  they them   \n",
      "4               entity                    Unknown                sister they   \n",
      "\n",
      "  apparition_age_str  \n",
      "0            Unknown  \n",
      "1              child  \n",
      "2            Unknown  \n",
      "3            Unknown  \n",
      "4            Unknown  \n"
     ]
    }
   ],
   "source": [
    "#Re-format the output of a list into a separate column as a string\n",
    "df['apparition_types_str'] = df['apparition_types'].apply(' '.join)\n",
    "df['apparition_descriptors_str'] = df['apparition_descriptors'].apply(' '.join)\n",
    "df['apparition_gender_str'] = df['apparition_gender'].apply(' '.join)\n",
    "df['apparition_age_str'] = df['apparition_age'].apply(' '.join)\n",
    "\n",
    "print(df[['apparition_types_str', 'apparition_descriptors_str', 'apparition_gender_str', 'apparition_age_str']].head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "jp1xe0vEokDk",
    "outputId": "e387a11c-1092-4069-bc1f-a689c7d3edb9"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CSV file saved 'haunted_file_apparition_extract'\n"
     ]
    }
   ],
   "source": [
    "df_apparition = df[['city', 'country','description', 'location', 'state', 'state_abbrev', 'longitude', 'latitude','city_longitude', 'city_longitude', 'tokenized', 'pos_tokenized','lemma_pos_tokenized', 'apparition_types', 'apparition_descriptors', 'apparition_gender', 'apparition_age', 'apparition_types_str', 'apparition_descriptors_str', 'apparition_gender_str', 'apparition_age_str']]\n",
    "df_apparition.to_csv('../data/haunted_file_apparition_extract.csv', index=False)\n",
    "print(f\"CSV file saved 'haunted_file_apparition_extract'\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "8uaMCfRA4Cr4"
   },
   "source": [
    "### Initial Summary Counts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "kGOuwGFOyYsa",
    "outputId": "5c6e024a-6041-411f-cec6-da5b185c73bb"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'apparition_types': Counter({'Unknown': 5867, 'ghost': 2318, 'spirit': 858, 'figure': 776, 'apparition': 762, 'shadow': 448, 'presence': 431, 'orb': 325, 'mist': 118, 'witch': 117, 'phantom': 80, 'entity': 61, 'poltergeist': 53, 'specter': 49, 'demon': 35, 'vampire': 7, 'werewolf': 6, 'troll': 4, 'imp': 4, 'warlock': 3}), 'apparition_descriptors': Counter({'Unknown': 9635, 'presence': 431, 'ghostly': 345, 'shadowy': 108, 'unusual': 63, 'uneasy': 55, 'negative': 40, 'invisible': 31, 'restless': 30, 'misty': 29, 'silhouette': 24, 'anomaly': 24, 'mischievous': 23, 'unidentified': 21, 'ectoplasm': 20, 'playful': 17, 'malevolent': 16, 'hooded': 16, 'walker': 15, 'rider': 14, 'vortex': 13, 'mischief': 13, 'digital': 11, 'doom': 11, 'bizarre': 11, 'affectionately': 11, 'glide': 10, 'faceless': 10, 'widely': 10, 'hazy': 9, 'grayish': 8, 'mild': 7, 'unnatural': 6, 'aimlessly': 6, 'foreboding': 6, 'blob': 6, 'nervous': 5, 'translucent': 5, 'undoubtedly': 4, 'smoky': 4, 'heavyset': 4, 'brunette': 4, 'wrestler': 3, 'fleeting': 3, 'galloping': 2, 'robed': 2, 'gloomy': 1, 'swirling': 1, 'resembling': 1, 'desecrated': 1, 'residing': 1, 'creeping': 1}), 'apparition_gender': Counter({'Unknown': 4237, 'they': 2409, 'man': 1619, 'girl': 1456, 'woman': 1192, 'them': 1128, 'boy': 684, 'lady': 466, 'person': 316, 'women': 267, 'men': 265, 'wife': 262, 'female': 199, 'mother': 188, 'husband': 171, 'daughter': 145, 'guy': 145, 'father': 142, 'son': 106, 'human': 90, 'brother': 72, 'sister': 66, 'individual': 34, 'mom': 29, 'dad': 16, 'gentlemen': 5, 'dude': 1}), 'apparition_age': Counter({'Unknown': 9677, 'children': 660, 'child': 295, 'baby': 224, 'teenager': 176, 'elderly': 76, 'adult': 45, 'senior': 35, 'infant': 24, 'youth': 16, 'minor': 10, 'elder': 10, 'newborn': 8, 'toddler': 5, 'adolescent': 3})}\n",
      "               column        word  count\n",
      "3    apparition_types     Unknown   5867\n",
      "0    apparition_types       ghost   2318\n",
      "4    apparition_types      spirit    858\n",
      "1    apparition_types      figure    776\n",
      "8    apparition_types  apparition    762\n",
      "..                ...         ...    ...\n",
      "110    apparition_age       minor     10\n",
      "111    apparition_age       elder     10\n",
      "113    apparition_age     newborn      8\n",
      "103    apparition_age     toddler      5\n",
      "112    apparition_age  adolescent      3\n",
      "\n",
      "[114 rows x 3 columns]\n"
     ]
    }
   ],
   "source": [
    "from collections import Counter\n",
    "# Flatten the list for easier counting of appartition_types\n",
    "\n",
    "def count_word_frequncy(*df_columns):\n",
    "    counts_dict = {}\n",
    "\n",
    "    for df_column in df_columns:\n",
    "        flattened_list = []\n",
    "\n",
    "        for sublist in df_column:\n",
    "            for word in sublist:\n",
    "                flattened_list.append(word)\n",
    "                counts = Counter(flattened_list)\n",
    "                counts_dict[df_column.name] = counts\n",
    "\n",
    "    results = []\n",
    "\n",
    "    # Print results for each column on separate lines\n",
    "    for column_name, counts in counts_dict.items():\n",
    "        # print(f\"Word counts for {column_name}:\")\n",
    "        for word, count in counts.items():\n",
    "            # print(f\"{word}: {count}\")\n",
    "            results.append({'column': column_name, 'word': word, 'count': count})\n",
    "        # print()\n",
    "\n",
    "    results_df = pd.DataFrame(results)\n",
    "    results_df = results_df.sort_values(by=['column','count'], ascending=[False,False])\n",
    "    results_df.to_csv('../data/apparition_word_counts.csv', index=False)\n",
    "    return counts_dict, results_df\n",
    "\n",
    "results_apparition_extract, results_df = count_word_frequncy(df['apparition_types'], df['apparition_descriptors'], df['apparition_gender'], df['apparition_age'])\n",
    "print(results_apparition_extract)\n",
    "print(results_df)\n",
    "\n",
    "#Initial Audit: {'apparition_types': Counter({'Unknown': 6029, 'ghost': 2242, 'spirit': 832, 'figure': 756, 'apparition': 709, 'presence': 428, 'shadow': 410, 'orb': 292, 'mist': 117, 'witch': 104, 'phantom': 69, 'entity': 62, 'poltergeist': 49, 'specter': 45, 'demon': 33, 'vampire': 7, 'werewolf': 5, 'warlock': 3, 'troll': 3, 'imp': 3}), 'apparition_descriptors': Counter({'presence': 428, 'ghostly': 327, 'shadowy': 105, 'unusual': 60, 'uneasy': 55, 'negative': 39, 'invisible': 30, 'restless': 29, 'misty': 28, 'anomaly': 24, 'silhouette': 23, 'mischievous': 23, 'unidentified': 20, 'hooded': 19, 'playful': 17, 'ectoplasm': 16, 'malevolent': 15, 'rider': 13, 'foreboding': 13, 'vortex': 12, 'mischief': 12, 'bizarre': 11, 'affectionately': 11, 'digital': 10, 'widely': 10, 'residing': 9, 'resembling': 9, 'hazy': 9, 'walker': 8, 'faceless': 8, 'grayish': 8, 'mild': 7, 'galloping': 7, 'swirling': 7, 'unnatural': 6, 'glide': 6, 'aimlessly': 6, 'fleeting': 6, 'desecrated': 5, 'nervous': 5, 'translucent': 5, 'blob': 5, 'smoky': 4, 'robed': 4, 'doom': 4, 'heavyset': 4, 'brunette': 4, 'creeping': 4, 'undoubtedly': 3, 'tested': 3, 'wrestler': 3, 'gloomy': 1}), 'apparition_gender': Counter({'they': 2406, 'man': 1597, 'girl': 1435, 'woman': 1176, 'them': 1126, 'boy': 671, 'lady': 413, 'person': 313, 'wife': 260, 'women': 255, 'men': 252, 'female': 187, 'mother': 181, 'husband': 171, 'guy': 144, 'daughter': 142, 'father': 133, 'son': 104, 'human': 88, 'brother': 62, 'sister': 56, 'individual': 34, 'mom': 28, 'dad': 15, 'gentlemen': 5, 'dude': 1}), 'apparition_age': Counter({'children': 626, 'child': 290, 'baby': 220, 'teenager': 166, 'elderly': 76, 'adult': 42, 'senior': 29, 'infant': 24, 'youth': 14, 'minor': 9, 'elder': 8, 'newborn': 7, 'toddler': 5, 'adolescent': 3})}\n",
    "#After updating lemma_pos_tokenization: {'apparition_types': Counter({'Unknown': 5876, 'ghost': 2317, 'spirit': 848, 'figure': 776, 'apparition': 757, 'shadow': 448, 'presence': 431, 'orb': 325, 'mist': 118, 'witch': 117, 'phantom': 80, 'entity': 61, 'poltergeist': 52, 'specter': 49, 'demon': 35, 'vampire': 7, 'werewolf': 6, 'troll': 4, 'imp': 4, 'warlock': 3}), 'apparition_descriptors': Counter({'Unknown': 9635, 'presence': 431, 'ghostly': 345, 'shadowy': 108, 'unusual': 63, 'uneasy': 55, 'negative': 40, 'invisible': 31, 'restless': 30, 'misty': 29, 'silhouette': 24, 'anomaly': 24, 'mischievous': 23, 'unidentified': 21, 'ectoplasm': 20, 'playful': 17, 'malevolent': 16, 'hooded': 16, 'walker': 15, 'rider': 14, 'vortex': 13, 'mischief': 13, 'digital': 11, 'doom': 11, 'bizarre': 11, 'affectionately': 11, 'glide': 10, 'faceless': 10, 'widely': 10, 'hazy': 9, 'grayish': 8, 'mild': 7, 'unnatural': 6, 'aimlessly': 6, 'foreboding': 6, 'blob': 6, 'nervous': 5, 'translucent': 5, 'undoubtedly': 4, 'smoky': 4, 'heavyset': 4, 'brunette': 4, 'wrestler': 3, 'fleeting': 3, 'galloping': 2, 'robed': 2, 'gloomy': 1, 'swirling': 1, 'resembling': 1, 'desecrated': 1, 'residing': 1, 'creeping': 1}), 'apparition_gender': Counter({'Unknown': 4237, 'they': 2409, 'man': 1619, 'girl': 1456, 'woman': 1192, 'them': 1128, 'boy': 684, 'lady': 466, 'person': 316, 'women': 267, 'men': 265, 'wife': 262, 'female': 199, 'mother': 188, 'husband': 171, 'daughter': 145, 'guy': 145, 'father': 142, 'son': 106, 'human': 90, 'brother': 72, 'sister': 66, 'individual': 34, 'mom': 29, 'dad': 16, 'gentlemen': 5, 'dude': 1}), 'apparition_age': Counter({'Unknown': 9677, 'children': 660, 'child': 295, 'baby': 224, 'teenager': 176, 'elderly': 76, 'adult': 45, 'senior': 35, 'infant': 24, 'youth': 16, 'minor': 10, 'elder': 10, 'newborn': 8, 'toddler': 5, 'adolescent': 3})}\n",
    "#After fixing misspellings: {'apparition_types': Counter({'Unknown': 5867, 'ghost': 2318, 'spirit': 858, 'figure': 776, 'apparition': 762, 'shadow': 448, 'presence': 431, 'orb': 325, 'mist': 118, 'witch': 117, 'phantom': 80, 'entity': 61, 'poltergeist': 53, 'specter': 49, 'demon': 35, 'vampire': 7, 'werewolf': 6, 'troll': 4, 'imp': 4, 'warlock': 3}), 'apparition_descriptors': Counter({'Unknown': 9635, 'presence': 431, 'ghostly': 345, 'shadowy': 108, 'unusual': 63, 'uneasy': 55, 'negative': 40, 'invisible': 31, 'restless': 30, 'misty': 29, 'silhouette': 24, 'anomaly': 24, 'mischievous': 23, 'unidentified': 21, 'ectoplasm': 20, 'playful': 17, 'malevolent': 16, 'hooded': 16, 'walker': 15, 'rider': 14, 'vortex': 13, 'mischief': 13, 'digital': 11, 'doom': 11, 'bizarre': 11, 'affectionately': 11, 'glide': 10, 'faceless': 10, 'widely': 10, 'hazy': 9, 'grayish': 8, 'mild': 7, 'unnatural': 6, 'aimlessly': 6, 'foreboding': 6, 'blob': 6, 'nervous': 5, 'translucent': 5, 'undoubtedly': 4, 'smoky': 4, 'heavyset': 4, 'brunette': 4, 'wrestler': 3, 'fleeting': 3, 'galloping': 2, 'robed': 2, 'gloomy': 1, 'swirling': 1, 'resembling': 1, 'desecrated': 1, 'residing': 1, 'creeping': 1}), 'apparition_gender': Counter({'Unknown': 4237, 'they': 2409, 'man': 1619, 'girl': 1456, 'woman': 1192, 'them': 1128, 'boy': 684, 'lady': 466, 'person': 316, 'women': 267, 'men': 265, 'wife': 262, 'female': 199, 'mother': 188, 'husband': 171, 'daughter': 145, 'guy': 145, 'father': 142, 'son': 106, 'human': 90, 'brother': 72, 'sister': 66, 'individual': 34, 'mom': 29, 'dad': 16, 'gentlemen': 5, 'dude': 1}), 'apparition_age': Counter({'Unknown': 9677, 'children': 660, 'child': 295, 'baby': 224, 'teenager': 176, 'elderly': 76, 'adult': 45, 'senior': 35, 'infant': 24, 'youth': 16, 'minor': 10, 'elder': 10, 'newborn': 8, 'toddler': 5, 'adolescent': 3})}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "K_X909DoyjeR",
    "outputId": "c41d1558-1a6e-4b90-e4e4-f839ad046b4b"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Most common words for apparition_types:\n",
      "ghost: 2318\n",
      "spirit: 858\n",
      "figure: 776\n",
      "apparition: 762\n",
      "shadow: 448\n",
      "presence: 431\n",
      "orb: 325\n",
      "mist: 118\n",
      "witch: 117\n",
      "\n",
      "Most common words for apparition_descriptors:\n",
      "presence: 431\n",
      "ghostly: 345\n",
      "shadowy: 108\n",
      "unusual: 63\n",
      "uneasy: 55\n",
      "negative: 40\n",
      "invisible: 31\n",
      "restless: 30\n",
      "misty: 29\n",
      "\n",
      "Most common words for apparition_gender:\n",
      "they: 2409\n",
      "man: 1619\n",
      "girl: 1456\n",
      "woman: 1192\n",
      "them: 1128\n",
      "boy: 684\n",
      "lady: 466\n",
      "person: 316\n",
      "women: 267\n",
      "\n",
      "Most common words for apparition_age:\n",
      "children: 660\n",
      "child: 295\n",
      "baby: 224\n",
      "teenager: 176\n",
      "elderly: 76\n",
      "adult: 45\n",
      "senior: 35\n",
      "infant: 24\n",
      "youth: 16\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Show the most common apparition types, excluding \"Unknown\"\n",
    "for column, counts in results_apparition_extract.items():\n",
    "    print(f\"Most common words for {column}:\")\n",
    "\n",
    "    # Get the most common counts, excluding \"Unknown\"\n",
    "    most_common_counts = [(word, count) for word, count in counts.most_common(10) if word.lower() != \"unknown\"]\n",
    "\n",
    "    for word, count in most_common_counts:\n",
    "        print(f\"{word}: {count}\")\n",
    "\n",
    "    print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 1000
    },
    "id": "-sQvqU92BiDF",
    "outputId": "6155cb6b-9f24-4adc-887f-7f4571eed91e"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>state</th>\n",
       "      <th>unique_apparition_mentions</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>California</td>\n",
       "      <td>1224</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>Texas</td>\n",
       "      <td>769</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>Pennsylvania</td>\n",
       "      <td>741</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>Michigan</td>\n",
       "      <td>605</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>Ohio</td>\n",
       "      <td>534</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>New York</td>\n",
       "      <td>521</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Illinois</td>\n",
       "      <td>449</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Kentucky</td>\n",
       "      <td>400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Indiana</td>\n",
       "      <td>383</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Florida</td>\n",
       "      <td>377</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>Massachusetts</td>\n",
       "      <td>370</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>Missouri</td>\n",
       "      <td>343</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Georgia</td>\n",
       "      <td>318</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>Wisconsin</td>\n",
       "      <td>314</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>244</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>Tennessee</td>\n",
       "      <td>240</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>North Carolina</td>\n",
       "      <td>240</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>Washington</td>\n",
       "      <td>239</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>Oklahoma</td>\n",
       "      <td>229</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>New Jersey</td>\n",
       "      <td>224</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Connecticut</td>\n",
       "      <td>220</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>Virginia</td>\n",
       "      <td>210</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Colorado</td>\n",
       "      <td>198</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>South Carolina</td>\n",
       "      <td>181</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Iowa</td>\n",
       "      <td>180</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Maryland</td>\n",
       "      <td>179</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Arizona</td>\n",
       "      <td>176</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>Minnesota</td>\n",
       "      <td>175</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>Oregon</td>\n",
       "      <td>175</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>Utah</td>\n",
       "      <td>158</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Kansas</td>\n",
       "      <td>135</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Arkansas</td>\n",
       "      <td>129</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>Nebraska</td>\n",
       "      <td>125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>West Virginia</td>\n",
       "      <td>118</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Louisiana</td>\n",
       "      <td>115</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Hawaii</td>\n",
       "      <td>102</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>Rhode Island</td>\n",
       "      <td>91</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>New Hampshire</td>\n",
       "      <td>89</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>New Mexico</td>\n",
       "      <td>88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>Wyoming</td>\n",
       "      <td>86</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>South Dakota</td>\n",
       "      <td>85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Idaho</td>\n",
       "      <td>77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>Vermont</td>\n",
       "      <td>69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>Mississippi</td>\n",
       "      <td>67</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>North Dakota</td>\n",
       "      <td>66</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Maine</td>\n",
       "      <td>62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>Nevada</td>\n",
       "      <td>59</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>Montana</td>\n",
       "      <td>47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Delaware</td>\n",
       "      <td>43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Alaska</td>\n",
       "      <td>36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>Washington DC</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             state  unique_apparition_mentions\n",
       "4       California                        1224\n",
       "42           Texas                         769\n",
       "37    Pennsylvania                         741\n",
       "21        Michigan                         605\n",
       "34            Ohio                         534\n",
       "31        New York                         521\n",
       "12        Illinois                         449\n",
       "16        Kentucky                         400\n",
       "13         Indiana                         383\n",
       "8          Florida                         377\n",
       "20   Massachusetts                         370\n",
       "24        Missouri                         343\n",
       "9          Georgia                         318\n",
       "49       Wisconsin                         314\n",
       "0          Alabama                         244\n",
       "41       Tennessee                         240\n",
       "32  North Carolina                         240\n",
       "46      Washington                         239\n",
       "35        Oklahoma                         229\n",
       "29      New Jersey                         224\n",
       "6      Connecticut                         220\n",
       "45        Virginia                         210\n",
       "5         Colorado                         198\n",
       "39  South Carolina                         181\n",
       "14            Iowa                         180\n",
       "19        Maryland                         179\n",
       "2          Arizona                         176\n",
       "22       Minnesota                         175\n",
       "36          Oregon                         175\n",
       "43            Utah                         158\n",
       "15          Kansas                         135\n",
       "3         Arkansas                         129\n",
       "26        Nebraska                         125\n",
       "48   West Virginia                         118\n",
       "17       Louisiana                         115\n",
       "10          Hawaii                         102\n",
       "38    Rhode Island                          91\n",
       "28   New Hampshire                          89\n",
       "30      New Mexico                          88\n",
       "50         Wyoming                          86\n",
       "40    South Dakota                          85\n",
       "11           Idaho                          77\n",
       "44         Vermont                          69\n",
       "23     Mississippi                          67\n",
       "33    North Dakota                          66\n",
       "18           Maine                          62\n",
       "27          Nevada                          59\n",
       "25         Montana                          47\n",
       "7         Delaware                          43\n",
       "1           Alaska                          36\n",
       "47   Washington DC                          17"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#count up the number of unique apparition terms mentioned within the description\n",
    "df['unique_apparition_mentions'] = df['apparition_types'].apply(len)\n",
    "\n",
    "df_grouped_state_apparitions = df.groupby(['state'])['unique_apparition_mentions'].sum().reset_index().sort_values(by='unique_apparition_mentions', ascending=False)\n",
    "df_grouped_state_apparitions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 424
    },
    "id": "ZSjOGRX0ytYp",
    "outputId": "8fac8e82-6036-45ed-ddd7-585cd6d9718c"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>city</th>\n",
       "      <th>unique_apparition_mentions</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2243</th>\n",
       "      <td>Los Angeles</td>\n",
       "      <td>69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3397</th>\n",
       "      <td>San Antonio</td>\n",
       "      <td>61</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3077</th>\n",
       "      <td>Pittsburgh</td>\n",
       "      <td>48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>819</th>\n",
       "      <td>Columbus</td>\n",
       "      <td>48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3385</th>\n",
       "      <td>Salem</td>\n",
       "      <td>44</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1910</th>\n",
       "      <td>Johnston City</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1914</th>\n",
       "      <td>Jonestown</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1916</th>\n",
       "      <td>Joppa</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1917</th>\n",
       "      <td>Joy</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4384</th>\n",
       "      <td>township</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4385 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "               city  unique_apparition_mentions\n",
       "2243    Los Angeles                          69\n",
       "3397    San Antonio                          61\n",
       "3077     Pittsburgh                          48\n",
       "819        Columbus                          48\n",
       "3385          Salem                          44\n",
       "...             ...                         ...\n",
       "1910  Johnston City                           1\n",
       "1914      Jonestown                           1\n",
       "1916          Joppa                           1\n",
       "1917            Joy                           1\n",
       "4384       township                           1\n",
       "\n",
       "[4385 rows x 2 columns]"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_grouped_city_apparitions = df.groupby(['city'])['unique_apparition_mentions'].sum().reset_index().sort_values(by='unique_apparition_mentions', ascending=False)\n",
    "df_grouped_city_apparitions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 424
    },
    "id": "rHjBvXX5ywkG",
    "outputId": "6de093e3-de5e-43b3-890e-6a29af3b8a12"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>location</th>\n",
       "      <th>unique_apparition_mentions</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>6587</th>\n",
       "      <td>Prince Georges county</td>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6793</th>\n",
       "      <td>Rhode Island School of Design</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9014</th>\n",
       "      <td>University of Vermont</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9174</th>\n",
       "      <td>Wal-Mart</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5137</th>\n",
       "      <td>Mission Inn</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3549</th>\n",
       "      <td>Hillcrest Cemetery</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3548</th>\n",
       "      <td>Hillcrest</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3547</th>\n",
       "      <td>HillCrest-North Nursing Home</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3546</th>\n",
       "      <td>Hill Top Inn Restaurant</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9902</th>\n",
       "      <td>”Cry Baby Bridge\"</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>9903 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                           location  unique_apparition_mentions\n",
       "6587          Prince Georges county                          19\n",
       "6793  Rhode Island School of Design                          18\n",
       "9014          University of Vermont                          14\n",
       "9174                       Wal-Mart                          14\n",
       "5137                    Mission Inn                          13\n",
       "...                             ...                         ...\n",
       "3549             Hillcrest Cemetery                           1\n",
       "3548                      Hillcrest                           1\n",
       "3547   HillCrest-North Nursing Home                           1\n",
       "3546        Hill Top Inn Restaurant                           1\n",
       "9902              ”Cry Baby Bridge\"                           1\n",
       "\n",
       "[9903 rows x 2 columns]"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_grouped_geo_apparitions = df.groupby(['location'])['unique_apparition_mentions'].sum().reset_index().sort_values(by='unique_apparition_mentions', ascending=False)\n",
    "df_grouped_geo_apparitions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "nCco_eN17bmO"
   },
   "source": [
    "### Apparition Types (Unknown Results)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "U8FGN1nR7ZP-",
    "outputId": "6979466b-c1fe-4821-ef92-d530cdb2c52f"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Unknown count: 5867, Total row count: 10992, Unknown %: 53.4%, Classified %:46.6%\n"
     ]
    }
   ],
   "source": [
    "#Audit Recall rate of the Apparition_type feature parser\n",
    "unknown_count = df['apparition_types_str'].str.lower().eq('unknown').sum()  # Count 'unknown' (case insensitive)\n",
    "total_count = len(df)  # Total number of rows\n",
    "\n",
    "print(f\"Unknown count: {unknown_count}, Total row count: {total_count}, Unknown %: {round(unknown_count/total_count*100,1)}%, Classified %:{100-round(unknown_count/total_count*100,1)}%\")\n",
    "\n",
    "#Intial Audit: Unknown count: 6029, Total row count: 10992, Unknown %: 54.8%, Classified %:45.2%\n",
    "#After lemma_pos_tokenized: Unknown count: 5876, Total row count: 10992, Unknown %: 53.5%, Classified %:46.5%\n",
    "#After fixing misspellings: Unknown count: 5867, Total row count: 10992, Unknown %: 53.4%, Classified %:46.6%\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "BIKpcgQ10tex"
   },
   "source": [
    "### Word Embedding\n",
    "A Word2Vec model is trained to see what words are closely associated to the keyword bank. The model is trained off of the haunted_dataset's descripions. This can be used to inform of apparition_type descriptors and identifiers.\n",
    "Takes around 1min 30sec to train the Word2Vec model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "19UfiqlO0sH3",
    "outputId": "77695bb8-228d-4769-de30-33e0b72a8dd3"
   },
   "outputs": [],
   "source": [
    "import random\n",
    "import numpy as np\n",
    "#!pip install gensim\n",
    "from gensim.models import Word2Vec\n",
    "\n",
    "SEED = 42\n",
    "random.seed(SEED)\n",
    "np.random.seed(SEED)\n",
    "\n",
    "def word_embeddings(df, tokenized_corpus):\n",
    "    # Train Word2Vec\n",
    "    model = Word2Vec(\n",
    "        df[tokenized_corpus],  # all tokenized sentences\n",
    "        vector_size=100,  # dimensionality of embeddings\n",
    "        window=5,         # context window size\n",
    "        min_count=3,      # ignore words appearing <2 times\n",
    "        workers=1,        # single-threaded (for reproducibility)\n",
    "        hs=0,             # use hierarchical softmax\n",
    "        negative=5,       # negative sampling\n",
    "        sg=1,             # use skip-gram (instead of CBOW)\n",
    "        seed=SEED,        # random seed for reproducibility\n",
    "        epochs=15         # More epochs for deeper training\n",
    "    )\n",
    "    return model\n",
    "\n",
    "model = word_embeddings(df,'lemma_filtered_tokenized') #Uses the lemma_filtered_tokenized so that Proper Nouns are removed"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "gmm6cc-dBrV4",
    "outputId": "3cafc581-66f4-4607-8f96-1a7827afc2f4"
   },
   "outputs": [],
   "source": [
    "# Using the trained model, Find similar words to keyword_bank\n",
    "def word2vec_associations(model, keyword_bank_df, column_name, output_csv_path):\n",
    "    results = []\n",
    "    for word in keyword_bank_df[column_name]:\n",
    "        if isinstance(word, str):  # Check if word is a string\n",
    "            try:\n",
    "                similar_words = model.wv.most_similar(word, topn=15)\n",
    "                for similar_word, score in similar_words:\n",
    "                    results.append({\"keyword\": word, \"similar_word\": similar_word, \"score\": score})\n",
    "                print(f\"Words similar to {word}: {model.wv.most_similar(word, topn=10)}\")\n",
    "            except KeyError:\n",
    "                print(f\"{word} not found in corpus\")\n",
    "        else:\n",
    "            continue\n",
    "\n",
    "    df_results = pd.DataFrame(results)\n",
    "\n",
    "    df_results.to_csv(output_csv_path, index=False)\n",
    "    print(f\"Results saved to {output_csv_path}\")\n",
    "    return df_results, model\n",
    "\n",
    "apparition_associations, model = word2vec_associations(model, keyword_bank_df, 'Apparition_Types', 'word2vec_apparition_types.csv')\n",
    "print()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "m4bu-djE912R"
   },
   "source": [
    "### Apparition Descriptors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "W3WLnlI797d3",
    "outputId": "049223de-cb4b-48b3-b552-bb494b4ad968"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0        [(misty, figure), (blue, figure)]\n",
      "1                                       []\n",
      "2                                       []\n",
      "3                                       []\n",
      "4                                       []\n",
      "                       ...                \n",
      "10987                                   []\n",
      "10988                                   []\n",
      "10989                 [(ear, Poltergeist)]\n",
      "10990                       [(few, ghost)]\n",
      "10991                                   []\n",
      "Name: adjectives, Length: 10992, dtype: object\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Convert apparition types to a set for faster lookups\n",
    "apparition_set = set(keyword_bank_df['Apparition_Types'].str.lower())\n",
    "\n",
    "def extract_app_adjectives(tokens):\n",
    "    adj_with_apparition = []  # Store adjectives with associated apparition word\n",
    "\n",
    "    for i, (word, tag) in enumerate(tokens):\n",
    "        if tag.startswith('JJ'):  # If it's an adjective\n",
    "            if i > 0 and tokens[i-1][0].lower() in apparition_set: # Checks if app_kw is 1 word before adj\n",
    "                adj_with_apparition.append((word, tokens[i-1][0]))\n",
    "            elif i > 0 and tokens[i-2][0].lower() in apparition_set: # Checks if app_kw is 2 word before adj\n",
    "                adj_with_apparition.append((word, tokens[i-2][0]))\n",
    "            elif i < len(tokens) - 1 and tokens[i+1][0].lower() in apparition_set: # Checks if app_kw is 1 word after adj\n",
    "                adj_with_apparition.append((word, tokens[i+1][0]))\n",
    "            elif i < len(tokens) - 2 and tokens[i+2][0].lower() in apparition_set: # Checks if app_kw is 2 words after adj\n",
    "                adj_with_apparition.append((word, tokens[i+2][0]))\n",
    "\n",
    "    return adj_with_apparition\n",
    "\n",
    "# Apply function to DataFrame\n",
    "df['adjectives'] = df['pos_tokenized'].apply(extract_app_adjectives)\n",
    "\n",
    "# Print output\n",
    "print(df['adjectives'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "uaBxi9a7-ABH",
    "outputId": "85ac5f02-0111-45de-b06e-bcd2db1cbabd"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[('Ada', 'NNP'), ('witch', 'NN'), ('Sometimes', 'RB'), ('you', 'PRP'), ('can', 'MD'), ('see', 'VB'), ('a', 'DT'), ('misty', 'JJ'), ('blue', 'JJ'), ('figure', 'NN'), ('floating', 'VBG'), ('within', 'IN'), ('a', 'DT'), ('radius', 'NN'), ('of', 'IN'), ('the', 'DT'), ('Ada', 'NNP'), ('Cemetery', 'NNP'), ('on', 'IN'), ('Mile', 'NNP'), ('between', 'IN'), ('Egypt', 'NNP'), ('Valley', 'NNP'), ('and', 'CC'), ('Honey', 'NNP'), ('Creek', 'NNP'), ('The', 'DT'), ('story', 'NN'), ('of', 'IN'), ('her', 'PRP$'), ('origin', 'NN'), ('is', 'VBZ'), ('as', 'IN'), ('follows', 'VBZ'), ('A', 'NNP'), ('man', 'NN'), ('suspected', 'VBD'), ('his', 'PRP$'), ('wife', 'NN'), ('of', 'IN'), ('having', 'VBG'), ('an', 'DT'), ('affair', 'NN'), ('so', 'RB'), ('he', 'PRP'), ('followed', 'VBD'), ('her', 'PRP'), ('late', 'JJ'), ('one', 'NN'), ('night', 'NN'), ('when', 'WRB'), ('she', 'PRP'), ('thought', 'VBD'), ('he', 'PRP'), ('was', 'VBD'), ('asleep', 'JJ'), ('Sure', 'NNP'), ('enough', 'IN'), ('she', 'PRP'), ('went', 'VBD'), ('to', 'TO'), ('a', 'DT'), ('field', 'NN'), ('near', 'IN'), ('their', 'PRP$'), ('property', 'NN'), ('where', 'WRB'), ('she', 'PRP'), ('met', 'VBD'), ('her', 'PRP'), ('lover', 'VB'), ('The', 'DT'), ('husband', 'NN'), ('was', 'VBD'), ('enraged', 'VBN'), ('and', 'CC'), ('killed', 'VBN'), ('his', 'PRP$'), ('wife', 'NN'), ('which', 'WDT'), ('resulted', 'VBD'), ('in', 'IN'), ('a', 'DT'), ('struggle', 'NN'), ('with', 'IN'), ('the', 'DT'), ('other', 'JJ'), ('man', 'NN'), ('Both', 'DT'), ('men', 'NNS'), ('died', 'VBD'), ('from', 'IN'), ('their', 'PRP$'), ('injuries', 'NNS'), ('It', 'PRP'), ('is', 'VBZ'), ('said', 'VBD'), ('that', 'IN'), ('late', 'JJ'), ('at', 'IN'), ('night', 'NN'), ('especially', 'RB'), ('during', 'IN'), ('the', 'DT'), ('night', 'NN'), ('of', 'IN'), ('and', 'CC'), ('the', 'DT'), ('nights', 'NNS'), ('preceding', 'VBG'), ('a', 'DT'), ('full', 'JJ'), ('moon', 'NN'), ('people', 'NNS'), ('driving', 'VBG'), ('by', 'IN'), ('the', 'DT'), ('field', 'NN'), ('can', 'MD'), ('see', 'VB'), ('her', 'PRP$'), ('ghost', 'NN'), ('searching', 'NN'), ('for', 'IN'), ('her', 'PRP$'), ('lover', 'JJ'), ('Some', 'DT'), ('people', 'NNS'), ('have', 'VBP'), ('reported', 'VBN'), ('stopping', 'NN'), ('to', 'TO'), ('try', 'VB'), ('to', 'TO'), ('communicate', 'VB'), ('with', 'IN'), ('her', 'PRP$'), ('but', 'CC'), ('she', 'PRP'), ('always', 'RB'), ('disappears', 'VBZ'), ('or', 'CC'), ('runs', 'VBZ'), ('into', 'IN'), ('the', 'DT'), ('woods', 'NNS'), ('where', 'WRB'), ('she', 'PRP'), ('can', 'MD'), ('not', 'RB'), ('be', 'VB'), ('followed', 'VBN'), ('due', 'JJ'), ('to', 'TO'), ('the', 'DT'), ('thick', 'NN'), ('brambles', 'VBZ'), ('that', 'IN'), ('inhabit', 'NN'), ('the', 'DT'), ('area', 'NN'), ('She', 'PRP'), ('is', 'VBZ'), ('said', 'VBD'), ('to', 'TO'), ('dress', 'VB'), ('in', 'IN'), ('a', 'DT'), ('long', 'JJ'), ('white', 'JJ'), ('gown', 'NN'), ('which', 'WDT'), ('authorities', 'NNS'), ('say', 'VBP'), ('dates', 'VBZ'), ('her', 'PRP'), ('to', 'TO'), ('the', 'DT'), ('turn', 'NN'), ('of', 'IN'), ('the', 'DT'), ('century', 'NN'), ('Usually', 'NNP'), ('she', 'PRP'), ('is', 'VBZ'), ('seen', 'VBN'), ('alone', 'RB'), ('but', 'CC'), ('sometimes', 'RB'), ('witnesses', 'NNS'), ('report', 'VBP'), ('seeing', 'VBG'), ('a', 'DT'), ('ghostly', 'RB'), ('death', 'NN'), ('scene', 'NN'), ('Others', 'NNP'), ('report', 'NN'), ('seeing', 'VBG'), ('nothing', 'NN'), ('at', 'IN'), ('all', 'DT'), ('but', 'CC'), ('hearing', 'VBG'), ('the', 'DT'), ('killer', 'NN'), ('shouts', 'VBZ'), ('of', 'IN'), ('rage', 'NN'), ('followed', 'VBN'), ('by', 'IN'), ('the', 'DT'), ('victims', 'NNS'), ('screams', 'NNS'), ('of', 'IN'), ('agony', 'NN'), ('Although', 'IN'), ('it', 'PRP'), ('is', 'VBZ'), ('said', 'VBD'), ('she', 'PRP'), ('haunts', 'VBZ'), ('the', 'DT'), ('field', 'NN'), ('on', 'IN'), ('Honeycreek', 'NNP'), ('Road', 'NNP'), ('where', 'WRB'), ('she', 'PRP'), ('died', 'VBD'), ('other', 'JJ'), ('witnesses', 'NNS'), ('have', 'VBP'), ('reported', 'VBN'), ('her', 'PRP$'), ('in', 'IN'), ('nearby', 'JJ'), ('Seidman', 'NNP'), ('Park', 'NNP'), ('and', 'CC'), ('in', 'IN'), ('nearby', 'JJ'), ('Findlay', 'NNP'), ('Cemetery', 'NNP'), ('where', 'WRB'), ('she', 'PRP'), ('is', 'VBZ'), ('supposedly', 'RB'), ('buried', 'VBN'), ('This', 'DT'), ('story', 'NN'), ('was', 'VBD'), ('actually', 'RB'), ('featured', 'VBN'), ('in', 'IN'), ('the', 'DT'), ('book', 'NN'), ('Ghosts', 'NNP'), ('of', 'IN'), ('Grand', 'NNP'), ('Rapids', 'NNP')]\n"
     ]
    }
   ],
   "source": [
    "#Spot check of line item rows for how description is pos_tagged\n",
    "print(df['pos_tokenized'][0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 1000
    },
    "id": "tNCN5QcTdPKP",
    "outputId": "8cff808e-884a-4c52-d171-ae40a58d073a"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>state</th>\n",
       "      <th>unique_app_descriptor_mentions</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>California</td>\n",
       "      <td>1089</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>Texas</td>\n",
       "      <td>711</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>Pennsylvania</td>\n",
       "      <td>656</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>Michigan</td>\n",
       "      <td>538</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>Ohio</td>\n",
       "      <td>486</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>New York</td>\n",
       "      <td>470</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Illinois</td>\n",
       "      <td>397</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Kentucky</td>\n",
       "      <td>371</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Indiana</td>\n",
       "      <td>353</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>Massachusetts</td>\n",
       "      <td>345</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Florida</td>\n",
       "      <td>332</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>Missouri</td>\n",
       "      <td>316</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Georgia</td>\n",
       "      <td>293</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>Wisconsin</td>\n",
       "      <td>283</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>227</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>Tennessee</td>\n",
       "      <td>224</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>Washington</td>\n",
       "      <td>223</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>Oklahoma</td>\n",
       "      <td>212</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>North Carolina</td>\n",
       "      <td>212</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>New Jersey</td>\n",
       "      <td>201</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>Virginia</td>\n",
       "      <td>194</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Connecticut</td>\n",
       "      <td>186</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Maryland</td>\n",
       "      <td>171</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Iowa</td>\n",
       "      <td>169</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>South Carolina</td>\n",
       "      <td>169</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Colorado</td>\n",
       "      <td>168</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>Minnesota</td>\n",
       "      <td>164</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Arizona</td>\n",
       "      <td>160</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>Oregon</td>\n",
       "      <td>160</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>Utah</td>\n",
       "      <td>136</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Kansas</td>\n",
       "      <td>123</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Arkansas</td>\n",
       "      <td>120</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>Nebraska</td>\n",
       "      <td>112</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>West Virginia</td>\n",
       "      <td>107</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Hawaii</td>\n",
       "      <td>99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Louisiana</td>\n",
       "      <td>99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>New Mexico</td>\n",
       "      <td>79</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>Wyoming</td>\n",
       "      <td>78</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>South Dakota</td>\n",
       "      <td>75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>New Hampshire</td>\n",
       "      <td>73</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>Rhode Island</td>\n",
       "      <td>68</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>Vermont</td>\n",
       "      <td>67</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Idaho</td>\n",
       "      <td>67</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>Mississippi</td>\n",
       "      <td>63</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>North Dakota</td>\n",
       "      <td>59</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Maine</td>\n",
       "      <td>58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>Nevada</td>\n",
       "      <td>56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>Montana</td>\n",
       "      <td>42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Delaware</td>\n",
       "      <td>38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Alaska</td>\n",
       "      <td>32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>Washington DC</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             state  unique_app_descriptor_mentions\n",
       "4       California                            1089\n",
       "42           Texas                             711\n",
       "37    Pennsylvania                             656\n",
       "21        Michigan                             538\n",
       "34            Ohio                             486\n",
       "31        New York                             470\n",
       "12        Illinois                             397\n",
       "16        Kentucky                             371\n",
       "13         Indiana                             353\n",
       "20   Massachusetts                             345\n",
       "8          Florida                             332\n",
       "24        Missouri                             316\n",
       "9          Georgia                             293\n",
       "49       Wisconsin                             283\n",
       "0          Alabama                             227\n",
       "41       Tennessee                             224\n",
       "46      Washington                             223\n",
       "35        Oklahoma                             212\n",
       "32  North Carolina                             212\n",
       "29      New Jersey                             201\n",
       "45        Virginia                             194\n",
       "6      Connecticut                             186\n",
       "19        Maryland                             171\n",
       "14            Iowa                             169\n",
       "39  South Carolina                             169\n",
       "5         Colorado                             168\n",
       "22       Minnesota                             164\n",
       "2          Arizona                             160\n",
       "36          Oregon                             160\n",
       "43            Utah                             136\n",
       "15          Kansas                             123\n",
       "3         Arkansas                             120\n",
       "26        Nebraska                             112\n",
       "48   West Virginia                             107\n",
       "10          Hawaii                              99\n",
       "17       Louisiana                              99\n",
       "30      New Mexico                              79\n",
       "50         Wyoming                              78\n",
       "40    South Dakota                              75\n",
       "28   New Hampshire                              73\n",
       "38    Rhode Island                              68\n",
       "44         Vermont                              67\n",
       "11           Idaho                              67\n",
       "23     Mississippi                              63\n",
       "33    North Dakota                              59\n",
       "18           Maine                              58\n",
       "27          Nevada                              56\n",
       "25         Montana                              42\n",
       "7         Delaware                              38\n",
       "1           Alaska                              32\n",
       "47   Washington DC                              16"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#count up the number of unique apparition terms mentioned within the description\n",
    "df['unique_app_descriptor_mentions'] = df['apparition_descriptors'].apply(len)\n",
    "\n",
    "df_grouped_state_app_descriptor = df.groupby(['state'])['unique_app_descriptor_mentions'].sum().reset_index().sort_values(by='unique_app_descriptor_mentions', ascending=False)\n",
    "df_grouped_state_app_descriptor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "4-OCNXjO-By5",
    "outputId": "19f131ce-5bd7-4e65-bb86-40639925b296"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Row: 1, Adj: misty, Apparition: figure\n",
      "Row: 1, Adj: blue, Apparition: figure\n",
      "Row: 7, Adj: strange, Apparition: figure\n",
      "Row: 12, Adj: ghostly, Apparition: figure\n",
      "Row: 19, Adj: unpleasant, Apparition: presence\n",
      "Row: 19, Adj: cold, Apparition: presence\n",
      "Row: 30, Adj: large, Apparition: orb\n",
      "Row: 30, Adj: greenish, Apparition: orb\n",
      "Row: 47, Adj: extra, Apparition: shadow\n",
      "Row: 58, Adj: little, Apparition: ghost\n",
      "Row: 66, Adj: odd, Apparition: presence\n",
      "Row: 79, Adj: real, Apparition: ghost\n",
      "Row: 82, Adj: boy, Apparition: figure\n",
      "Row: 89, Adj: tall, Apparition: figure\n",
      "Row: 98, Adj: other, Apparition: ghost\n",
      "Row: 108, Adj: nail, Apparition: figure\n",
      "Row: 119, Adj: male, Apparition: spirit\n",
      "Row: 127, Adj: male, Apparition: figure\n",
      "Row: 130, Adj: eerie, Apparition: presence\n",
      "Row: 131, Adj: dormitory, Apparition: figure\n",
      "Row: 136, Adj: strange, Apparition: presence\n",
      "Row: 178, Adj: blue, Apparition: apparition\n",
      "Row: 186, Adj: evil, Apparition: presence\n",
      "Row: 191, Adj: shadowy, Apparition: figure\n",
      "Row: 207, Adj: additional, Apparition: ghost\n",
      "Row: 213, Adj: dark, Apparition: figure\n",
      "Row: 213, Adj: shadowy, Apparition: figure\n",
      "Row: 215, Adj: large, Apparition: figure\n",
      "Row: 222, Adj: eerie, Apparition: presence\n",
      "Row: 236, Adj: white, Apparition: mist\n",
      "Row: 246, Adj: disembodied, Apparition: spirit\n",
      "Row: 266, Adj: strange, Apparition: apparition\n",
      "Row: 266, Adj: black, Apparition: apparition\n",
      "Row: 268, Adj: attic, Apparition: figure\n",
      "Row: 322, Adj: heavy, Apparition: presence\n",
      "Row: 335, Adj: manly, Apparition: apparition\n",
      "Row: 336, Adj: such, Apparition: ghost\n",
      "Row: 338, Adj: red, Apparition: figure\n",
      "Row: 340, Adj: strong, Apparition: presence\n",
      "Row: 355, Adj: active, Apparition: spirit\n",
      "Row: 355, Adj: active, Apparition: spirit\n",
      "Row: 368, Adj: ghostly, Apparition: figure\n",
      "Row: 370, Adj: red, Apparition: orb\n",
      "Row: 385, Adj: numerous, Apparition: ghost\n",
      "Row: 410, Adj: free, Apparition: ghost\n",
      "Row: 415, Adj: many, Apparition: orb\n",
      "Row: 420, Adj: ghostly, Apparition: figure\n",
      "Row: 440, Adj: black, Apparition: presence\n",
      "Row: 444, Adj: black, Apparition: shadow\n",
      "Row: 476, Adj: white, Apparition: Spirit\n",
      "Row: 495, Adj: large, Apparition: figure\n",
      "Row: 495, Adj: black, Apparition: figure\n",
      "Row: 495, Adj: strange, Apparition: figure\n",
      "Row: 495, Adj: black, Apparition: figure\n",
      "Row: 501, Adj: blue, Apparition: orb\n",
      "Row: 504, Adj: tall, Apparition: figure\n",
      "Row: 504, Adj: dark, Apparition: figure\n",
      "Row: 519, Adj: strange, Apparition: ghost\n",
      "Row: 519, Adj: friendly, Apparition: ghost\n",
      "Row: 532, Adj: red, Apparition: demon\n",
      "Row: 548, Adj: black, Apparition: shadow\n",
      "Row: 553, Adj: torso, Apparition: apparition\n",
      "Row: 554, Adj: female, Apparition: apparition\n",
      "Row: 589, Adj: strange, Apparition: figure\n",
      "Row: 609, Adj: shadowy, Apparition: figure\n",
      "Row: 611, Adj: famous, Apparition: ghost\n",
      "Row: 623, Adj: short, Apparition: figure\n",
      "Row: 625, Adj: large, Apparition: figure\n",
      "Row: 625, Adj: white, Apparition: figure\n",
      "Row: 631, Adj: likable, Apparition: spirit\n",
      "Row: 639, Adj: young, Apparition: spirit\n",
      "Row: 653, Adj: personal, Apparition: ghost\n",
      "Row: 661, Adj: faint, Apparition: figure\n",
      "Row: 661, Adj: white, Apparition: figure\n",
      "Row: 661, Adj: vengeful, Apparition: spirit\n",
      "Row: 673, Adj: strong, Apparition: presence\n",
      "Row: 682, Adj: shadowy, Apparition: figure\n",
      "Row: 686, Adj: Indian, Apparition: spirit\n",
      "Row: 690, Adj: nun, Apparition: spirit\n",
      "Row: 740, Adj: unknown, Apparition: ghost\n",
      "Row: 756, Adj: tall, Apparition: ghost\n",
      "Row: 758, Adj: second, Apparition: ghost\n",
      "Row: 758, Adj: last, Apparition: ghost\n",
      "Row: 762, Adj: white, Apparition: figure\n",
      "Row: 773, Adj: bad, Apparition: presence\n",
      "Row: 801, Adj: black, Apparition: entity\n",
      "Row: 802, Adj: ghostly, Apparition: figure\n",
      "Row: 805, Adj: tall, Apparition: figure\n",
      "Row: 810, Adj: white, Apparition: figure\n",
      "Row: 842, Adj: ghostly, Apparition: figure\n",
      "Row: 843, Adj: only, Apparition: ghost\n",
      "Row: 849, Adj: mysterious, Apparition: figure\n",
      "Row: 903, Adj: several, Apparition: ghost\n",
      "Row: 909, Adj: covered, Apparition: mist\n",
      "Row: 909, Adj: orbs, Apparition: mist\n",
      "Row: 910, Adj: helpful, Apparition: ghost\n",
      "Row: 911, Adj: full, Apparition: figure\n",
      "Row: 917, Adj: Indian, Apparition: presence\n",
      "Row: 923, Adj: Other, Apparition: ghost\n",
      "Row: 947, Adj: ghostly, Apparition: presence\n",
      "Row: 955, Adj: protective, Apparition: presence\n",
      "Row: 955, Adj: many, Apparition: presence\n",
      "Row: 955, Adj: dust, Apparition: Poltergeist\n",
      "Row: 958, Adj: prominent, Apparition: spirit\n",
      "Row: 969, Adj: misty, Apparition: apparition\n",
      "Row: 970, Adj: bluish, Apparition: mist\n",
      "Row: 987, Adj: several, Apparition: mist\n",
      "Row: 995, Adj: cold, Apparition: poltergeist\n",
      "Row: 1004, Adj: other, Apparition: ghost\n",
      "Row: 1026, Adj: unknown, Apparition: spirit\n",
      "Row: 1027, Adj: old, Apparition: ghost\n",
      "Row: 1027, Adj: ghostly, Apparition: figure\n",
      "Row: 1031, Adj: least, Apparition: ghost\n",
      "Row: 1031, Adj: other, Apparition: ghost\n",
      "Row: 1057, Adj: invisible, Apparition: entity\n",
      "Row: 1085, Adj: menacing, Apparition: spirit\n",
      "Row: 1086, Adj: white, Apparition: apparition\n",
      "Row: 1117, Adj: heavy, Apparition: mist\n",
      "Row: 1120, Adj: outside, Apparition: Ghost\n",
      "Row: 1121, Adj: light, Apparition: figure\n",
      "Row: 1121, Adj: misty, Apparition: figure\n",
      "Row: 1138, Adj: ghostly, Apparition: presence\n",
      "Row: 1139, Adj: ghostly, Apparition: presence\n",
      "Row: 1148, Adj: white, Apparition: figure\n",
      "Row: 1155, Adj: third, Apparition: spirit\n",
      "Row: 1179, Adj: angry, Apparition: ghost\n",
      "Row: 1197, Adj: rumored, Apparition: ghost\n",
      "Row: 1202, Adj: strange, Apparition: mist\n",
      "Row: 1209, Adj: white, Apparition: figure\n",
      "Row: 1209, Adj: furry, Apparition: figure\n",
      "Row: 1209, Adj: running, Apparition: figure\n",
      "Row: 1210, Adj: friendly, Apparition: ghost\n",
      "Row: 1233, Adj: white, Apparition: figure\n",
      "Row: 1246, Adj: unpleasant, Apparition: presence\n",
      "Row: 1253, Adj: old, Apparition: ghost\n",
      "Row: 1255, Adj: portal, Apparition: poltergeist\n",
      "Row: 1265, Adj: strong, Apparition: presence\n",
      "Row: 1265, Adj: negative, Apparition: presence\n",
      "Row: 1273, Adj: black, Apparition: spirit\n",
      "Row: 1280, Adj: aggressive, Apparition: presence\n",
      "Row: 1283, Adj: male, Apparition: apparition\n",
      "Row: 1294, Adj: black, Apparition: figure\n",
      "Row: 1299, Adj: ghostly, Apparition: figure\n",
      "Row: 1307, Adj: strange, Apparition: mist\n",
      "Row: 1312, Adj: attic, Apparition: ghost\n",
      "Row: 1329, Adj: large, Apparition: figure\n",
      "Row: 1329, Adj: religious, Apparition: figure\n",
      "Row: 1336, Adj: young, Apparition: ghost\n",
      "Row: 1347, Adj: Strong, Apparition: presence\n",
      "Row: 1347, Adj: malevolent, Apparition: entity\n",
      "Row: 1351, Adj: occasional, Apparition: mist\n",
      "Row: 1352, Adj: strong, Apparition: presence\n",
      "Row: 1352, Adj: malicious, Apparition: presence\n",
      "Row: 1353, Adj: spiritual, Apparition: presence\n",
      "Row: 1353, Adj: stronger, Apparition: presence\n",
      "Row: 1359, Adj: weird, Apparition: figure\n",
      "Row: 1361, Adj: eerie, Apparition: shadow\n",
      "Row: 1369, Adj: violent, Apparition: ghost\n",
      "Row: 1369, Adj: freaky, Apparition: presence\n",
      "Row: 1389, Adj: malignant, Apparition: spirit\n",
      "Row: 1394, Adj: hooded, Apparition: figure\n",
      "Row: 1402, Adj: black, Apparition: figure\n",
      "Row: 1409, Adj: unknown, Apparition: spirit\n",
      "Row: 1435, Adj: green, Apparition: ghost\n",
      "Row: 1450, Adj: hard, Apparition: figure\n",
      "Row: 1452, Adj: gray, Apparition: ghost\n",
      "Row: 1472, Adj: blue, Apparition: mist\n",
      "Row: 1484, Adj: female, Apparition: ghost\n",
      "Row: 1490, Adj: white, Apparition: figure\n",
      "Row: 1513, Adj: friendly, Apparition: spirit\n",
      "Row: 1540, Adj: white, Apparition: figure\n",
      "Row: 1540, Adj: cloaked, Apparition: figure\n",
      "Row: 1557, Adj: friendly, Apparition: spirit\n",
      "Row: 1560, Adj: evil, Apparition: presence\n",
      "Row: 1561, Adj: peaceful, Apparition: ghost\n",
      "Row: 1583, Adj: unknown, Apparition: ghost\n",
      "Row: 1583, Adj: friendly, Apparition: ghost\n",
      "Row: 1587, Adj: mysterious, Apparition: ghost\n",
      "Row: 1587, Adj: darkened, Apparition: figure\n",
      "Row: 1587, Adj: various, Apparition: figure\n",
      "Row: 1595, Adj: library, Apparition: ghost\n",
      "Row: 1602, Adj: cloaked, Apparition: figure\n",
      "Row: 1614, Adj: strong, Apparition: presence\n",
      "Row: 1659, Adj: black, Apparition: figure\n",
      "Row: 1659, Adj: black, Apparition: shadow\n",
      "Row: 1692, Adj: shaped, Apparition: spirit\n",
      "Row: 1692, Adj: mischievous, Apparition: spirit\n",
      "Row: 1706, Adj: full, Apparition: apparition\n",
      "Row: 1709, Adj: white, Apparition: witch\n",
      "Row: 1709, Adj: young, Apparition: ghost\n",
      "Row: 1709, Adj: white, Apparition: witch\n",
      "Row: 1709, Adj: common, Apparition: ghost\n",
      "Row: 1711, Adj: strong, Apparition: presence\n",
      "Row: 1738, Adj: white, Apparition: apparition\n",
      "Row: 1757, Adj: female, Apparition: spirit\n",
      "Row: 1758, Adj: final, Apparition: ghost\n",
      "Row: 1769, Adj: invisible, Apparition: presence\n",
      "Row: 1789, Adj: grey, Apparition: ghost\n",
      "Row: 1796, Adj: late, Apparition: spirit\n",
      "Row: 1803, Adj: full, Apparition: apparition\n",
      "Row: 1803, Adj: visible, Apparition: ghost\n",
      "Row: 1803, Adj: playful, Apparition: ghost\n",
      "Row: 1804, Adj: hooded, Apparition: figure\n",
      "Row: 1804, Adj: popular, Apparition: ghost\n",
      "Row: 1807, Adj: black, Apparition: figure\n",
      "Row: 1825, Adj: wild, Apparition: ghost\n",
      "Row: 1829, Adj: several, Apparition: ghost\n",
      "Row: 1830, Adj: angry, Apparition: ghost\n",
      "Row: 1835, Adj: white, Apparition: figure\n",
      "Row: 1839, Adj: playful, Apparition: spirit\n",
      "Row: 1839, Adj: likely, Apparition: spirit\n",
      "Row: 1841, Adj: particular, Apparition: figure\n",
      "Row: 1845, Adj: glowing, Apparition: figure\n",
      "Row: 1850, Adj: white, Apparition: figure\n",
      "Row: 1850, Adj: dark, Apparition: shadow\n",
      "Row: 1871, Adj: male, Apparition: figure\n",
      "Row: 1888, Adj: custodian, Apparition: ghost\n",
      "Row: 1892, Adj: teenage, Apparition: presence\n",
      "Row: 1904, Adj: ghostly, Apparition: figure\n",
      "Row: 1906, Adj: cold, Apparition: presence\n",
      "Row: 1906, Adj: random, Apparition: presence\n",
      "Row: 1907, Adj: unseen, Apparition: spirit\n",
      "Row: 1928, Adj: female, Apparition: ghost\n",
      "Row: 1935, Adj: shadowy, Apparition: figure\n",
      "Row: 1947, Adj: ectoplasm, Apparition: mist\n",
      "Row: 1969, Adj: general, Apparition: ghost\n",
      "Row: 1980, Adj: eerie, Apparition: presence\n",
      "Row: 1980, Adj: second, Apparition: presence\n",
      "Row: 1980, Adj: unknown, Apparition: presence\n",
      "Row: 1980, Adj: large, Apparition: orb\n",
      "Row: 1980, Adj: right, Apparition: orb\n",
      "Row: 1996, Adj: Strong, Apparition: presence\n",
      "Row: 2020, Adj: young, Apparition: spirit\n",
      "Row: 2025, Adj: gray, Apparition: figure\n",
      "Row: 2025, Adj: directional, Apparition: shadow\n",
      "Row: 2028, Adj: hazy, Apparition: apparition\n",
      "Row: 2036, Adj: shadowy, Apparition: figure\n",
      "Row: 2043, Adj: mysterious, Apparition: ghost\n",
      "Row: 2053, Adj: young, Apparition: ghost\n",
      "Row: 2061, Adj: human, Apparition: figure\n",
      "Row: 2097, Adj: active, Apparition: ghost\n",
      "Row: 2115, Adj: mischievous, Apparition: ghost\n",
      "Row: 2148, Adj: small, Apparition: ghost\n",
      "Row: 2150, Adj: blue, Apparition: mist\n",
      "Row: 2151, Adj: whitish, Apparition: figure\n",
      "Row: 2159, Adj: shadowy, Apparition: figure\n",
      "Row: 2159, Adj: shadowy, Apparition: figure\n",
      "Row: 2169, Adj: cold, Apparition: presence\n",
      "Row: 2169, Adj: unknown, Apparition: presence\n",
      "Row: 2170, Adj: angry, Apparition: spirit\n",
      "Row: 2180, Adj: ghostly, Apparition: apparition\n",
      "Row: 2181, Adj: negative, Apparition: presence\n",
      "Row: 2203, Adj: eerie, Apparition: ghost\n",
      "Row: 2208, Adj: weird, Apparition: presence\n",
      "Row: 2209, Adj: ominous, Apparition: presence\n",
      "Row: 2218, Adj: dangerous, Apparition: ghost\n",
      "Row: 2221, Adj: second, Apparition: ghost\n",
      "Row: 2221, Adj: third, Apparition: ghost\n",
      "Row: 2221, Adj: angry, Apparition: ghost\n",
      "Row: 2223, Adj: ghostly, Apparition: figure\n",
      "Row: 2228, Adj: few, Apparition: ghost\n",
      "Row: 2228, Adj: different, Apparition: ghost\n",
      "Row: 2233, Adj: insane, Apparition: presence\n",
      "Row: 2268, Adj: former, Apparition: Ghost\n",
      "Row: 2272, Adj: unknown, Apparition: entity\n",
      "Row: 2275, Adj: unknown, Apparition: entity\n",
      "Row: 2276, Adj: threatening, Apparition: presence\n",
      "Row: 2284, Adj: ghostly, Apparition: apparition\n",
      "Row: 2296, Adj: strange, Apparition: presence\n",
      "Row: 2303, Adj: evil, Apparition: entity\n",
      "Row: 2312, Adj: black, Apparition: figure\n",
      "Row: 2317, Adj: old, Apparition: witch\n",
      "Row: 2321, Adj: large, Apparition: orb\n",
      "Row: 2324, Adj: female, Apparition: ghost\n",
      "Row: 2328, Adj: female, Apparition: ghost\n",
      "Row: 2343, Adj: strange, Apparition: presence\n",
      "Row: 2355, Adj: large, Apparition: presence\n",
      "Row: 2358, Adj: ominous, Apparition: presence\n",
      "Row: 2363, Adj: green, Apparition: mist\n",
      "Row: 2365, Adj: menacing, Apparition: figure\n",
      "Row: 2368, Adj: strange, Apparition: presence\n",
      "Row: 2368, Adj: white, Apparition: figure\n",
      "Row: 2368, Adj: shadowy, Apparition: figure\n",
      "Row: 2445, Adj: actual, Apparition: ghost\n",
      "Row: 2449, Adj: nervous, Apparition: entity\n",
      "Row: 2484, Adj: white, Apparition: mist\n",
      "Row: 2491, Adj: next, Apparition: spirit\n",
      "Row: 2496, Adj: indistinct, Apparition: shadow\n",
      "Row: 2499, Adj: mischievous, Apparition: spirit\n",
      "Row: 2504, Adj: female, Apparition: ghost\n",
      "Row: 2559, Adj: black, Apparition: shadow\n",
      "Row: 2559, Adj: red, Apparition: shadow\n",
      "Row: 2561, Adj: ill, Apparition: ghost\n",
      "Row: 2561, Adj: patient, Apparition: ghost\n",
      "Row: 2563, Adj: ghostly, Apparition: figure\n",
      "Row: 2564, Adj: black, Apparition: apparition\n",
      "Row: 2565, Adj: real, Apparition: ghost\n",
      "Row: 2570, Adj: unexplained, Apparition: ghost\n",
      "Row: 2585, Adj: orbs, Apparition: orb\n",
      "Row: 2592, Adj: several, Apparition: ghost\n",
      "Row: 2607, Adj: Many, Apparition: poltergeist\n",
      "Row: 2620, Adj: much, Apparition: ghost\n",
      "Row: 2620, Adj: white, Apparition: spirit\n",
      "Row: 2679, Adj: resident, Apparition: ghost\n",
      "Row: 2679, Adj: white, Apparition: figure\n",
      "Row: 2689, Adj: unknown, Apparition: presence\n",
      "Row: 2699, Adj: evil, Apparition: entity\n",
      "Row: 2703, Adj: particular, Apparition: spirit\n",
      "Row: 2713, Adj: hooded, Apparition: shadow\n",
      "Row: 2716, Adj: male, Apparition: figure\n",
      "Row: 2720, Adj: friendly, Apparition: spirit\n",
      "Row: 2723, Adj: large, Apparition: apparition\n",
      "Row: 2723, Adj: black, Apparition: apparition\n",
      "Row: 2742, Adj: whitish, Apparition: figure\n",
      "Row: 2742, Adj: grey, Apparition: figure\n",
      "Row: 2750, Adj: unknown, Apparition: spirit\n",
      "Row: 2767, Adj: white, Apparition: figure\n",
      "Row: 2769, Adj: black, Apparition: figure\n",
      "Row: 2769, Adj: other, Apparition: figure\n",
      "Row: 2784, Adj: white, Apparition: figure\n",
      "Row: 2785, Adj: other, Apparition: presence\n",
      "Row: 2797, Adj: ghostly, Apparition: figure\n",
      "Row: 2811, Adj: several, Apparition: ghost\n",
      "Row: 2818, Adj: other, Apparition: witch\n",
      "Row: 2826, Adj: active, Apparition: spirit\n",
      "Row: 2830, Adj: human, Apparition: figure\n",
      "Row: 2831, Adj: playful, Apparition: phantom\n",
      "Row: 2833, Adj: eerie, Apparition: presence\n",
      "Row: 2839, Adj: playful, Apparition: spirit\n",
      "Row: 2839, Adj: other, Apparition: spirit\n",
      "Row: 2839, Adj: heavy, Apparition: presence\n",
      "Row: 2850, Adj: ghostly, Apparition: figure\n",
      "Row: 2852, Adj: running, Apparition: figure\n",
      "Row: 2868, Adj: benevolent, Apparition: spirit\n",
      "Row: 2869, Adj: headless, Apparition: apparition\n",
      "Row: 2870, Adj: dark, Apparition: apparition\n",
      "Row: 2876, Adj: black, Apparition: mist\n",
      "Row: 2878, Adj: shadowy, Apparition: figure\n",
      "Row: 2880, Adj: female, Apparition: apparition\n",
      "Row: 2886, Adj: tall, Apparition: ghost\n",
      "Row: 2887, Adj: female, Apparition: ghost\n",
      "Row: 2891, Adj: dark, Apparition: figure\n",
      "Row: 2897, Adj: strange, Apparition: figure\n",
      "Row: 2910, Adj: black, Apparition: figure\n",
      "Row: 2910, Adj: misty, Apparition: figure\n",
      "Row: 2912, Adj: whitish, Apparition: apparition\n",
      "Row: 2918, Adj: female, Apparition: spirit\n",
      "Row: 2934, Adj: former, Apparition: ghost\n",
      "Row: 2940, Adj: certain, Apparition: presence\n",
      "Row: 2946, Adj: glowing, Apparition: figure\n",
      "Row: 2963, Adj: definite, Apparition: presence\n",
      "Row: 2965, Adj: strange, Apparition: presence\n",
      "Row: 2987, Adj: female, Apparition: figure\n",
      "Row: 2997, Adj: strong, Apparition: presence\n",
      "Row: 3002, Adj: heavy, Apparition: presence\n",
      "Row: 3002, Adj: negative, Apparition: presence\n",
      "Row: 3002, Adj: angry, Apparition: presence\n",
      "Row: 3006, Adj: shadowy, Apparition: figure\n",
      "Row: 3016, Adj: high, Apparition: presence\n",
      "Row: 3019, Adj: third, Apparition: spirit\n",
      "Row: 3021, Adj: cloaked, Apparition: figure\n",
      "Row: 3021, Adj: evil, Apparition: figure\n",
      "Row: 3032, Adj: friendly, Apparition: ghost\n",
      "Row: 3034, Adj: specific, Apparition: ghost\n",
      "Row: 3038, Adj: shadowy, Apparition: figure\n",
      "Row: 3038, Adj: evil, Apparition: spirit\n",
      "Row: 3040, Adj: floating, Apparition: figure\n",
      "Row: 3049, Adj: heavyset, Apparition: spirit\n",
      "Row: 3054, Adj: gear, Apparition: ghost\n",
      "Row: 3067, Adj: many, Apparition: ghost\n",
      "Row: 3068, Adj: many, Apparition: ghost\n",
      "Row: 3070, Adj: favorite, Apparition: ghost\n",
      "Row: 3081, Adj: strange, Apparition: presence\n",
      "Row: 3088, Adj: many, Apparition: ghost\n",
      "Row: 3089, Adj: Unexplainable, Apparition: Figure\n",
      "Row: 3142, Adj: dark, Apparition: figure\n",
      "Row: 3150, Adj: strong, Apparition: presence\n",
      "Row: 3164, Adj: male, Apparition: ghost\n",
      "Row: 3177, Adj: Strange, Apparition: presence\n",
      "Row: 3206, Adj: tall, Apparition: figure\n",
      "Row: 3239, Adj: many, Apparition: orb\n",
      "Row: 3241, Adj: ghostly, Apparition: figure\n",
      "Row: 3257, Adj: green, Apparition: apparition\n",
      "Row: 3294, Adj: violent, Apparition: presence\n",
      "Row: 3301, Adj: big, Apparition: shadow\n",
      "Row: 3301, Adj: black, Apparition: shadow\n",
      "Row: 3306, Adj: floating, Apparition: mist\n",
      "Row: 3313, Adj: old, Apparition: witch\n",
      "Row: 3329, Adj: classic, Apparition: ghost\n",
      "Row: 3385, Adj: elderly, Apparition: ghost\n",
      "Row: 3404, Adj: dark, Apparition: figure\n",
      "Row: 3404, Adj: shadowy, Apparition: figure\n",
      "Row: 3406, Adj: unknown, Apparition: spirit\n",
      "Row: 3421, Adj: small, Apparition: figure\n",
      "Row: 3423, Adj: several, Apparition: ghost\n",
      "Row: 3423, Adj: mild, Apparition: poltergeist\n",
      "Row: 3431, Adj: human, Apparition: figure\n",
      "Row: 3444, Adj: white, Apparition: figure\n",
      "Row: 3444, Adj: human, Apparition: figure\n",
      "Row: 3450, Adj: many, Apparition: Ghost\n",
      "Row: 3456, Adj: occasional, Apparition: poltergeist\n",
      "Row: 3459, Adj: female, Apparition: ghost\n",
      "Row: 3467, Adj: white, Apparition: poltergeist\n",
      "Row: 3474, Adj: black, Apparition: figure\n",
      "Row: 3505, Adj: early, Apparition: Ghost\n",
      "Row: 3506, Adj: less, Apparition: ghost\n",
      "Row: 3508, Adj: activty, Apparition: ghost\n",
      "Row: 3512, Adj: Numerous, Apparition: Ghost\n",
      "Row: 3523, Adj: foggy, Apparition: figure\n",
      "Row: 3530, Adj: friendly, Apparition: ghost\n",
      "Row: 3531, Adj: friendly, Apparition: ghost\n",
      "Row: 3534, Adj: white, Apparition: figure\n",
      "Row: 3534, Adj: blue, Apparition: figure\n",
      "Row: 3551, Adj: tall, Apparition: figure\n",
      "Row: 3551, Adj: black, Apparition: figure\n",
      "Row: 3569, Adj: red, Apparition: orb\n",
      "Row: 3576, Adj: second, Apparition: ghost\n",
      "Row: 3576, Adj: black, Apparition: shadow\n",
      "Row: 3577, Adj: unknown, Apparition: Ghost\n",
      "Row: 3600, Adj: vengeful, Apparition: ghost\n",
      "Row: 3606, Adj: dark, Apparition: figure\n",
      "Row: 3616, Adj: close, Apparition: presence\n",
      "Row: 3618, Adj: ghostly, Apparition: figure\n",
      "Row: 3629, Adj: gray, Apparition: orb\n",
      "Row: 3635, Adj: unknown, Apparition: entity\n",
      "Row: 3635, Adj: evil, Apparition: presence\n",
      "Row: 3643, Adj: strange, Apparition: figure\n",
      "Row: 3650, Adj: shadowy, Apparition: figure\n",
      "Row: 3650, Adj: black, Apparition: figure\n",
      "Row: 3669, Adj: local, Apparition: ghost\n",
      "Row: 3683, Adj: other, Apparition: spirit\n",
      "Row: 3685, Adj: frightful, Apparition: apparition\n",
      "Row: 3691, Adj: former, Apparition: ghost\n",
      "Row: 3697, Adj: heavy, Apparition: presence\n",
      "Row: 3705, Adj: infamous, Apparition: Ghost\n",
      "Row: 3716, Adj: female, Apparition: apparition\n",
      "Row: 3717, Adj: unknown, Apparition: spirit\n",
      "Row: 3721, Adj: black, Apparition: phantom\n",
      "Row: 3734, Adj: eerie, Apparition: presence\n",
      "Row: 3740, Adj: yellow, Apparition: orb\n",
      "Row: 3740, Adj: light, Apparition: orb\n",
      "Row: 3760, Adj: old, Apparition: ghost\n",
      "Row: 3760, Adj: Indian, Apparition: ghost\n",
      "Row: 3768, Adj: early, Apparition: ghost\n",
      "Row: 3770, Adj: ghostly, Apparition: figure\n",
      "Row: 3779, Adj: strange, Apparition: presence\n",
      "Row: 3782, Adj: tall, Apparition: figure\n",
      "Row: 3782, Adj: black, Apparition: figure\n",
      "Row: 3789, Adj: eerie, Apparition: presence\n",
      "Row: 3795, Adj: female, Apparition: figure\n",
      "Row: 3801, Adj: black, Apparition: presence\n",
      "Row: 3801, Adj: evil, Apparition: presence\n",
      "Row: 3817, Adj: many, Apparition: ghost\n",
      "Row: 3818, Adj: female, Apparition: ghost\n",
      "Row: 3829, Adj: shadowy, Apparition: figure\n",
      "Row: 3841, Adj: headless, Apparition: figure\n",
      "Row: 3845, Adj: unknown, Apparition: spirit\n",
      "Row: 3852, Adj: strange, Apparition: presence\n",
      "Row: 3859, Adj: believed, Apparition: ghost\n",
      "Row: 3866, Adj: particular, Apparition: ghost\n",
      "Row: 3868, Adj: helpful, Apparition: ghost\n",
      "Row: 3871, Adj: hateful, Apparition: spirit\n",
      "Row: 3872, Adj: same, Apparition: Spirit\n",
      "Row: 3873, Adj: physical, Apparition: presence\n",
      "Row: 3899, Adj: little, Apparition: spirit\n",
      "Row: 3899, Adj: girl, Apparition: spirit\n",
      "Row: 3904, Adj: definite, Apparition: presence\n",
      "Row: 3928, Adj: white, Apparition: figure\n",
      "Row: 3929, Adj: tall, Apparition: shadow\n",
      "Row: 3951, Adj: specific, Apparition: ghost\n",
      "Row: 3965, Adj: male, Apparition: figure\n",
      "Row: 3979, Adj: charred, Apparition: phantom\n",
      "Row: 3985, Adj: shadow, Apparition: figure\n",
      "Row: 3987, Adj: tall, Apparition: figure\n",
      "Row: 3996, Adj: tall, Apparition: figure\n",
      "Row: 4026, Adj: strange, Apparition: figure\n",
      "Row: 4026, Adj: white, Apparition: figure\n",
      "Row: 4051, Adj: empty, Apparition: ghost\n",
      "Row: 4052, Adj: shadowy, Apparition: figure\n",
      "Row: 4068, Adj: numerous, Apparition: ghost\n",
      "Row: 4068, Adj: true, Apparition: ghost\n",
      "Row: 4077, Adj: black, Apparition: figure\n",
      "Row: 4096, Adj: restless, Apparition: specter\n",
      "Row: 4098, Adj: other, Apparition: ghost\n",
      "Row: 4105, Adj: headless, Apparition: figure\n",
      "Row: 4111, Adj: misty, Apparition: figure\n",
      "Row: 4117, Adj: tall, Apparition: figure\n",
      "Row: 4127, Adj: shadowy, Apparition: figure\n",
      "Row: 4132, Adj: whit, Apparition: figure\n",
      "Row: 4132, Adj: misty, Apparition: figure\n",
      "Row: 4138, Adj: best, Apparition: ghost\n",
      "Row: 4142, Adj: many, Apparition: presence\n",
      "Row: 4163, Adj: young, Apparition: ghost\n",
      "Row: 4187, Adj: strange, Apparition: shadow\n",
      "Row: 4194, Adj: shadowy, Apparition: figure\n",
      "Row: 4199, Adj: strange, Apparition: presence\n",
      "Row: 4216, Adj: first, Apparition: ghost\n",
      "Row: 4216, Adj: second, Apparition: ghost\n",
      "Row: 4216, Adj: ghostly, Apparition: apparition\n",
      "Row: 4217, Adj: much, Apparition: spirit\n",
      "Row: 4217, Adj: male, Apparition: entity\n",
      "Row: 4218, Adj: young, Apparition: ghost\n",
      "Row: 4222, Adj: dramatic, Apparition: presence\n",
      "Row: 4228, Adj: dark, Apparition: figure\n",
      "Row: 4237, Adj: green, Apparition: orb\n",
      "Row: 4250, Adj: angry, Apparition: spirit\n",
      "Row: 4269, Adj: friendly, Apparition: ghost\n",
      "Row: 4296, Adj: little, Apparition: ghost\n",
      "Row: 4296, Adj: deserted, Apparition: ghost\n",
      "Row: 4311, Adj: cold, Apparition: Mist\n",
      "Row: 4317, Adj: male, Apparition: figure\n",
      "Row: 4321, Adj: mischievous, Apparition: ghost\n",
      "Row: 4329, Adj: white, Apparition: figure\n",
      "Row: 4340, Adj: dense, Apparition: mist\n",
      "Row: 4373, Adj: small, Apparition: figure\n",
      "Row: 4402, Adj: Went, Apparition: Ghost\n",
      "Row: 4403, Adj: several, Apparition: presence\n",
      "Row: 4408, Adj: white, Apparition: mist\n",
      "Row: 4418, Adj: dark, Apparition: figure\n",
      "Row: 4425, Adj: constant, Apparition: mist\n",
      "Row: 4440, Adj: full, Apparition: apparition\n",
      "Row: 4452, Adj: friendly, Apparition: spirit\n",
      "Row: 4460, Adj: peaceful, Apparition: spirit\n",
      "Row: 4467, Adj: negative, Apparition: presence\n",
      "Row: 4475, Adj: strange, Apparition: shadow\n",
      "Row: 4482, Adj: occassional, Apparition: apparition\n",
      "Row: 4490, Adj: mad, Apparition: ghost\n",
      "Row: 4490, Adj: old, Apparition: ghost\n",
      "Row: 4513, Adj: male, Apparition: figure\n",
      "Row: 4516, Adj: separate, Apparition: entity\n",
      "Row: 4520, Adj: hooded, Apparition: figure\n",
      "Row: 4522, Adj: early, Apparition: ghost\n",
      "Row: 4533, Adj: Other, Apparition: presence\n",
      "Row: 4533, Adj: second, Apparition: ghost\n",
      "Row: 4571, Adj: more, Apparition: shadow\n",
      "Row: 4571, Adj: only, Apparition: ghost\n",
      "Row: 4578, Adj: aggressive, Apparition: presence\n",
      "Row: 4579, Adj: old, Apparition: ghost\n",
      "Row: 4585, Adj: old, Apparition: phantom\n",
      "Row: 4606, Adj: friendly, Apparition: spirit\n",
      "Row: 4607, Adj: mild, Apparition: poltergeist\n",
      "Row: 4607, Adj: strange, Apparition: poltergeist\n",
      "Row: 4612, Adj: female, Apparition: ghost\n",
      "Row: 4631, Adj: little, Apparition: Ghost\n",
      "Row: 4631, Adj: black, Apparition: Ghost\n",
      "Row: 4640, Adj: legendary, Apparition: ghost\n",
      "Row: 4656, Adj: male, Apparition: ghost\n",
      "Row: 4664, Adj: black, Apparition: figure\n",
      "Row: 4671, Adj: good, Apparition: ghost\n",
      "Row: 4688, Adj: neutral, Apparition: ghost\n",
      "Row: 4701, Adj: sad, Apparition: ghost\n",
      "Row: 4711, Adj: white, Apparition: figure\n",
      "Row: 4742, Adj: bodily, Apparition: figure\n",
      "Row: 4777, Adj: late, Apparition: presence\n",
      "Row: 4795, Adj: enormous, Apparition: orb\n",
      "Row: 4813, Adj: cold, Apparition: presence\n",
      "Row: 4824, Adj: numerous, Apparition: ghost\n",
      "Row: 4827, Adj: hazy, Apparition: figure\n",
      "Row: 4836, Adj: evil, Apparition: spirit\n",
      "Row: 4841, Adj: pearl, Apparition: ghost\n",
      "Row: 4855, Adj: historical, Apparition: presence\n",
      "Row: 4855, Adj: outside, Apparition: presence\n",
      "Row: 4861, Adj: female, Apparition: ghost\n",
      "Row: 4864, Adj: ghostly, Apparition: figure\n",
      "Row: 4876, Adj: cold, Apparition: presence\n",
      "Row: 4881, Adj: various, Apparition: ghost\n",
      "Row: 4883, Adj: hazy, Apparition: figure\n",
      "Row: 4914, Adj: malicious, Apparition: ghost\n",
      "Row: 4927, Adj: phantom, Apparition: ghost\n",
      "Row: 4940, Adj: shadowy, Apparition: figure\n",
      "Row: 4979, Adj: strange, Apparition: presence\n",
      "Row: 4988, Adj: former, Apparition: presence\n",
      "Row: 4995, Adj: strange, Apparition: presence\n",
      "Row: 4995, Adj: much, Apparition: ghost\n",
      "Row: 5002, Adj: different, Apparition: ghost\n",
      "Row: 5003, Adj: strange, Apparition: presence\n",
      "Row: 5003, Adj: male, Apparition: presence\n",
      "Row: 5016, Adj: female, Apparition: ghost\n",
      "Row: 5016, Adj: other, Apparition: poltergeist\n",
      "Row: 5026, Adj: dense, Apparition: mist\n",
      "Row: 5027, Adj: little, Apparition: witch\n",
      "Row: 5031, Adj: present, Apparition: ghost\n",
      "Row: 5044, Adj: female, Apparition: ghost\n",
      "Row: 5075, Adj: scary, Apparition: presence\n",
      "Row: 5082, Adj: possible, Apparition: demon\n",
      "Row: 5100, Adj: female, Apparition: apparition\n",
      "Row: 5114, Adj: unidentified, Apparition: ghost\n",
      "Row: 5127, Adj: black, Apparition: shadow\n",
      "Row: 5127, Adj: glowing, Apparition: figure\n",
      "Row: 5140, Adj: unknown, Apparition: figure\n",
      "Row: 5143, Adj: mysterious, Apparition: figure\n",
      "Row: 5162, Adj: ghostly, Apparition: figure\n",
      "Row: 5186, Adj: elemental, Apparition: spirit\n",
      "Row: 5200, Adj: real, Apparition: witch\n",
      "Row: 5210, Adj: various, Apparition: orb\n",
      "Row: 5211, Adj: friendly, Apparition: ghost\n",
      "Row: 5247, Adj: strange, Apparition: figure\n",
      "Row: 5266, Adj: portal, Apparition: spirit\n",
      "Row: 5274, Adj: mysterious, Apparition: presence\n",
      "Row: 5277, Adj: shadowy, Apparition: figure\n",
      "Row: 5292, Adj: gaudian, Apparition: spirit\n",
      "Row: 5294, Adj: occasional, Apparition: apparition\n",
      "Row: 5299, Adj: different, Apparition: ghost\n",
      "Row: 5308, Adj: spiritual, Apparition: presence\n",
      "Row: 5310, Adj: local, Apparition: witch\n",
      "Row: 5333, Adj: restless, Apparition: spirit\n",
      "Row: 5335, Adj: Amateur, Apparition: ghost\n",
      "Row: 5340, Adj: unidentified, Apparition: ghost\n",
      "Row: 5345, Adj: young, Apparition: ghost\n",
      "Row: 5396, Adj: bother, Apparition: ghost\n",
      "Row: 5430, Adj: dark, Apparition: figure\n",
      "Row: 5432, Adj: large, Apparition: shadow\n",
      "Row: 5439, Adj: black, Apparition: figure\n",
      "Row: 5441, Adj: unknown, Apparition: shadow\n",
      "Row: 5442, Adj: old, Apparition: presence\n",
      "Row: 5443, Adj: white, Apparition: figure\n",
      "Row: 5449, Adj: shadowy, Apparition: figure\n",
      "Row: 5486, Adj: disembodied, Apparition: spirit\n",
      "Row: 5502, Adj: male, Apparition: ghost\n",
      "Row: 5521, Adj: cold, Apparition: ghost\n",
      "Row: 5521, Adj: orbs, Apparition: ghost\n",
      "Row: 5521, Adj: little, Apparition: ghost\n",
      "Row: 5565, Adj: little, Apparition: ghost\n",
      "Row: 5571, Adj: glowing, Apparition: figure\n",
      "Row: 5584, Adj: active, Apparition: spirit\n",
      "Row: 5584, Adj: Many, Apparition: spirit\n",
      "Row: 5600, Adj: rushes, Apparition: Figure\n",
      "Row: 5620, Adj: early, Apparition: witch\n",
      "Row: 5620, Adj: ghostly, Apparition: figure\n",
      "Row: 5626, Adj: bad, Apparition: ghost\n",
      "Row: 5637, Adj: many, Apparition: Apparition\n",
      "Row: 5639, Adj: ghostly, Apparition: figure\n",
      "Row: 5664, Adj: particular, Apparition: ghost\n",
      "Row: 5685, Adj: ectoplasm, Apparition: mist\n",
      "Row: 5697, Adj: large, Apparition: figure\n",
      "Row: 5697, Adj: black, Apparition: figure\n",
      "Row: 5703, Adj: evil, Apparition: entity\n",
      "Row: 5706, Adj: other, Apparition: figure\n",
      "Row: 5706, Adj: main, Apparition: figure\n",
      "Row: 5713, Adj: soldier, Apparition: ghost\n",
      "Row: 5719, Adj: only, Apparition: ghost\n",
      "Row: 5719, Adj: same, Apparition: ghost\n",
      "Row: 5724, Adj: white, Apparition: figure\n",
      "Row: 5725, Adj: white, Apparition: figure\n",
      "Row: 5726, Adj: lingering, Apparition: presence\n",
      "Row: 5731, Adj: upper, Apparition: witch\n",
      "Row: 5734, Adj: long, Apparition: figure\n",
      "Row: 5734, Adj: dead, Apparition: figure\n",
      "Row: 5760, Adj: unknown, Apparition: presence\n",
      "Row: 5760, Adj: male, Apparition: presence\n",
      "Row: 5768, Adj: former, Apparition: ghost\n",
      "Row: 5768, Adj: strange, Apparition: presence\n",
      "Row: 5771, Adj: large, Apparition: orb\n",
      "Row: 5789, Adj: many, Apparition: ghost\n",
      "Row: 5825, Adj: ghostly, Apparition: apparition\n",
      "Row: 5838, Adj: ghostly, Apparition: figure\n",
      "Row: 5845, Adj: small, Apparition: figure\n",
      "Row: 5845, Adj: dark, Apparition: figure\n",
      "Row: 5846, Adj: thick, Apparition: mist\n",
      "Row: 5858, Adj: possible, Apparition: apparition\n",
      "Row: 5871, Adj: open, Apparition: spirit\n",
      "Row: 5873, Adj: friendly, Apparition: ghost\n",
      "Row: 5873, Adj: practical, Apparition: ghost\n",
      "Row: 5877, Adj: unknown, Apparition: ghost\n",
      "Row: 5888, Adj: mysterious, Apparition: ghost\n",
      "Row: 5888, Adj: soldier, Apparition: ghost\n",
      "Row: 5893, Adj: restless, Apparition: spirit\n",
      "Row: 5901, Adj: many, Apparition: ghost\n",
      "Row: 5903, Adj: male, Apparition: figure\n",
      "Row: 5911, Adj: strange, Apparition: shadow\n",
      "Row: 5924, Adj: strange, Apparition: figure\n",
      "Row: 5928, Adj: green, Apparition: orb\n",
      "Row: 5945, Adj: strange, Apparition: apparition\n",
      "Row: 5945, Adj: white, Apparition: apparition\n",
      "Row: 5949, Adj: unexplained, Apparition: presence\n",
      "Row: 5950, Adj: black, Apparition: figure\n",
      "Row: 5979, Adj: bloody, Apparition: figure\n",
      "Row: 5979, Adj: bride, Apparition: figure\n",
      "Row: 5983, Adj: green, Apparition: orb\n",
      "Row: 6036, Adj: white, Apparition: shadow\n",
      "Row: 6056, Adj: bad, Apparition: presence\n",
      "Row: 6070, Adj: dark, Apparition: figure\n",
      "Row: 6076, Adj: low, Apparition: presence\n",
      "Row: 6107, Adj: black, Apparition: figure\n",
      "Row: 6130, Adj: purple, Apparition: orb\n",
      "Row: 6139, Adj: shrouded, Apparition: figure\n",
      "Row: 6139, Adj: shrouded, Apparition: figure\n",
      "Row: 6154, Adj: unseen, Apparition: presence\n",
      "Row: 6155, Adj: friendly, Apparition: spirit\n",
      "Row: 6163, Adj: young, Apparition: ghost\n",
      "Row: 6167, Adj: black, Apparition: witch\n",
      "Row: 6175, Adj: white, Apparition: figure\n",
      "Row: 6182, Adj: dark, Apparition: figure\n",
      "Row: 6186, Adj: white, Apparition: figure\n",
      "Row: 6191, Adj: mad, Apparition: ghost\n",
      "Row: 6200, Adj: shadowy, Apparition: figure\n",
      "Row: 6208, Adj: white, Apparition: ghost\n",
      "Row: 6219, Adj: other, Apparition: ghost\n",
      "Row: 6222, Adj: lady, Apparition: figure\n",
      "Row: 6241, Adj: mischievous, Apparition: presence\n",
      "Row: 6251, Adj: unknown, Apparition: specter\n",
      "Row: 6252, Adj: prolific, Apparition: ghost\n",
      "Row: 6267, Adj: gray, Apparition: mist\n",
      "Row: 6277, Adj: cold, Apparition: presence\n",
      "Row: 6281, Adj: suspicious, Apparition: presence\n",
      "Row: 6345, Adj: sincere, Apparition: Ghost\n",
      "Row: 6358, Adj: strong, Apparition: presence\n",
      "Row: 6368, Adj: white, Apparition: apparition\n",
      "Row: 6375, Adj: female, Apparition: ghost\n",
      "Row: 6378, Adj: dark, Apparition: figure\n",
      "Row: 6383, Adj: shadowy, Apparition: figure\n",
      "Row: 6390, Adj: friendly, Apparition: ghost\n",
      "Row: 6400, Adj: cold, Apparition: presence\n",
      "Row: 6403, Adj: numerous, Apparition: ghost\n",
      "Row: 6416, Adj: particular, Apparition: ghost\n",
      "Row: 6416, Adj: prominent, Apparition: ghost\n",
      "Row: 6417, Adj: grayish, Apparition: figure\n",
      "Row: 6425, Adj: infamous, Apparition: ghost\n",
      "Row: 6433, Adj: ghostly, Apparition: apparition\n",
      "Row: 6437, Adj: female, Apparition: spirit\n",
      "Row: 6445, Adj: t, Apparition: figure\n",
      "Row: 6461, Adj: dark, Apparition: figure\n",
      "Row: 6462, Adj: glowing, Apparition: figure\n",
      "Row: 6474, Adj: supernatural, Apparition: presence\n",
      "Row: 6476, Adj: dark, Apparition: ghost\n",
      "Row: 6493, Adj: shadowy, Apparition: figure\n",
      "Row: 6514, Adj: female, Apparition: spirit\n",
      "Row: 6523, Adj: friendly, Apparition: ghost\n",
      "Row: 6530, Adj: dark, Apparition: figure\n",
      "Row: 6544, Adj: young, Apparition: apparition\n",
      "Row: 6547, Adj: eerie, Apparition: presence\n",
      "Row: 6548, Adj: ghostly, Apparition: figure\n",
      "Row: 6557, Adj: dark, Apparition: figure\n",
      "Row: 6557, Adj: shadowy, Apparition: figure\n",
      "Row: 6578, Adj: dark, Apparition: figure\n",
      "Row: 6590, Adj: strange, Apparition: presence\n",
      "Row: 6594, Adj: friendly, Apparition: ghost\n",
      "Row: 6595, Adj: old, Apparition: ghost\n",
      "Row: 6600, Adj: black, Apparition: figure\n",
      "Row: 6602, Adj: multiple, Apparition: ghost\n",
      "Row: 6603, Adj: ghostly, Apparition: figure\n",
      "Row: 6609, Adj: hazy, Apparition: presence\n",
      "Row: 6616, Adj: benign, Apparition: presence\n",
      "Row: 6640, Adj: little, Apparition: shadow\n",
      "Row: 6670, Adj: white, Apparition: apparition\n",
      "Row: 6671, Adj: mysterious, Apparition: orb\n",
      "Row: 6675, Adj: black, Apparition: phantom\n",
      "Row: 6695, Adj: white, Apparition: orb\n",
      "Row: 6698, Adj: many, Apparition: spirit\n",
      "Row: 6728, Adj: black, Apparition: phantom\n",
      "Row: 6728, Adj: big, Apparition: phantom\n",
      "Row: 6730, Adj: real, Apparition: ghost\n",
      "Row: 6739, Adj: white, Apparition: apparition\n",
      "Row: 6742, Adj: fellow, Apparition: ghost\n",
      "Row: 6742, Adj: small, Apparition: Ghost\n",
      "Row: 6767, Adj: ghostly, Apparition: figure\n",
      "Row: 6773, Adj: shadow, Apparition: figure\n",
      "Row: 6780, Adj: white, Apparition: figure\n",
      "Row: 6782, Adj: ghostly, Apparition: figure\n",
      "Row: 6784, Adj: ectoplasm, Apparition: mist\n",
      "Row: 6788, Adj: black, Apparition: shadow\n",
      "Row: 6792, Adj: misty, Apparition: apparition\n",
      "Row: 6796, Adj: uneasiness, Apparition: shadow\n",
      "Row: 6796, Adj: hooded, Apparition: figure\n",
      "Row: 6796, Adj: responsible, Apparition: demon\n",
      "Row: 6799, Adj: mischievous, Apparition: ghost\n",
      "Row: 6841, Adj: green, Apparition: mist\n",
      "Row: 6849, Adj: red, Apparition: ghost\n",
      "Row: 6867, Adj: reported, Apparition: ghost\n",
      "Row: 6873, Adj: ghostly, Apparition: figure\n",
      "Row: 6875, Adj: strange, Apparition: figure\n",
      "Row: 6890, Adj: open, Apparition: ghost\n",
      "Row: 6898, Adj: beautiful, Apparition: spirit\n",
      "Row: 6898, Adj: young, Apparition: spirit\n",
      "Row: 6899, Adj: Many, Apparition: Ghost\n",
      "Row: 6916, Adj: green, Apparition: mist\n",
      "Row: 6921, Adj: mid, Apparition: figure\n",
      "Row: 6939, Adj: male, Apparition: figure\n",
      "Row: 6953, Adj: past, Apparition: presence\n",
      "Row: 6965, Adj: actual, Apparition: ghost\n",
      "Row: 7002, Adj: many, Apparition: ghost\n",
      "Row: 7014, Adj: heavy, Apparition: presence\n",
      "Row: 7021, Adj: silent, Apparition: figure\n",
      "Row: 7040, Adj: local, Apparition: ghost\n",
      "Row: 7058, Adj: local, Apparition: ghost\n",
      "Row: 7060, Adj: local, Apparition: ghost\n",
      "Row: 7099, Adj: abandoned, Apparition: ghost\n",
      "Row: 7111, Adj: ghostly, Apparition: figure\n",
      "Row: 7122, Adj: white, Apparition: figure\n",
      "Row: 7127, Adj: headless, Apparition: ghost\n",
      "Row: 7130, Adj: strong, Apparition: presence\n",
      "Row: 7130, Adj: negative, Apparition: presence\n",
      "Row: 7132, Adj: present, Apparition: spirit\n",
      "Row: 7151, Adj: such, Apparition: apparition\n",
      "Row: 7165, Adj: evil, Apparition: spirit\n",
      "Row: 7179, Adj: s, Apparition: presence\n",
      "Row: 7181, Adj: friendly, Apparition: ghost\n",
      "Row: 7187, Adj: strong, Apparition: presence\n",
      "Row: 7199, Adj: bright, Apparition: figure\n",
      "Row: 7220, Adj: black, Apparition: shadow\n",
      "Row: 7226, Adj: male, Apparition: figure\n",
      "Row: 7272, Adj: male, Apparition: ghost\n",
      "Row: 7272, Adj: careful, Apparition: ghost\n",
      "Row: 7274, Adj: many, Apparition: spirit\n",
      "Row: 7308, Adj: white, Apparition: figure\n",
      "Row: 7310, Adj: human, Apparition: figure\n",
      "Row: 7312, Adj: full, Apparition: apparition\n",
      "Row: 7331, Adj: small, Apparition: mist\n",
      "Row: 7337, Adj: shadowy, Apparition: figure\n",
      "Row: 7359, Adj: beautiful, Apparition: entity\n",
      "Row: 7359, Adj: unseen, Apparition: presence\n",
      "Row: 7380, Adj: actual, Apparition: presence\n",
      "Row: 7401, Adj: white, Apparition: apparition\n",
      "Row: 7453, Adj: friendly, Apparition: ghost\n",
      "Row: 7475, Adj: angry, Apparition: ghost\n",
      "Row: 7477, Adj: friendly, Apparition: ghost\n",
      "Row: 7486, Adj: miss, Apparition: ghost\n",
      "Row: 7489, Adj: grey, Apparition: figure\n",
      "Row: 7489, Adj: glowing, Apparition: figure\n",
      "Row: 7495, Adj: lady, Apparition: spirit\n",
      "Row: 7498, Adj: strong, Apparition: spirit\n",
      "Row: 7498, Adj: welcoming, Apparition: spirit\n",
      "Row: 7505, Adj: mean, Apparition: ghost\n",
      "Row: 7506, Adj: shadowy, Apparition: figure\n",
      "Row: 7516, Adj: old, Apparition: ghost\n",
      "Row: 7518, Adj: guaranteed, Apparition: Ghost\n",
      "Row: 7522, Adj: friendly, Apparition: ghost\n",
      "Row: 7528, Adj: strange, Apparition: ghost\n",
      "Row: 7552, Adj: black, Apparition: figure\n",
      "Row: 7558, Adj: shadowy, Apparition: figure\n",
      "Row: 7562, Adj: Many, Apparition: ghost\n",
      "Row: 7574, Adj: strange, Apparition: figure\n",
      "Row: 7594, Adj: shadowy, Apparition: figure\n",
      "Row: 7602, Adj: strange, Apparition: apparition\n",
      "Row: 7602, Adj: ghostly, Apparition: figure\n",
      "Row: 7603, Adj: strange, Apparition: presence\n",
      "Row: 7603, Adj: cold, Apparition: presence\n",
      "Row: 7608, Adj: old, Apparition: ghost\n",
      "Row: 7641, Adj: black, Apparition: figure\n",
      "Row: 7649, Adj: most, Apparition: spirit\n",
      "Row: 7649, Adj: restless, Apparition: spirit\n",
      "Row: 7653, Adj: paranormal, Apparition: mist\n",
      "Row: 7656, Adj: second, Apparition: witch\n",
      "Row: 7656, Adj: greatest, Apparition: witch\n",
      "Row: 7658, Adj: tall, Apparition: specter\n",
      "Row: 7659, Adj: white, Apparition: ghost\n",
      "Row: 7662, Adj: unhappy, Apparition: spirit\n",
      "Row: 7674, Adj: ghostly, Apparition: figure\n",
      "Row: 7677, Adj: old, Apparition: presence\n",
      "Row: 7687, Adj: black, Apparition: figure\n",
      "Row: 7687, Adj: hooded, Apparition: figure\n",
      "Row: 7691, Adj: dark, Apparition: figure\n",
      "Row: 7691, Adj: male, Apparition: figure\n",
      "Row: 7695, Adj: male, Apparition: spirit\n",
      "Row: 7696, Adj: malicious, Apparition: spirit\n",
      "Row: 7697, Adj: male, Apparition: spirit\n",
      "Row: 7715, Adj: path, Apparition: mist\n",
      "Row: 7728, Adj: female, Apparition: ghost\n",
      "Row: 7729, Adj: mild, Apparition: poltergeist\n",
      "Row: 7730, Adj: cold, Apparition: presence\n",
      "Row: 7732, Adj: male, Apparition: presence\n",
      "Row: 7735, Adj: female, Apparition: ghost\n",
      "Row: 7741, Adj: classic, Apparition: poltergeist\n",
      "Row: 7742, Adj: evil, Apparition: presence\n",
      "Row: 7745, Adj: little, Apparition: ghost\n",
      "Row: 7746, Adj: tall, Apparition: phantom\n",
      "Row: 7750, Adj: female, Apparition: figure\n",
      "Row: 7755, Adj: unknown, Apparition: spirit\n",
      "Row: 7759, Adj: friendly, Apparition: ghost\n",
      "Row: 7771, Adj: whitish, Apparition: figure\n",
      "Row: 7789, Adj: common, Apparition: spirit\n",
      "Row: 7796, Adj: tall, Apparition: figure\n",
      "Row: 7811, Adj: grayish, Apparition: figure\n",
      "Row: 7819, Adj: dark, Apparition: figure\n",
      "Row: 7819, Adj: shadowy, Apparition: figure\n",
      "Row: 7822, Adj: unknown, Apparition: spirit\n",
      "Row: 7847, Adj: white, Apparition: figure\n",
      "Row: 7858, Adj: other, Apparition: specter\n",
      "Row: 7867, Adj: shadowy, Apparition: figure\n",
      "Row: 7920, Adj: black, Apparition: figure\n",
      "Row: 7922, Adj: same, Apparition: figure\n",
      "Row: 7925, Adj: dark, Apparition: shadow\n",
      "Row: 7930, Adj: white, Apparition: figure\n",
      "Row: 7931, Adj: same, Apparition: ghost\n",
      "Row: 7931, Adj: angry, Apparition: ghost\n",
      "Row: 7931, Adj: Hawaiian, Apparition: ghost\n",
      "Row: 7931, Adj: angry, Apparition: ghost\n",
      "Row: 7931, Adj: Hawaiian, Apparition: ghost\n",
      "Row: 7937, Adj: green, Apparition: mist\n",
      "Row: 7937, Adj: unpleasant, Apparition: presence\n",
      "Row: 7940, Adj: eerie, Apparition: presence\n",
      "Row: 7948, Adj: whole, Apparition: apparition\n",
      "Row: 7949, Adj: active, Apparition: presence\n",
      "Row: 7956, Adj: other, Apparition: ghost\n",
      "Row: 7956, Adj: unknown, Apparition: spirit\n",
      "Row: 7963, Adj: fleeting, Apparition: figure\n",
      "Row: 7963, Adj: tall, Apparition: Figure\n",
      "Row: 7966, Adj: several, Apparition: Ghost\n",
      "Row: 7968, Adj: dark, Apparition: figure\n",
      "Row: 7971, Adj: only, Apparition: figure\n",
      "Row: 7972, Adj: evil, Apparition: presence\n",
      "Row: 7984, Adj: invisible, Apparition: entity\n",
      "Row: 7988, Adj: many, Apparition: ghost\n",
      "Row: 7989, Adj: big, Apparition: shadow\n",
      "Row: 7989, Adj: black, Apparition: shadow\n",
      "Row: 7991, Adj: friendly, Apparition: ghost\n",
      "Row: 7993, Adj: many, Apparition: ghost\n",
      "Row: 8003, Adj: local, Apparition: ghost\n",
      "Row: 8007, Adj: own, Apparition: mist\n",
      "Row: 8018, Adj: cold, Apparition: presence\n",
      "Row: 8020, Adj: first, Apparition: ghost\n",
      "Row: 8020, Adj: second, Apparition: ghost\n",
      "Row: 8020, Adj: third, Apparition: ghost\n",
      "Row: 8020, Adj: last, Apparition: ghost\n",
      "Row: 8032, Adj: cold, Apparition: presence\n",
      "Row: 8052, Adj: evil, Apparition: presence\n",
      "Row: 8052, Adj: strong, Apparition: presence\n",
      "Row: 8060, Adj: other, Apparition: apparition\n",
      "Row: 8063, Adj: definite, Apparition: presence\n",
      "Row: 8063, Adj: spiritual, Apparition: presence\n",
      "Row: 8064, Adj: several, Apparition: ghost\n",
      "Row: 8064, Adj: public, Apparition: ghost\n",
      "Row: 8068, Adj: female, Apparition: ghost\n",
      "Row: 8070, Adj: better, Apparition: figure\n",
      "Row: 8070, Adj: ghostly, Apparition: figure\n",
      "Row: 8075, Adj: thick, Apparition: mist\n",
      "Row: 8079, Adj: shadowy, Apparition: figure\n",
      "Row: 8079, Adj: mischievous, Apparition: ghost\n",
      "Row: 8081, Adj: dark, Apparition: figure\n",
      "Row: 8084, Adj: friendly, Apparition: spirit\n",
      "Row: 8106, Adj: good, Apparition: ghost\n",
      "Row: 8111, Adj: active, Apparition: ghost\n",
      "Row: 8125, Adj: misty, Apparition: figure\n",
      "Row: 8132, Adj: many, Apparition: ghost\n",
      "Row: 8138, Adj: next, Apparition: Phantom\n",
      "Row: 8142, Adj: s, Apparition: figure\n",
      "Row: 8145, Adj: shadowy, Apparition: figure\n",
      "Row: 8162, Adj: female, Apparition: spirit\n",
      "Row: 8171, Adj: second, Apparition: figure\n",
      "Row: 8172, Adj: mischievous, Apparition: ghost\n",
      "Row: 8179, Adj: light, Apparition: ghost\n",
      "Row: 8188, Adj: strange, Apparition: presence\n",
      "Row: 8207, Adj: shadowy, Apparition: figure\n",
      "Row: 8214, Adj: white, Apparition: figure\n",
      "Row: 8219, Adj: pale, Apparition: figure\n",
      "Row: 8248, Adj: white, Apparition: figure\n",
      "Row: 8258, Adj: cold, Apparition: presence\n",
      "Row: 8261, Adj: tall, Apparition: figure\n",
      "Row: 8263, Adj: hooded, Apparition: phantom\n",
      "Row: 8263, Adj: glowing, Apparition: phantom\n",
      "Row: 8276, Adj: black, Apparition: shadow\n",
      "Row: 8290, Adj: mysterious, Apparition: apparition\n",
      "Row: 8296, Adj: lonely, Apparition: spirit\n",
      "Row: 8297, Adj: own, Apparition: ghost\n",
      "Row: 8298, Adj: small, Apparition: figure\n",
      "Row: 8299, Adj: second, Apparition: ghost\n",
      "Row: 8301, Adj: large, Apparition: shadow\n",
      "Row: 8303, Adj: mysterious, Apparition: figure\n",
      "Row: 8310, Adj: female, Apparition: ghost\n",
      "Row: 8315, Adj: dark, Apparition: figure\n",
      "Row: 8329, Adj: mysterious, Apparition: figure\n",
      "Row: 8329, Adj: hooded, Apparition: figure\n",
      "Row: 8343, Adj: cold, Apparition: mist\n",
      "Row: 8361, Adj: distinct, Apparition: presence\n",
      "Row: 8361, Adj: many, Apparition: presence\n",
      "Row: 8367, Adj: misty, Apparition: figure\n",
      "Row: 8370, Adj: black, Apparition: figure\n",
      "Row: 8371, Adj: evil, Apparition: presence\n",
      "Row: 8379, Adj: dark, Apparition: presence\n",
      "Row: 8380, Adj: red, Apparition: orb\n",
      "Row: 8380, Adj: white, Apparition: mist\n",
      "Row: 8380, Adj: filmy, Apparition: mist\n",
      "Row: 8394, Adj: friendly, Apparition: spirit\n",
      "Row: 8408, Adj: light, Apparition: orb\n",
      "Row: 8408, Adj: lantern, Apparition: orb\n",
      "Row: 8408, Adj: light, Apparition: orb\n",
      "Row: 8427, Adj: odd, Apparition: werewolf\n",
      "Row: 8431, Adj: angry, Apparition: spirit\n",
      "Row: 8438, Adj: further, Apparition: orb\n",
      "Row: 8449, Adj: old, Apparition: specter\n",
      "Row: 8460, Adj: known, Apparition: witch\n",
      "Row: 8460, Adj: local, Apparition: witch\n",
      "Row: 8474, Adj: old, Apparition: phantom\n",
      "Row: 8474, Adj: sad, Apparition: presence\n",
      "Row: 8478, Adj: mischievous, Apparition: spirit\n",
      "Row: 8483, Adj: male, Apparition: apparition\n",
      "Row: 8483, Adj: black, Apparition: apparition\n",
      "Row: 8510, Adj: happy, Apparition: presence\n",
      "Row: 8511, Adj: extra, Apparition: ghost\n",
      "Row: 8546, Adj: dark, Apparition: apparition\n",
      "Row: 8560, Adj: human, Apparition: ghost\n",
      "Row: 8560, Adj: unknown, Apparition: spirit\n",
      "Row: 8564, Adj: nice, Apparition: ghost\n",
      "Row: 8566, Adj: casual, Apparition: figure\n",
      "Row: 8584, Adj: negative, Apparition: spirit\n",
      "Row: 8599, Adj: heavy, Apparition: presence\n",
      "Row: 8606, Adj: many, Apparition: apparition\n",
      "Row: 8606, Adj: Indian, Apparition: apparition\n",
      "Row: 8609, Adj: famous, Apparition: apparition\n",
      "Row: 8612, Adj: fish, Apparition: ghost\n",
      "Row: 8640, Adj: dead, Apparition: ghost\n",
      "Row: 8658, Adj: empty, Apparition: ghost\n",
      "Row: 8672, Adj: cold, Apparition: presence\n",
      "Row: 8672, Adj: evil, Apparition: presence\n",
      "Row: 8674, Adj: full, Apparition: ghost\n",
      "Row: 8695, Adj: playful, Apparition: ghost\n",
      "Row: 8698, Adj: notorious, Apparition: Phantom\n",
      "Row: 8704, Adj: strong, Apparition: presence\n",
      "Row: 8705, Adj: other, Apparition: ghost\n",
      "Row: 8711, Adj: cantankerous, Apparition: ghost\n",
      "Row: 8714, Adj: mysterious, Apparition: phantom\n",
      "Row: 8714, Adj: cloaked, Apparition: figure\n",
      "Row: 8714, Adj: top, Apparition: figure\n",
      "Row: 8714, Adj: cloaked, Apparition: figure\n",
      "Row: 8720, Adj: green, Apparition: mist\n",
      "Row: 8720, Adj: red, Apparition: mist\n",
      "Row: 8726, Adj: little, Apparition: ghost\n",
      "Row: 8730, Adj: third, Apparition: ghost\n",
      "Row: 8732, Adj: ghostly, Apparition: presence\n",
      "Row: 8750, Adj: old, Apparition: ghost\n",
      "Row: 8759, Adj: same, Apparition: spirit\n",
      "Row: 8809, Adj: strong, Apparition: presence\n",
      "Row: 8810, Adj: nun, Apparition: ghost\n",
      "Row: 8810, Adj: nice, Apparition: ghost\n",
      "Row: 8813, Adj: female, Apparition: ghost\n",
      "Row: 8819, Adj: own, Apparition: ghost\n",
      "Row: 8824, Adj: negative, Apparition: presence\n",
      "Row: 8835, Adj: mischievous, Apparition: entity\n",
      "Row: 8835, Adj: shadowy, Apparition: figure\n",
      "Row: 8841, Adj: eerie, Apparition: figure\n",
      "Row: 8842, Adj: unknown, Apparition: figure\n",
      "Row: 8844, Adj: black, Apparition: figure\n",
      "Row: 8854, Adj: start, Apparition: ghost\n",
      "Row: 8861, Adj: nasty, Apparition: presence\n",
      "Row: 8861, Adj: metaphysical, Apparition: presence\n",
      "Row: 8870, Adj: unknown, Apparition: spirit\n",
      "Row: 8871, Adj: black, Apparition: figure\n",
      "Row: 8878, Adj: white, Apparition: figure\n",
      "Row: 8904, Adj: murdered, Apparition: spirit\n",
      "Row: 8927, Adj: female, Apparition: spirit\n",
      "Row: 8928, Adj: ghostly, Apparition: presence\n",
      "Row: 8928, Adj: female, Apparition: presence\n",
      "Row: 8934, Adj: unidentified, Apparition: ghost\n",
      "Row: 8955, Adj: white, Apparition: figure\n",
      "Row: 8955, Adj: eerie, Apparition: presence\n",
      "Row: 8962, Adj: white, Apparition: figure\n",
      "Row: 8964, Adj: single, Apparition: mist\n",
      "Row: 8990, Adj: many, Apparition: figure\n",
      "Row: 9016, Adj: evil, Apparition: spirit\n",
      "Row: 9021, Adj: least, Apparition: ghost\n",
      "Row: 9021, Adj: separate, Apparition: ghost\n",
      "Row: 9021, Adj: small, Apparition: ghost\n",
      "Row: 9036, Adj: little, Apparition: ghost\n",
      "Row: 9045, Adj: electrical, Apparition: presence\n",
      "Row: 9049, Adj: little, Apparition: ghost\n",
      "Row: 9050, Adj: little, Apparition: ghost\n",
      "Row: 9050, Adj: girl, Apparition: ghost\n",
      "Row: 9068, Adj: cold, Apparition: presence\n",
      "Row: 9104, Adj: mischievous, Apparition: ghost\n",
      "Row: 9107, Adj: white, Apparition: figure\n",
      "Row: 9108, Adj: evil, Apparition: entity\n",
      "Row: 9114, Adj: purple, Apparition: mist\n",
      "Row: 9122, Adj: female, Apparition: ghost\n",
      "Row: 9145, Adj: passing, Apparition: shadow\n",
      "Row: 9145, Adj: black, Apparition: shadow\n",
      "Row: 9174, Adj: demonic, Apparition: figure\n",
      "Row: 9180, Adj: dark, Apparition: shadow\n",
      "Row: 9186, Adj: several, Apparition: shadow\n",
      "Row: 9186, Adj: dark, Apparition: presence\n",
      "Row: 9202, Adj: nearby, Apparition: Ghost\n",
      "Row: 9206, Adj: horrible, Apparition: spirit\n",
      "Row: 9206, Adj: much, Apparition: spirit\n",
      "Row: 9210, Adj: unfriendly, Apparition: spirit\n",
      "Row: 9214, Adj: disgruntled, Apparition: spirit\n",
      "Row: 9220, Adj: green, Apparition: mist\n",
      "Row: 9231, Adj: tall, Apparition: figure\n",
      "Row: 9232, Adj: white, Apparition: figure\n",
      "Row: 9232, Adj: white, Apparition: figure\n",
      "Row: 9255, Adj: shadowy, Apparition: figure\n",
      "Row: 9259, Adj: little, Apparition: spirit\n",
      "Row: 9259, Adj: girl, Apparition: spirit\n",
      "Row: 9270, Adj: several, Apparition: ghost\n",
      "Row: 9329, Adj: outside, Apparition: ghost\n",
      "Row: 9337, Adj: evil, Apparition: presence\n",
      "Row: 9338, Adj: evil, Apparition: spirit\n",
      "Row: 9343, Adj: malicious, Apparition: ghost\n",
      "Row: 9353, Adj: cold, Apparition: presence\n",
      "Row: 9365, Adj: evil, Apparition: entity\n",
      "Row: 9367, Adj: shadow, Apparition: figure\n",
      "Row: 9389, Adj: glowing, Apparition: figure\n",
      "Row: 9389, Adj: white, Apparition: figure\n",
      "Row: 9389, Adj: white, Apparition: figure\n",
      "Row: 9401, Adj: helpful, Apparition: spirit\n",
      "Row: 9409, Adj: bright, Apparition: orb\n",
      "Row: 9409, Adj: white, Apparition: orb\n",
      "Row: 9411, Adj: large, Apparition: orb\n",
      "Row: 9411, Adj: bright, Apparition: orb\n",
      "Row: 9413, Adj: jaguar, Apparition: ghost\n",
      "Row: 9429, Adj: shadowy, Apparition: figure\n",
      "Row: 9430, Adj: good, Apparition: ghost\n",
      "Row: 9430, Adj: friendly, Apparition: ghost\n",
      "Row: 9437, Adj: dark, Apparition: shadow\n",
      "Row: 9448, Adj: male, Apparition: figure\n",
      "Row: 9448, Adj: black, Apparition: figure\n",
      "Row: 9462, Adj: interested, Apparition: ghost\n",
      "Row: 9464, Adj: unknown, Apparition: presence\n",
      "Row: 9464, Adj: tall, Apparition: figure\n",
      "Row: 9464, Adj: dark, Apparition: figure\n",
      "Row: 9490, Adj: female, Apparition: figure\n",
      "Row: 9493, Adj: Wiccademous, Apparition: spirit\n",
      "Row: 9507, Adj: tall, Apparition: figure\n",
      "Row: 9507, Adj: male, Apparition: figure\n",
      "Row: 9507, Adj: pale, Apparition: figure\n",
      "Row: 9511, Adj: particular, Apparition: presence\n",
      "Row: 9513, Adj: violent, Apparition: ghost\n",
      "Row: 9514, Adj: ghostly, Apparition: figure\n",
      "Row: 9531, Adj: black, Apparition: shadow\n",
      "Row: 9542, Adj: malevolent, Apparition: spirit\n",
      "Row: 9542, Adj: evil, Apparition: presence\n",
      "Row: 9543, Adj: angry, Apparition: spirit\n",
      "Row: 9551, Adj: white, Apparition: entity\n",
      "Row: 9568, Adj: strange, Apparition: presence\n",
      "Row: 9581, Adj: professional, Apparition: ghost\n",
      "Row: 9584, Adj: thin, Apparition: shadow\n",
      "Row: 9588, Adj: dark, Apparition: figure\n",
      "Row: 9602, Adj: unhappy, Apparition: spirit\n",
      "Row: 9606, Adj: shadow, Apparition: figure\n",
      "Row: 9608, Adj: tan, Apparition: figure\n",
      "Row: 9626, Adj: threatening, Apparition: presence\n",
      "Row: 9628, Adj: shadowy, Apparition: figure\n",
      "Row: 9628, Adj: dangerous, Apparition: spirit\n",
      "Row: 9633, Adj: old, Apparition: ghost\n",
      "Row: 9641, Adj: smoky, Apparition: apparition\n",
      "Row: 9652, Adj: old, Apparition: spirit\n",
      "Row: 9655, Adj: evil, Apparition: spirit\n",
      "Row: 9658, Adj: ghostly, Apparition: figure\n",
      "Row: 9664, Adj: phantom, Apparition: ghost\n",
      "Row: 9681, Adj: unidentified, Apparition: spirit\n",
      "Row: 9681, Adj: little, Apparition: spirit\n",
      "Row: 9681, Adj: girl, Apparition: spirit\n",
      "Row: 9685, Adj: numerous, Apparition: ghost\n",
      "Row: 9685, Adj: most, Apparition: ghost\n",
      "Row: 9690, Adj: shadow, Apparition: entity\n",
      "Row: 9711, Adj: nude, Apparition: figure\n",
      "Row: 9711, Adj: hairy, Apparition: figure\n",
      "Row: 9711, Adj: next, Apparition: figure\n",
      "Row: 9712, Adj: restless, Apparition: spirit\n",
      "Row: 9722, Adj: shadow, Apparition: figure\n",
      "Row: 9739, Adj: inexperienced, Apparition: ghost\n",
      "Row: 9760, Adj: evil, Apparition: presence\n",
      "Row: 9761, Adj: heavy, Apparition: poltergeist\n",
      "Row: 9768, Adj: black, Apparition: figure\n",
      "Row: 9771, Adj: female, Apparition: Ghost\n",
      "Row: 9778, Adj: old, Apparition: apparition\n",
      "Row: 9787, Adj: own, Apparition: ghost\n",
      "Row: 9787, Adj: little, Apparition: ghost\n",
      "Row: 9793, Adj: transparent, Apparition: figure\n",
      "Row: 9817, Adj: dead, Apparition: ghost\n",
      "Row: 9829, Adj: female, Apparition: figure\n",
      "Row: 9832, Adj: Male, Apparition: figure\n",
      "Row: 9837, Adj: male, Apparition: ghost\n",
      "Row: 9846, Adj: tall, Apparition: apparition\n",
      "Row: 9854, Adj: shaowy, Apparition: figure\n",
      "Row: 9854, Adj: red, Apparition: figure\n",
      "Row: 9863, Adj: girl, Apparition: ghost\n",
      "Row: 9865, Adj: more, Apparition: figure\n",
      "Row: 9868, Adj: old, Apparition: ghost\n",
      "Row: 9907, Adj: many, Apparition: ghost\n",
      "Row: 9908, Adj: ghostly, Apparition: figure\n",
      "Row: 9918, Adj: dark, Apparition: shadow\n",
      "Row: 9920, Adj: single, Apparition: figure\n",
      "Row: 9928, Adj: misty, Apparition: figure\n",
      "Row: 9928, Adj: white, Apparition: figure\n",
      "Row: 9932, Adj: same, Apparition: ghost\n",
      "Row: 9938, Adj: many, Apparition: ghost\n",
      "Row: 9959, Adj: former, Apparition: spirit\n",
      "Row: 9986, Adj: many, Apparition: ghost\n",
      "Row: 10007, Adj: mysterious, Apparition: ghost\n",
      "Row: 10027, Adj: eerie, Apparition: presence\n",
      "Row: 10030, Adj: second, Apparition: spirit\n",
      "Row: 10030, Adj: last, Apparition: ghost\n",
      "Row: 10043, Adj: green, Apparition: orb\n",
      "Row: 10047, Adj: dark, Apparition: shadow\n",
      "Row: 10056, Adj: pregnant, Apparition: ghost\n",
      "Row: 10070, Adj: recent, Apparition: ghost\n",
      "Row: 10076, Adj: angry, Apparition: spirit\n",
      "Row: 10082, Adj: s, Apparition: ghost\n",
      "Row: 10084, Adj: unknown, Apparition: spirit\n",
      "Row: 10085, Adj: unknown, Apparition: ghost\n",
      "Row: 10088, Adj: evil, Apparition: presence\n",
      "Row: 10094, Adj: other, Apparition: ghost\n",
      "Row: 10104, Adj: strange, Apparition: presence\n",
      "Row: 10107, Adj: rare, Apparition: phantom\n",
      "Row: 10109, Adj: wonderful, Apparition: spirit\n",
      "Row: 10136, Adj: many, Apparition: shadow\n",
      "Row: 10158, Adj: best, Apparition: spirit\n",
      "Row: 10168, Adj: occasional, Apparition: orb\n",
      "Row: 10180, Adj: white, Apparition: figure\n",
      "Row: 10182, Adj: tall, Apparition: figure\n",
      "Row: 10182, Adj: white, Apparition: figure\n",
      "Row: 10184, Adj: uncomfortable, Apparition: presence\n",
      "Row: 10213, Adj: other, Apparition: spirit\n",
      "Row: 10222, Adj: lady, Apparition: ghost\n",
      "Row: 10222, Adj: white, Apparition: ghost\n",
      "Row: 10270, Adj: green, Apparition: mist\n",
      "Row: 10270, Adj: green, Apparition: mist\n",
      "Row: 10309, Adj: first, Apparition: witch\n",
      "Row: 10309, Adj: local, Apparition: ghost\n",
      "Row: 10311, Adj: angry, Apparition: ghost\n",
      "Row: 10319, Adj: clear, Apparition: ghost\n",
      "Row: 10324, Adj: legendary, Apparition: ghost\n",
      "Row: 10340, Adj: evil, Apparition: presence\n",
      "Row: 10345, Adj: black, Apparition: figure\n",
      "Row: 10360, Adj: deceased, Apparition: Ghost\n",
      "Row: 10362, Adj: grayish, Apparition: mist\n",
      "Row: 10362, Adj: white, Apparition: mist\n",
      "Row: 10371, Adj: black, Apparition: shadow\n",
      "Row: 10377, Adj: dark, Apparition: shadow\n",
      "Row: 10379, Adj: white, Apparition: figure\n",
      "Row: 10381, Adj: white, Apparition: mist\n",
      "Row: 10389, Adj: heavy, Apparition: presence\n",
      "Row: 10389, Adj: ominous, Apparition: presence\n",
      "Row: 10428, Adj: unwanting, Apparition: spirit\n",
      "Row: 10428, Adj: strong, Apparition: spirit\n",
      "Row: 10430, Adj: little, Apparition: ghost\n",
      "Row: 10452, Adj: ghostly, Apparition: figure\n",
      "Row: 10453, Adj: white, Apparition: figure\n",
      "Row: 10469, Adj: tall, Apparition: figure\n",
      "Row: 10472, Adj: white, Apparition: figure\n",
      "Row: 10472, Adj: shadowy, Apparition: figure\n",
      "Row: 10477, Adj: Many, Apparition: ghost\n",
      "Row: 10477, Adj: black, Apparition: ghost\n",
      "Row: 10501, Adj: Many, Apparition: ghost\n",
      "Row: 10506, Adj: second, Apparition: ghost\n",
      "Row: 10523, Adj: white, Apparition: apparition\n",
      "Row: 10540, Adj: common, Apparition: ghost\n",
      "Row: 10546, Adj: tall, Apparition: figure\n",
      "Row: 10546, Adj: shadowy, Apparition: figure\n",
      "Row: 10568, Adj: indistinct, Apparition: figure\n",
      "Row: 10577, Adj: second, Apparition: ghost\n",
      "Row: 10580, Adj: girl, Apparition: ghost\n",
      "Row: 10582, Adj: black, Apparition: figure\n",
      "Row: 10599, Adj: shadowy, Apparition: figure\n",
      "Row: 10615, Adj: nameless, Apparition: ghost\n",
      "Row: 10615, Adj: other, Apparition: ghost\n",
      "Row: 10617, Adj: other, Apparition: ghost\n",
      "Row: 10628, Adj: black, Apparition: mist\n",
      "Row: 10628, Adj: shadowy, Apparition: mist\n",
      "Row: 10664, Adj: dark, Apparition: shadow\n",
      "Row: 10666, Adj: white, Apparition: figure\n",
      "Row: 10684, Adj: white, Apparition: apparition\n",
      "Row: 10692, Adj: old, Apparition: ghost\n",
      "Row: 10708, Adj: several, Apparition: Ghost\n",
      "Row: 10718, Adj: shadowy, Apparition: figure\n",
      "Row: 10726, Adj: cold, Apparition: presence\n",
      "Row: 10727, Adj: hostile, Apparition: ghost\n",
      "Row: 10729, Adj: ANGRY, Apparition: ghost\n",
      "Row: 10732, Adj: whitish, Apparition: mist\n",
      "Row: 10734, Adj: mischievous, Apparition: ghost\n",
      "Row: 10753, Adj: Many, Apparition: ghost\n",
      "Row: 10765, Adj: little, Apparition: spirit\n",
      "Row: 10765, Adj: girl, Apparition: spirit\n",
      "Row: 10768, Adj: male, Apparition: ghost\n",
      "Row: 10771, Adj: third, Apparition: apparition\n",
      "Row: 10774, Adj: local, Apparition: vampire\n",
      "Row: 10775, Adj: lady, Apparition: vampire\n",
      "Row: 10777, Adj: suspected, Apparition: witch\n",
      "Row: 10779, Adj: unknown, Apparition: spirit\n",
      "Row: 10785, Adj: full, Apparition: apparition\n",
      "Row: 10786, Adj: female, Apparition: spirit\n",
      "Row: 10808, Adj: large, Apparition: shadow\n",
      "Row: 10808, Adj: female, Apparition: spirit\n",
      "Row: 10810, Adj: male, Apparition: entity\n",
      "Row: 10810, Adj: angry, Apparition: entity\n",
      "Row: 10811, Adj: tricky, Apparition: poltergeist\n",
      "Row: 10817, Adj: protective, Apparition: ghost\n",
      "Row: 10817, Adj: unknown, Apparition: ghost\n",
      "Row: 10824, Adj: benevolent, Apparition: spirit\n",
      "Row: 10836, Adj: least, Apparition: ghost\n",
      "Row: 10839, Adj: Third, Apparition: ghost\n",
      "Row: 10839, Adj: dark, Apparition: ghost\n",
      "Row: 10840, Adj: least, Apparition: entity\n",
      "Row: 10840, Adj: unknown, Apparition: entity\n",
      "Row: 10843, Adj: main, Apparition: spirit\n",
      "Row: 10855, Adj: positive, Apparition: orb\n",
      "Row: 10860, Adj: elementary, Apparition: presence\n",
      "Row: 10878, Adj: female, Apparition: ghost\n",
      "Row: 10910, Adj: numerous, Apparition: ghost\n",
      "Row: 10912, Adj: full, Apparition: apparition\n",
      "Row: 10920, Adj: shadow, Apparition: figure\n",
      "Row: 10923, Adj: ominous, Apparition: presence\n",
      "Row: 10923, Adj: main, Apparition: apparition\n",
      "Row: 10923, Adj: little, Apparition: poltergeist\n",
      "Row: 10933, Adj: first, Apparition: spirit\n",
      "Row: 10936, Adj: least, Apparition: spirit\n",
      "Row: 10937, Adj: strange, Apparition: mist\n",
      "Row: 10938, Adj: benevolent, Apparition: spirit\n",
      "Row: 10957, Adj: strange, Apparition: figure\n",
      "Row: 10975, Adj: early, Apparition: figure\n",
      "Row: 10977, Adj: visible, Apparition: mist\n",
      "Row: 10977, Adj: black, Apparition: mist\n",
      "Row: 10980, Adj: strange, Apparition: presence\n",
      "Row: 10982, Adj: visible, Apparition: mist\n",
      "Row: 10986, Adj: unpleasant, Apparition: spirit\n",
      "Row: 10990, Adj: ear, Apparition: Poltergeist\n",
      "Row: 10991, Adj: few, Apparition: ghost\n"
     ]
    }
   ],
   "source": [
    "for index, row in df.iterrows():\n",
    "    for adj, associated in row['adjectives']:\n",
    "        print(f\"Row: {index+1}, Adj: {adj}, Apparition: {associated}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "BbkR13BA-D_N",
    "outputId": "43b5b1fc-5a07-4f9a-99e7-ddd6368dc4c9"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[(('white', 'figure'), 48), (('shadowy', 'figure'), 42), (('ghostly', 'figure'), 33), (('black', 'figure'), 31), (('dark', 'figure'), 24), (('female', 'ghost'), 20), (('strange', 'presence'), 19), (('friendly', 'ghost'), 19), (('tall', 'figure'), 17), (('cold', 'presence'), 16), (('evil', 'presence'), 14), (('strong', 'presence'), 14), (('black', 'shadow'), 14), (('unknown', 'spirit'), 13), (('many', 'ghost'), 13), (('male', 'figure'), 12), (('old', 'ghost'), 12), (('strange', 'figure'), 11), (('little', 'ghost'), 11), (('other', 'ghost'), 10)]\n"
     ]
    }
   ],
   "source": [
    "#Count the most common pairs of adjective and appartition type\n",
    "from collections import Counter\n",
    "\n",
    "# Flatten list of tuples across all rows\n",
    "all_adj_app_pairs = [pair for sublist in df['adjectives'] for pair in sublist]\n",
    "\n",
    "# Count occurrences of (adjective, apparition) pairs\n",
    "pair_counts = Counter(all_adj_app_pairs)\n",
    "\n",
    "# Display the most common pairs\n",
    "print(pair_counts.most_common(20))  # Top 10 most frequent adjective-apparition pairs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 328
    },
    "id": "1ZQiVd4v-GSE",
    "outputId": "e7299082-769e-4f12-8808-3cd49f8f7f66"
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# Convert tuple keys to strings\n",
    "adj_app_df = pd.DataFrame(\n",
    "    [(f\"{adj}, {app}\", count) for (adj, app), count in pair_counts.items()],\n",
    "    columns=['Adjective_Apparition', 'Count']\n",
    ")\n",
    "\n",
    "# Sort and select top 10 pairs\n",
    "adj_app_df = adj_app_df.sort_values(by='Count', ascending=False).head(10)\n",
    "\n",
    "plt.figure(figsize=(12, 6))\n",
    "ax = sns.barplot(\n",
    "    y=adj_app_df['Adjective_Apparition'],\n",
    "    x=adj_app_df['Count'],\n",
    "    hue=adj_app_df['Adjective_Apparition'],  # Assign `hue` to the categorical variable\n",
    "    palette=\"viridis\",\n",
    "    legend=False  # Remove unnecessary legend\n",
    ")\n",
    "\n",
    "# Add count labels on the bars\n",
    "for bar in ax.patches:\n",
    "    plt.text(\n",
    "        bar.get_width() + 0.5,  # Offset a bit to the right\n",
    "        bar.get_y() + bar.get_height() / 2,  # Centered on the bar\n",
    "        f'{int(bar.get_width())}',  # Convert count to int and display\n",
    "        va='center',\n",
    "        fontsize=12\n",
    "    )\n",
    "\n",
    "plt.xlabel(\"Count\")\n",
    "plt.ylabel(\"Adjective-Apparition Pair\")\n",
    "plt.title(\"Top 10 Most Common Adjective-Apparition Pairs\")\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "u88TGS8O-ItD",
    "outputId": "211da05d-ee4c-411a-fd8c-38e143bbb30c"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[('white', 75), ('black', 62), ('ghostly', 43), ('shadowy', 43), ('strange', 42), ('female', 39), ('dark', 38), ('unknown', 32), ('male', 28), ('friendly', 27), ('evil', 26), ('many', 25), ('tall', 24), ('old', 21), ('cold', 20), ('other', 20), ('little', 19), ('strong', 16), ('large', 15), ('angry', 14)]\n"
     ]
    }
   ],
   "source": [
    "# Count just the adjectives (ignoring apparition type)\n",
    "adjective_counts = Counter([adj for adj, app in all_adj_app_pairs])\n",
    "\n",
    "print(adjective_counts.most_common(20))  # Top 10 most frequent adjectives\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "zkI5zmAM7QDN"
   },
   "source": [
    "### Cosine Similarity Comparison\n",
    "This uses the Word2Vec pre-trained vectors based on Google News dataset (about 100 billion words). This comparison was to see how closely associated the keywords were to other words in the keyword bank.\n",
    "https://huggingface.co/fse/word2vec-google-news-300"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {
    "id": "IRUTV9oH6xju"
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "def euclidean(vec1, vec2):\n",
    "    distance = np.array(vec1) -np.array(vec2)\n",
    "    squared_sum = np.sum(distance**2)\n",
    "    return np.sqrt(squared_sum)\n",
    "\n",
    "def dot_product(vec1, vec2):\n",
    "    dotproduct = sum(vec1[k] * vec2[k] for k in range(len(vec1)))\n",
    "    return dotproduct\n",
    "\n",
    "def vector_norm(vector):\n",
    "    norm = np.sqrt(dot_product(vector,vector))\n",
    "    return norm\n",
    "\n",
    "def cosine_similarity(vec1, vec2):\n",
    "    thecosine = 0\n",
    "    thedotproduct = dot_product(vec1, vec2)\n",
    "    thecosine = thedotproduct/(vector_norm(vec1)*vector_norm(vec2))\n",
    "    thecosine = np.round(thecosine,4)\n",
    "    return thecosine"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Z3NgJeYw_oYk"
   },
   "source": [
    "### Google News Word2Vec Model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Ord8tbQz5_CW"
   },
   "source": [
    "This is downloading a pre-trained Word2Vec model to see if there are further word embedding associations that can highlight new words to add to the keyword bank.\n",
    "This takes around 9 minutes to download."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "ykbMT155_mbI",
    "outputId": "e8940b09-c082-48c3-e6e6-064958a701db"
   },
   "outputs": [],
   "source": [
    "import gensim.downloader as api\n",
    "vectors = api.load('word2vec-google-news-300')\n",
    "\n",
    "# Load known apparition keywords (ensure lowercase & drop NaNs)\n",
    "kws_apparition = set(keyword_bank_df['Apparition_Types'].dropna().str.lower())\n",
    "kws_app_descriptors = set(keyword_bank_df['Apparition_Descriptors'].dropna().str.lower())\n",
    "\n",
    "def similarity_comparison(keywords_1, keywords_2):\n",
    "    for word in keywords_1:\n",
    "        closest_word = None\n",
    "        min_dist = float('inf')\n",
    "\n",
    "        for compare_word in keywords_2:\n",
    "            if word == compare_word:\n",
    "                continue\n",
    "\n",
    "            distance = euclidean(vectors[word], vectors[compare_word])\n",
    "\n",
    "            if distance < min_dist:\n",
    "                min_dist = distance\n",
    "                closest_word = compare_word\n",
    "\n",
    "        cosine_sim_calc = cosine_similarity(vectors[word], vectors[closest_word])\n",
    "        print(f\"Closest word to '{word}' is '{closest_word}' with min_dist of {min_dist:.3f} and cosine_similarity of {cosine_sim_calc}\")\n",
    "similarity_comparison(kws_apparition,kws_apparition)\n",
    "print()\n",
    "similarity_comparison(kws_apparition,kws_app_descriptors)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "d2aL8ZGz9XVW"
   },
   "outputs": [],
   "source": [
    "def find_closest_words(keyword, all_unique_words):\n",
    "    if keyword not in vectors:\n",
    "        print(f\"Keyword '{keyword}' not found in Word2Vec model.\")\n",
    "        return []\n",
    "\n",
    "    closest_words = []\n",
    "    keyword_vector = vectors[keyword]\n",
    "\n",
    "    for word in all_unique_words:\n",
    "        if word in vectors and word != keyword:\n",
    "          distance = euclidean(keyword_vector, vectors[word])\n",
    "          closest_words.append((word, distance, cosine_similarity(keyword_vector, vectors[word])))\n",
    "\n",
    "    # Sort by distance (closest first)\n",
    "    closest_words.sort(key=lambda x: x[1]) #Sorts by 2nd element of the tuple (distance)\n",
    "    return closest_words[:10]  # Get the top 10 closest words"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "NZKBgZjiT14z",
    "outputId": "9bb586ff-4449-4e16-92bd-4292bb9ac871"
   },
   "outputs": [],
   "source": [
    "for keyword in kws_apparition:\n",
    "    closest_words = find_closest_words(keyword, kws_apparition)\n",
    "    print(f\"\\nClosest words to '{keyword}':\")\n",
    "    for word, distance, cosine_sim in closest_words:\n",
    "      print(f\" - '{word}' with distance {distance:.3f} and cosince similarity {cosine_sim:.4f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "bSwMSXpQ93F9",
    "outputId": "4260a6a0-56ae-4d2f-afba-b7a2137cb315"
   },
   "outputs": [],
   "source": [
    "for keyword in kws_app_descriptors:\n",
    "    closest_words = find_closest_words(keyword, kws_app_descriptors)\n",
    "    print(f\"\\nClosest words to '{keyword}':\")\n",
    "    for word, distance, cosine_sim in closest_words:\n",
    "      print(f\" - '{word}' with distance {distance:.3f} and cosince similarity {cosine_sim:.4f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "KxWekVS9CwRK"
   },
   "source": [
    "## Haunted Places Dates"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "SZmz5056_ok0"
   },
   "source": [
    "The code block below to get the dates will take around an 1hr to run. This block can be skipped if there are time constraints and the following code block that reads in the \"haunted_places_with_dates.csv\" which is a pre-loaded dataset with the expected output of the \"Haunted Places Date\" feature."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 862
    },
    "id": "1d1v7RpIC1Xd",
    "outputId": "779d14ab-c9b4-4d95-918d-c136fc6f96c0"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: datefinder in /Users/andrewturangan/miniconda3/envs/hauntedEnv/lib/python3.9/site-packages (0.7.3)\n",
      "Requirement already satisfied: regex>=2017.02.08 in /Users/andrewturangan/miniconda3/envs/hauntedEnv/lib/python3.9/site-packages (from datefinder) (2024.11.6)\n",
      "Requirement already satisfied: python-dateutil>=2.4.2 in /Users/andrewturangan/miniconda3/envs/hauntedEnv/lib/python3.9/site-packages (from datefinder) (2.9.0.post0)\n",
      "Requirement already satisfied: pytz in /Users/andrewturangan/miniconda3/envs/hauntedEnv/lib/python3.9/site-packages (from datefinder) (2024.1)\n",
      "Requirement already satisfied: six>=1.5 in /Users/andrewturangan/miniconda3/envs/hauntedEnv/lib/python3.9/site-packages (from python-dateutil>=2.4.2->datefinder) (1.16.0)\n",
      "Collecting wikipedia\n",
      "  Downloading wikipedia-1.4.0.tar.gz (27 kB)\n",
      "  Preparing metadata (setup.py) ... \u001b[?25ldone\n",
      "\u001b[?25hRequirement already satisfied: beautifulsoup4 in /Users/andrewturangan/miniconda3/envs/hauntedEnv/lib/python3.9/site-packages (from wikipedia) (4.12.3)\n",
      "Requirement already satisfied: requests<3.0.0,>=2.0.0 in /Users/andrewturangan/miniconda3/envs/hauntedEnv/lib/python3.9/site-packages (from wikipedia) (2.32.3)\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /Users/andrewturangan/miniconda3/envs/hauntedEnv/lib/python3.9/site-packages (from requests<3.0.0,>=2.0.0->wikipedia) (3.3.2)\n",
      "Requirement already satisfied: idna<4,>=2.5 in /Users/andrewturangan/miniconda3/envs/hauntedEnv/lib/python3.9/site-packages (from requests<3.0.0,>=2.0.0->wikipedia) (3.7)\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /Users/andrewturangan/miniconda3/envs/hauntedEnv/lib/python3.9/site-packages (from requests<3.0.0,>=2.0.0->wikipedia) (2.3.0)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /Users/andrewturangan/miniconda3/envs/hauntedEnv/lib/python3.9/site-packages (from requests<3.0.0,>=2.0.0->wikipedia) (2025.1.31)\n",
      "Requirement already satisfied: soupsieve>1.2 in /Users/andrewturangan/miniconda3/envs/hauntedEnv/lib/python3.9/site-packages (from beautifulsoup4->wikipedia) (2.5)\n",
      "Building wheels for collected packages: wikipedia\n",
      "  Building wheel for wikipedia (setup.py) ... \u001b[?25ldone\n",
      "\u001b[?25h  Created wheel for wikipedia: filename=wikipedia-1.4.0-py3-none-any.whl size=11728 sha256=490198fd53db644eabac2dd56c86d0f1947e88ca0a38a16bf39dd7ff6de43114\n",
      "  Stored in directory: /Users/andrewturangan/Library/Caches/pip/wheels/c2/46/f4/caa1bee71096d7b0cdca2f2a2af45cacf35c5760bee8f00948\n",
      "Successfully built wikipedia\n",
      "Installing collected packages: wikipedia\n",
      "Successfully installed wikipedia-1.4.0\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/andrewturangan/miniconda3/envs/hauntedEnv/lib/python3.9/site-packages/dateutil/parser/_parser.py:1207: UnknownTimezoneWarning: tzname M identified but not understood.  Pass `tzinfos` argument in order to correctly return a timezone-aware datetime.  In a future version, this will raise an exception.\n",
      "  warnings.warn(\"tzname {tzname} identified but not understood.  \"\n",
      "/var/folders/yh/z83nv3dd2hl49zy2b2zxjx4h0000gn/T/ipykernel_75207/3764426874.py:62: MarkupResemblesLocatorWarning: The input looks more like a filename than markup. You may want to open this file and pass the filehandle into Beautiful Soup.\n",
      "  soup = BeautifulSoup(summary, \"lxml\")\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[58], line 122\u001b[0m\n\u001b[1;32m    118\u001b[0m     df\u001b[38;5;241m.\u001b[39mloc[df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mHaunted Places Date\u001b[39m\u001b[38;5;124m'\u001b[39m]\u001b[38;5;241m.\u001b[39misna() \u001b[38;5;241m|\u001b[39m (pd\u001b[38;5;241m.\u001b[39mto_datetime(df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mHaunted Places Date\u001b[39m\u001b[38;5;124m'\u001b[39m])\u001b[38;5;241m.\u001b[39mdt\u001b[38;5;241m.\u001b[39myear \u001b[38;5;241m>\u001b[39m current_year), \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mHaunted Places Date\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124m2025/01/01\u001b[39m\u001b[38;5;124m'\u001b[39m\n\u001b[1;32m    120\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m df\n\u001b[0;32m--> 122\u001b[0m df \u001b[38;5;241m=\u001b[39m \u001b[43mhaunted_places_datetime_df\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdf\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    123\u001b[0m df\u001b[38;5;241m.\u001b[39mhead()\n",
      "Cell \u001b[0;32mIn[58], line 115\u001b[0m, in \u001b[0;36mhaunted_places_datetime_df\u001b[0;34m(df)\u001b[0m\n\u001b[1;32m    112\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124m2025/01/01\u001b[39m\u001b[38;5;124m'\u001b[39m\n\u001b[1;32m    114\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m ThreadPoolExecutor(max_workers\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m8\u001b[39m) \u001b[38;5;28;01mas\u001b[39;00m executor:\n\u001b[0;32m--> 115\u001b[0m     df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mHaunted Places Date\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mlist\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mexecutor\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mmap\u001b[49m\u001b[43m(\u001b[49m\u001b[43mextract_date\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdf\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mdescription\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    117\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mHaunted Places Date\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mto_datetime(df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mHaunted Places Date\u001b[39m\u001b[38;5;124m'\u001b[39m], errors\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcoerce\u001b[39m\u001b[38;5;124m'\u001b[39m)\u001b[38;5;241m.\u001b[39mdt\u001b[38;5;241m.\u001b[39mstrftime(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m%\u001b[39m\u001b[38;5;124mY/\u001b[39m\u001b[38;5;124m%\u001b[39m\u001b[38;5;124mm/\u001b[39m\u001b[38;5;132;01m%d\u001b[39;00m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m    118\u001b[0m df\u001b[38;5;241m.\u001b[39mloc[df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mHaunted Places Date\u001b[39m\u001b[38;5;124m'\u001b[39m]\u001b[38;5;241m.\u001b[39misna() \u001b[38;5;241m|\u001b[39m (pd\u001b[38;5;241m.\u001b[39mto_datetime(df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mHaunted Places Date\u001b[39m\u001b[38;5;124m'\u001b[39m])\u001b[38;5;241m.\u001b[39mdt\u001b[38;5;241m.\u001b[39myear \u001b[38;5;241m>\u001b[39m current_year), \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mHaunted Places Date\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124m2025/01/01\u001b[39m\u001b[38;5;124m'\u001b[39m\n",
      "File \u001b[0;32m~/miniconda3/envs/hauntedEnv/lib/python3.9/concurrent/futures/_base.py:609\u001b[0m, in \u001b[0;36mExecutor.map.<locals>.result_iterator\u001b[0;34m()\u001b[0m\n\u001b[1;32m    606\u001b[0m \u001b[38;5;28;01mwhile\u001b[39;00m fs:\n\u001b[1;32m    607\u001b[0m     \u001b[38;5;66;03m# Careful not to keep a reference to the popped future\u001b[39;00m\n\u001b[1;32m    608\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m timeout \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m--> 609\u001b[0m         \u001b[38;5;28;01myield\u001b[39;00m \u001b[43mfs\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mpop\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mresult\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    610\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m    611\u001b[0m         \u001b[38;5;28;01myield\u001b[39;00m fs\u001b[38;5;241m.\u001b[39mpop()\u001b[38;5;241m.\u001b[39mresult(end_time \u001b[38;5;241m-\u001b[39m time\u001b[38;5;241m.\u001b[39mmonotonic())\n",
      "File \u001b[0;32m~/miniconda3/envs/hauntedEnv/lib/python3.9/concurrent/futures/_base.py:441\u001b[0m, in \u001b[0;36mFuture.result\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    438\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_state \u001b[38;5;241m==\u001b[39m FINISHED:\n\u001b[1;32m    439\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m__get_result()\n\u001b[0;32m--> 441\u001b[0m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_condition\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mwait\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtimeout\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    443\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_state \u001b[38;5;129;01min\u001b[39;00m [CANCELLED, CANCELLED_AND_NOTIFIED]:\n\u001b[1;32m    444\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m CancelledError()\n",
      "File \u001b[0;32m~/miniconda3/envs/hauntedEnv/lib/python3.9/threading.py:312\u001b[0m, in \u001b[0;36mCondition.wait\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    310\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:    \u001b[38;5;66;03m# restore state no matter what (e.g., KeyboardInterrupt)\u001b[39;00m\n\u001b[1;32m    311\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m timeout \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m--> 312\u001b[0m         \u001b[43mwaiter\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43macquire\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    313\u001b[0m         gotit \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mTrue\u001b[39;00m\n\u001b[1;32m    314\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "#Need to install datefinder\n",
    "!pip install datefinder\n",
    "!pip install wikipedia\n",
    "\n",
    "# This approach uses a mixed pretrained model and conventional package\n",
    "\n",
    "import pandas as pd\n",
    "import re\n",
    "import datefinder\n",
    "import wikipedia\n",
    "from dateutil import parser\n",
    "from datetime import datetime\n",
    "from concurrent.futures import ThreadPoolExecutor\n",
    "import requests\n",
    "import time\n",
    "import pickle\n",
    "from bs4 import BeautifulSoup\n",
    "import lxml  # Ensure lxml is explicitly imported\n",
    "\n",
    "CACHE_FILE = \"../data/wikipedia_cache.pkl\"\n",
    "\n",
    "# Load Wikipedia cache if it exists\n",
    "try:\n",
    "    with open(CACHE_FILE, \"rb\") as f:\n",
    "        wikipedia_cache = pickle.load(f)\n",
    "except FileNotFoundError:\n",
    "    wikipedia_cache = {}\n",
    "\n",
    "def save_cache():\n",
    "    with open(CACHE_FILE, \"wb\") as f:\n",
    "        pickle.dump(wikipedia_cache, f)\n",
    "\n",
    "def haunted_places_datetime_df(df):\n",
    "    \"\"\"Processes a DataFrame of haunted places and extracts relevant dates.\"\"\"\n",
    "    current_year = datetime.now().year\n",
    "\n",
    "    date_patterns = [\n",
    "        r\"\\b(19\\d{2}|20\\d{2})\\b\",\n",
    "        r\"\\b(\\d{1,2})/(\\d{1,2})/(19\\d{2}|20\\d{2})\\b\",\n",
    "        r\"\\b(\\d{1,2})-(\\d{1,2})-(19\\d{2}|20\\d{2})\\b\",\n",
    "        r\"\\b(19\\d{2}|20\\d{2})/\\d{2}\\b\",\n",
    "        r\"\\b(\\w{3,9}) (19\\d{2}|20\\d{2})\\b\",\n",
    "        r\"\\b(19\\d{2}|20\\d{2})-(\\d{2})-(\\d{2})\\b\",\n",
    "        r\"\\b(\\w{3,9}) (\\d{1,2}), (19\\d{2}|20\\d{2})\\b\",\n",
    "        r\"\\b(\\d{1,2}) (\\w{3,9}) (19\\d{2}|20\\d{2})\\b\",\n",
    "        r\"\\b(\\d{1,2}) (\\w{3,9}), (19\\d{2}|20\\d{2})\\b\",\n",
    "        r\"\\b(\\w{3,9}) (\\d{2}) (19\\d{2}|20\\d{2})\\b\",\n",
    "        r\"\\b(\\d{1,2})(th|st|nd|rd)? (\\w{3,9}) (19\\d{2}|20\\d{2})\\b\",\n",
    "        r\"(\\d+) years ago\",\n",
    "        r\"\\b(early|mid|late) (19\\d{2}|20\\d{2})s\\b\"\n",
    "    ]\n",
    "\n",
    "    def verify_date_with_wikipedia(place_name):\n",
    "        if place_name in wikipedia_cache:\n",
    "            return wikipedia_cache[place_name]\n",
    "\n",
    "        retries = 3\n",
    "        for _ in range(retries):\n",
    "            try:\n",
    "                truncated_name = place_name[:300]  # Ensure query doesn't exceed Wikipedia's limit\n",
    "                summary = wikipedia.summary(truncated_name, sentences=2)\n",
    "                soup = BeautifulSoup(summary, \"lxml\")\n",
    "                matches = list(datefinder.find_dates(soup.text))\n",
    "                if matches:\n",
    "                    date_found = matches[0].strftime('%Y/%m/%d')\n",
    "                    wikipedia_cache[place_name] = date_found\n",
    "                    save_cache()\n",
    "                    return date_found if datetime.strptime(date_found, '%Y/%m/%d').year <= current_year else '2025/01/01'\n",
    "            except (wikipedia.exceptions.DisambiguationError, wikipedia.exceptions.PageError, wikipedia.exceptions.WikipediaException, requests.exceptions.RequestException):\n",
    "                time.sleep(2)\n",
    "        return None\n",
    "\n",
    "    def extract_date(description):\n",
    "        if not isinstance(description, str):\n",
    "            return '2025/01/01'\n",
    "\n",
    "        matches = list(datefinder.find_dates(description, source=True))\n",
    "        valid_dates = []\n",
    "        for date, text in matches:\n",
    "            if re.search(r\"19\\d{2}|20\\d{2}\", text):\n",
    "                try:\n",
    "                    parsed_date = parser.parse(text, fuzzy=True, ignoretz=True)\n",
    "                    if parsed_date.year <= current_year:\n",
    "                        valid_dates.append(parsed_date.strftime('%Y/%m/%d'))\n",
    "                except ValueError:\n",
    "                    continue\n",
    "\n",
    "        if valid_dates:\n",
    "            return valid_dates[0] if datetime.strptime(valid_dates[0], '%Y/%m/%d').year <= current_year else '2025/01/01'\n",
    "\n",
    "        relative_match = re.search(r\"(\\d+) years ago\", description)\n",
    "        if relative_match:\n",
    "            years_ago = int(relative_match.group(1))\n",
    "            relative_year = current_year - years_ago\n",
    "            if relative_year <= current_year:\n",
    "                return f\"{relative_year}/01/01\"\n",
    "\n",
    "        for pattern in date_patterns:\n",
    "            match = re.search(pattern, description)\n",
    "            if match:\n",
    "                try:\n",
    "                    parsed_date = parser.parse(match.group(), fuzzy=True, ignoretz=True)\n",
    "                    return parsed_date.strftime('%Y/%m/%d') if parsed_date.year <= current_year else '2025/01/01'\n",
    "                except ValueError:\n",
    "                    continue\n",
    "\n",
    "        place_name = description.split('.')[0]\n",
    "        wiki_date = verify_date_with_wikipedia(place_name)\n",
    "        if wiki_date:\n",
    "            return wiki_date\n",
    "\n",
    "        return '2025/01/01'\n",
    "\n",
    "    with ThreadPoolExecutor(max_workers=8) as executor:\n",
    "        df['Haunted Places Date'] = list(executor.map(extract_date, df['description']))\n",
    "\n",
    "    df['Haunted Places Date'] = pd.to_datetime(df['Haunted Places Date'], errors='coerce').dt.strftime('%Y/%m/%d')\n",
    "    df.loc[df['Haunted Places Date'].isna() | (pd.to_datetime(df['Haunted Places Date']).dt.year > current_year), 'Haunted Places Date'] = '2025/01/01'\n",
    "\n",
    "    return df\n",
    "\n",
    "df = haunted_places_datetime_df(df)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 539
    },
    "id": "P9t6gacY-hfh",
    "outputId": "a7ba036a-c848-45ee-ee1e-86c6a756e3e4"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>State</th>\n",
       "      <th>city</th>\n",
       "      <th>country</th>\n",
       "      <th>description</th>\n",
       "      <th>location</th>\n",
       "      <th>state_abbrev</th>\n",
       "      <th>longitude</th>\n",
       "      <th>latitude</th>\n",
       "      <th>city_longitude</th>\n",
       "      <th>city_latitude</th>\n",
       "      <th>Total Deaths</th>\n",
       "      <th>% Under 21</th>\n",
       "      <th>Haunted Places Date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>Adamsville</td>\n",
       "      <td>United States</td>\n",
       "      <td>The ghost of a young man has been seen by seve...</td>\n",
       "      <td>Bottenfield Middle School</td>\n",
       "      <td>AL</td>\n",
       "      <td>-86.933312</td>\n",
       "      <td>33.594520</td>\n",
       "      <td>-86.956106</td>\n",
       "      <td>33.600939</td>\n",
       "      <td>2208</td>\n",
       "      <td>3.90%</td>\n",
       "      <td>1/14/2013</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>Adamsville</td>\n",
       "      <td>United States</td>\n",
       "      <td>The community of Indian Meadows and its sister...</td>\n",
       "      <td>Indian Meadows</td>\n",
       "      <td>AL</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-86.956106</td>\n",
       "      <td>33.600939</td>\n",
       "      <td>2208</td>\n",
       "      <td>3.90%</td>\n",
       "      <td>1/1/2025</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>Alabaster</td>\n",
       "      <td>United States</td>\n",
       "      <td>This is an old cotton mill opened in 1896. The...</td>\n",
       "      <td>Old Buck Creek Cotton Mill</td>\n",
       "      <td>AL</td>\n",
       "      <td>-86.825893</td>\n",
       "      <td>33.231356</td>\n",
       "      <td>-86.816377</td>\n",
       "      <td>33.244281</td>\n",
       "      <td>2208</td>\n",
       "      <td>3.90%</td>\n",
       "      <td>1/1/2025</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>Albertville</td>\n",
       "      <td>United States</td>\n",
       "      <td>At night you will hear doors slamming and see ...</td>\n",
       "      <td>Alabama Avenue Middle School</td>\n",
       "      <td>AL</td>\n",
       "      <td>-86.206151</td>\n",
       "      <td>34.260159</td>\n",
       "      <td>-86.208867</td>\n",
       "      <td>34.267594</td>\n",
       "      <td>2208</td>\n",
       "      <td>3.90%</td>\n",
       "      <td>9/22/2006</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>Albertville</td>\n",
       "      <td>United States</td>\n",
       "      <td>Some of the workers say that the elevator will...</td>\n",
       "      <td>Albertville Public Library</td>\n",
       "      <td>AL</td>\n",
       "      <td>-86.203214</td>\n",
       "      <td>34.264041</td>\n",
       "      <td>-86.208867</td>\n",
       "      <td>34.267594</td>\n",
       "      <td>2208</td>\n",
       "      <td>3.90%</td>\n",
       "      <td>3/1/1900</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     State         city        country  \\\n",
       "0  Alabama   Adamsville  United States   \n",
       "1  Alabama   Adamsville  United States   \n",
       "2  Alabama    Alabaster  United States   \n",
       "3  Alabama  Albertville  United States   \n",
       "4  Alabama  Albertville  United States   \n",
       "\n",
       "                                         description  \\\n",
       "0  The ghost of a young man has been seen by seve...   \n",
       "1  The community of Indian Meadows and its sister...   \n",
       "2  This is an old cotton mill opened in 1896. The...   \n",
       "3  At night you will hear doors slamming and see ...   \n",
       "4  Some of the workers say that the elevator will...   \n",
       "\n",
       "                       location state_abbrev  longitude   latitude  \\\n",
       "0     Bottenfield Middle School           AL -86.933312  33.594520   \n",
       "1                Indian Meadows           AL        NaN        NaN   \n",
       "2    Old Buck Creek Cotton Mill           AL -86.825893  33.231356   \n",
       "3  Alabama Avenue Middle School           AL -86.206151  34.260159   \n",
       "4    Albertville Public Library           AL -86.203214  34.264041   \n",
       "\n",
       "   city_longitude  city_latitude  Total Deaths % Under 21 Haunted Places Date  \n",
       "0      -86.956106      33.600939          2208      3.90%           1/14/2013  \n",
       "1      -86.956106      33.600939          2208      3.90%            1/1/2025  \n",
       "2      -86.816377      33.244281          2208      3.90%            1/1/2025  \n",
       "3      -86.208867      34.267594          2208      3.90%           9/22/2006  \n",
       "4      -86.208867      34.267594          2208      3.90%            3/1/1900  "
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_dates = pd.read_csv(\"../data/haunted_places_with_dates.csv\", sep=\",\")\n",
    "df_dates.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 533
    },
    "id": "2_78UTK5-tMu",
    "outputId": "5acffcf2-781c-4a95-b9c7-10a8f5047044"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>city</th>\n",
       "      <th>country</th>\n",
       "      <th>description</th>\n",
       "      <th>location</th>\n",
       "      <th>state</th>\n",
       "      <th>state_abbrev</th>\n",
       "      <th>longitude</th>\n",
       "      <th>latitude</th>\n",
       "      <th>city_longitude</th>\n",
       "      <th>city_latitude</th>\n",
       "      <th>...</th>\n",
       "      <th>apparition_age</th>\n",
       "      <th>apparition_types_str</th>\n",
       "      <th>apparition_descriptors_str</th>\n",
       "      <th>apparition_gender_str</th>\n",
       "      <th>apparition_age_str</th>\n",
       "      <th>unique_apparition_mentions</th>\n",
       "      <th>adjectives</th>\n",
       "      <th>unique_app_descriptor_mentions</th>\n",
       "      <th>Haunted Places Date_x</th>\n",
       "      <th>Haunted Places Date_y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Ada</td>\n",
       "      <td>United States</td>\n",
       "      <td>Ada witch - Sometimes you can see a misty blue...</td>\n",
       "      <td>Ada Cemetery</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-85.504893</td>\n",
       "      <td>42.962106</td>\n",
       "      <td>-85.495480</td>\n",
       "      <td>42.960727</td>\n",
       "      <td>...</td>\n",
       "      <td>[Unknown]</td>\n",
       "      <td>ghost figure witch</td>\n",
       "      <td>ghostly misty</td>\n",
       "      <td>man men husband wife</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>3</td>\n",
       "      <td>[(misty, figure), (blue, figure)]</td>\n",
       "      <td>2</td>\n",
       "      <td>1/1/2025</td>\n",
       "      <td>1/1/2025</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Addison</td>\n",
       "      <td>United States</td>\n",
       "      <td>A little girl was killed suddenly while waitin...</td>\n",
       "      <td>North Adams Rd.</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-84.381843</td>\n",
       "      <td>41.971425</td>\n",
       "      <td>-84.347168</td>\n",
       "      <td>41.986434</td>\n",
       "      <td>...</td>\n",
       "      <td>[child]</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>restless</td>\n",
       "      <td>girl them</td>\n",
       "      <td>child</td>\n",
       "      <td>1</td>\n",
       "      <td>[]</td>\n",
       "      <td>1</td>\n",
       "      <td>1/1/2025</td>\n",
       "      <td>1/1/2025</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Adrian</td>\n",
       "      <td>United States</td>\n",
       "      <td>If you take Gorman Rd. west towards Sand Creek...</td>\n",
       "      <td>Ghost Trestle</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-84.035656</td>\n",
       "      <td>41.904538</td>\n",
       "      <td>-84.037166</td>\n",
       "      <td>41.897547</td>\n",
       "      <td>...</td>\n",
       "      <td>[Unknown]</td>\n",
       "      <td>spirit</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>father son wife they them</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>1</td>\n",
       "      <td>[]</td>\n",
       "      <td>1</td>\n",
       "      <td>3/1/1972</td>\n",
       "      <td>3/1/1972</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Adrian</td>\n",
       "      <td>United States</td>\n",
       "      <td>In the 1970's, one room, room 211, in the old ...</td>\n",
       "      <td>Siena Heights University</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-84.017565</td>\n",
       "      <td>41.905712</td>\n",
       "      <td>-84.037166</td>\n",
       "      <td>41.897547</td>\n",
       "      <td>...</td>\n",
       "      <td>[Unknown]</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>they them</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>1</td>\n",
       "      <td>[]</td>\n",
       "      <td>1</td>\n",
       "      <td>3/1/1970</td>\n",
       "      <td>3/1/1970</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Albion</td>\n",
       "      <td>United States</td>\n",
       "      <td>Kappa Delta Sorority - The Kappa Delta Sororit...</td>\n",
       "      <td>Albion College</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-84.745177</td>\n",
       "      <td>42.244006</td>\n",
       "      <td>-84.753030</td>\n",
       "      <td>42.243097</td>\n",
       "      <td>...</td>\n",
       "      <td>[Unknown]</td>\n",
       "      <td>entity</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>sister they</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>1</td>\n",
       "      <td>[]</td>\n",
       "      <td>1</td>\n",
       "      <td>1/1/2025</td>\n",
       "      <td>1/1/2025</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 38 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      city        country                                        description  \\\n",
       "0      Ada  United States  Ada witch - Sometimes you can see a misty blue...   \n",
       "1  Addison  United States  A little girl was killed suddenly while waitin...   \n",
       "2   Adrian  United States  If you take Gorman Rd. west towards Sand Creek...   \n",
       "3   Adrian  United States  In the 1970's, one room, room 211, in the old ...   \n",
       "4   Albion  United States  Kappa Delta Sorority - The Kappa Delta Sororit...   \n",
       "\n",
       "                   location     state state_abbrev  longitude   latitude  \\\n",
       "0              Ada Cemetery  Michigan           MI -85.504893  42.962106   \n",
       "1           North Adams Rd.  Michigan           MI -84.381843  41.971425   \n",
       "2             Ghost Trestle  Michigan           MI -84.035656  41.904538   \n",
       "3  Siena Heights University  Michigan           MI -84.017565  41.905712   \n",
       "4            Albion College  Michigan           MI -84.745177  42.244006   \n",
       "\n",
       "   city_longitude  city_latitude  ... apparition_age apparition_types_str  \\\n",
       "0      -85.495480      42.960727  ...      [Unknown]   ghost figure witch   \n",
       "1      -84.347168      41.986434  ...        [child]              Unknown   \n",
       "2      -84.037166      41.897547  ...      [Unknown]               spirit   \n",
       "3      -84.037166      41.897547  ...      [Unknown]              Unknown   \n",
       "4      -84.753030      42.243097  ...      [Unknown]               entity   \n",
       "\n",
       "  apparition_descriptors_str      apparition_gender_str apparition_age_str  \\\n",
       "0              ghostly misty       man men husband wife            Unknown   \n",
       "1                   restless                  girl them              child   \n",
       "2                    Unknown  father son wife they them            Unknown   \n",
       "3                    Unknown                  they them            Unknown   \n",
       "4                    Unknown                sister they            Unknown   \n",
       "\n",
       "   unique_apparition_mentions                         adjectives  \\\n",
       "0                           3  [(misty, figure), (blue, figure)]   \n",
       "1                           1                                 []   \n",
       "2                           1                                 []   \n",
       "3                           1                                 []   \n",
       "4                           1                                 []   \n",
       "\n",
       "  unique_app_descriptor_mentions Haunted Places Date_x Haunted Places Date_y  \n",
       "0                              2              1/1/2025              1/1/2025  \n",
       "1                              1              1/1/2025              1/1/2025  \n",
       "2                              1              3/1/1972              3/1/1972  \n",
       "3                              1              3/1/1970              3/1/1970  \n",
       "4                              1              1/1/2025              1/1/2025  \n",
       "\n",
       "[5 rows x 38 columns]"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = df.merge(df_dates[['description', 'Haunted Places Date']], on='description', how='left')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "NKCleunu13eL"
   },
   "source": [
    "# Merging Provided Datasets"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "mCLeH9O1q0mL"
   },
   "source": [
    "## Alcohol Abuse Statistics Merge"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 533
    },
    "id": "6JUA8gMarFZa",
    "outputId": "aa39240b-0326-4e42-e9bc-53235240bf58"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>city</th>\n",
       "      <th>country</th>\n",
       "      <th>description</th>\n",
       "      <th>location</th>\n",
       "      <th>State</th>\n",
       "      <th>state_abbrev</th>\n",
       "      <th>longitude</th>\n",
       "      <th>latitude</th>\n",
       "      <th>city_longitude</th>\n",
       "      <th>city_latitude</th>\n",
       "      <th>...</th>\n",
       "      <th>apparition_descriptors_str</th>\n",
       "      <th>apparition_gender_str</th>\n",
       "      <th>apparition_age_str</th>\n",
       "      <th>unique_apparition_mentions</th>\n",
       "      <th>adjectives</th>\n",
       "      <th>unique_app_descriptor_mentions</th>\n",
       "      <th>Haunted Places Date_x</th>\n",
       "      <th>Haunted Places Date_y</th>\n",
       "      <th>Total Deaths</th>\n",
       "      <th>% Under 21</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Ada</td>\n",
       "      <td>United States</td>\n",
       "      <td>Ada witch - Sometimes you can see a misty blue...</td>\n",
       "      <td>Ada Cemetery</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-85.504893</td>\n",
       "      <td>42.962106</td>\n",
       "      <td>-85.495480</td>\n",
       "      <td>42.960727</td>\n",
       "      <td>...</td>\n",
       "      <td>ghostly misty</td>\n",
       "      <td>man men husband wife</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>3</td>\n",
       "      <td>[(misty, figure), (blue, figure)]</td>\n",
       "      <td>2</td>\n",
       "      <td>1/1/2025</td>\n",
       "      <td>1/1/2025</td>\n",
       "      <td>4548.0</td>\n",
       "      <td>2.6%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Addison</td>\n",
       "      <td>United States</td>\n",
       "      <td>A little girl was killed suddenly while waitin...</td>\n",
       "      <td>North Adams Rd.</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-84.381843</td>\n",
       "      <td>41.971425</td>\n",
       "      <td>-84.347168</td>\n",
       "      <td>41.986434</td>\n",
       "      <td>...</td>\n",
       "      <td>restless</td>\n",
       "      <td>girl them</td>\n",
       "      <td>child</td>\n",
       "      <td>1</td>\n",
       "      <td>[]</td>\n",
       "      <td>1</td>\n",
       "      <td>1/1/2025</td>\n",
       "      <td>1/1/2025</td>\n",
       "      <td>4548.0</td>\n",
       "      <td>2.6%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Adrian</td>\n",
       "      <td>United States</td>\n",
       "      <td>If you take Gorman Rd. west towards Sand Creek...</td>\n",
       "      <td>Ghost Trestle</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-84.035656</td>\n",
       "      <td>41.904538</td>\n",
       "      <td>-84.037166</td>\n",
       "      <td>41.897547</td>\n",
       "      <td>...</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>father son wife they them</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>1</td>\n",
       "      <td>[]</td>\n",
       "      <td>1</td>\n",
       "      <td>3/1/1972</td>\n",
       "      <td>3/1/1972</td>\n",
       "      <td>4548.0</td>\n",
       "      <td>2.6%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Adrian</td>\n",
       "      <td>United States</td>\n",
       "      <td>In the 1970's, one room, room 211, in the old ...</td>\n",
       "      <td>Siena Heights University</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-84.017565</td>\n",
       "      <td>41.905712</td>\n",
       "      <td>-84.037166</td>\n",
       "      <td>41.897547</td>\n",
       "      <td>...</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>they them</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>1</td>\n",
       "      <td>[]</td>\n",
       "      <td>1</td>\n",
       "      <td>3/1/1970</td>\n",
       "      <td>3/1/1970</td>\n",
       "      <td>4548.0</td>\n",
       "      <td>2.6%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Albion</td>\n",
       "      <td>United States</td>\n",
       "      <td>Kappa Delta Sorority - The Kappa Delta Sororit...</td>\n",
       "      <td>Albion College</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-84.745177</td>\n",
       "      <td>42.244006</td>\n",
       "      <td>-84.753030</td>\n",
       "      <td>42.243097</td>\n",
       "      <td>...</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>sister they</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>1</td>\n",
       "      <td>[]</td>\n",
       "      <td>1</td>\n",
       "      <td>1/1/2025</td>\n",
       "      <td>1/1/2025</td>\n",
       "      <td>4548.0</td>\n",
       "      <td>2.6%</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 40 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      city        country                                        description  \\\n",
       "0      Ada  United States  Ada witch - Sometimes you can see a misty blue...   \n",
       "1  Addison  United States  A little girl was killed suddenly while waitin...   \n",
       "2   Adrian  United States  If you take Gorman Rd. west towards Sand Creek...   \n",
       "3   Adrian  United States  In the 1970's, one room, room 211, in the old ...   \n",
       "4   Albion  United States  Kappa Delta Sorority - The Kappa Delta Sororit...   \n",
       "\n",
       "                   location     State state_abbrev  longitude   latitude  \\\n",
       "0              Ada Cemetery  Michigan           MI -85.504893  42.962106   \n",
       "1           North Adams Rd.  Michigan           MI -84.381843  41.971425   \n",
       "2             Ghost Trestle  Michigan           MI -84.035656  41.904538   \n",
       "3  Siena Heights University  Michigan           MI -84.017565  41.905712   \n",
       "4            Albion College  Michigan           MI -84.745177  42.244006   \n",
       "\n",
       "   city_longitude  city_latitude  ... apparition_descriptors_str  \\\n",
       "0      -85.495480      42.960727  ...              ghostly misty   \n",
       "1      -84.347168      41.986434  ...                   restless   \n",
       "2      -84.037166      41.897547  ...                    Unknown   \n",
       "3      -84.037166      41.897547  ...                    Unknown   \n",
       "4      -84.753030      42.243097  ...                    Unknown   \n",
       "\n",
       "       apparition_gender_str apparition_age_str unique_apparition_mentions  \\\n",
       "0       man men husband wife            Unknown                          3   \n",
       "1                  girl them              child                          1   \n",
       "2  father son wife they them            Unknown                          1   \n",
       "3                  they them            Unknown                          1   \n",
       "4                sister they            Unknown                          1   \n",
       "\n",
       "                          adjectives  unique_app_descriptor_mentions  \\\n",
       "0  [(misty, figure), (blue, figure)]                               2   \n",
       "1                                 []                               1   \n",
       "2                                 []                               1   \n",
       "3                                 []                               1   \n",
       "4                                 []                               1   \n",
       "\n",
       "  Haunted Places Date_x Haunted Places Date_y Total Deaths % Under 21  \n",
       "0              1/1/2025              1/1/2025       4548.0       2.6%  \n",
       "1              1/1/2025              1/1/2025       4548.0       2.6%  \n",
       "2              3/1/1972              3/1/1972       4548.0       2.6%  \n",
       "3              3/1/1970              3/1/1970       4548.0       2.6%  \n",
       "4              1/1/2025              1/1/2025       4548.0       2.6%  \n",
       "\n",
       "[5 rows x 40 columns]"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def merge_haunted_data_with_alcohol_abuse_df(df):\n",
    "    \"\"\"Merges a haunted places DataFrame with alcohol abuse statistics.\"\"\"\n",
    "    # Pull in formatted table from alcohol abuse statistics\n",
    "    url = 'https://drugabusestatistics.org/alcohol-abuse-statistics/'\n",
    "    tables = pd.read_html(url)\n",
    "    # Set df_alcohol equal to formatted table from url\n",
    "    df_alcohol = tables[0]\n",
    "    # Keep only necessary columns\n",
    "    columns_to_keep = ['State', 'Total Deaths', '% Under 21']\n",
    "    df_alcohol_filtered = df_alcohol[columns_to_keep]\n",
    "    # Rename state column in the haunted DataFrame to match alcohol abuse statistics\n",
    "    df_haunted = df.rename(columns={'state': 'State'})\n",
    "    # Merge haunted places data with alcohol abuse statistics on 'State'\n",
    "    merged_df = pd.merge(df_haunted, df_alcohol_filtered, on='State', how='left')\n",
    "    df = merged_df\n",
    "    return df\n",
    "\n",
    "df = merge_haunted_data_with_alcohol_abuse_df(df)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "o28uj7wtq_IK"
   },
   "source": [
    "## Daylight by State Merge - USNO Navy"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "NXKDRiM7C02b"
   },
   "source": [
    "The block below takes around 45min to run with the cache file and 6hrs without. Run the subsequent block below it."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "VJ8IDusArCqz"
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import requests\n",
    "from bs4 import BeautifulSoup\n",
    "from datetime import datetime\n",
    "import time\n",
    "import pickle\n",
    "import os\n",
    "\n",
    "def parse_date(date_str):\n",
    "    \"\"\"Parses date strings in multiple formats and extracts the year, month, and day.\"\"\"\n",
    "    for fmt in (\"%m/%d/%Y\", \"%Y/%m/%d\"):\n",
    "        try:\n",
    "            date_obj = datetime.strptime(date_str, fmt)\n",
    "            month_map = {\n",
    "                'Jan': 'Jan.', 'Feb': 'Feb.', 'Mar': 'Mar.', 'Apr': 'Apr.', 'May': 'May',\n",
    "                'Jun': 'June', 'Jul': 'July', 'Aug': 'Aug.', 'Sep': 'Sep.', 'Oct': 'Oct.', 'Nov': 'Nov.', 'Dec': 'Dec.'\n",
    "            }\n",
    "            return date_obj.year, month_map.get(date_obj.strftime('%b'), date_obj.strftime('%b')), date_obj.day\n",
    "        except ValueError:\n",
    "            continue\n",
    "    return None, None, None\n",
    "\n",
    "def load_cache(cache_file):\n",
    "    \"\"\"Loads cached daylight data from a pickle file.\"\"\"\n",
    "    if os.path.exists(cache_file):\n",
    "        with open(cache_file, 'rb') as f:\n",
    "            return pickle.load(f)\n",
    "    return {}\n",
    "\n",
    "def save_cache(cache, cache_file):\n",
    "    \"\"\"Saves daylight data cache to a pickle file.\"\"\"\n",
    "    with open(cache_file, 'wb') as f:\n",
    "        pickle.dump(cache, f)\n",
    "\n",
    "def extract_daylight_data(response_text, month, day):\n",
    "    \"\"\"Parses the HTML response and extracts the daylight duration for the given month and day.\"\"\"\n",
    "    soup = BeautifulSoup(response_text, 'html.parser')\n",
    "\n",
    "    tables = soup.find_all('table')\n",
    "    if not tables:\n",
    "        return 'No data found (Check Response Format)'\n",
    "\n",
    "    table = None\n",
    "    for tbl in tables:\n",
    "        if \"Duration of Daylight\" in tbl.text:\n",
    "            table = tbl\n",
    "            break\n",
    "\n",
    "    if not table:\n",
    "        return 'No data found (Check Table Structure)'\n",
    "\n",
    "    rows = table.find_all('tr')\n",
    "    if len(rows) < 3:\n",
    "        return 'No data found (Check Table Structure)'\n",
    "\n",
    "    headers = [cell.text.strip() for cell in rows[1].find_all('td')]\n",
    "    if not headers:\n",
    "        return 'No data found (Check Header Structure)'\n",
    "\n",
    "    if month not in headers:\n",
    "        return 'No data found (Month Not Available)'\n",
    "\n",
    "    month_index = headers.index(month)\n",
    "\n",
    "    for row in rows[2:]:  # Skip header rows\n",
    "        columns = row.find_all('td')\n",
    "        if columns and columns[0].text.strip().isdigit():\n",
    "            row_day = int(columns[0].text.strip())\n",
    "            if row_day == day:\n",
    "                return columns[month_index].text.strip() if month_index < len(columns) else 'No data found'\n",
    "\n",
    "    return 'No data found (Day Not Available)'\n",
    "\n",
    "def get_daylight_duration(year, month, day, latitude, longitude, cache, cache_file):\n",
    "    \"\"\"Fetches daylight duration data from the US Naval Observatory with caching.\"\"\"\n",
    "    cache_key = (year, month, day, latitude, longitude)\n",
    "    if cache_key in cache:\n",
    "        return cache[cache_key]\n",
    "\n",
    "    url = f'https://aa.usno.navy.mil/calculated/durdaydark?year={year}&task=0&lat={latitude:.4f}&lon={longitude:.4f}&label=&submit=Get+Data'\n",
    "    headers = {\n",
    "        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'\n",
    "    }\n",
    "\n",
    "    for attempt in range(3):  # Retry up to 3 times\n",
    "        try:\n",
    "            response = requests.get(url, headers=headers, timeout=10)\n",
    "            response.raise_for_status()  # Raises an error for HTTP issues\n",
    "\n",
    "            daylight_data = extract_daylight_data(response.text, month, day)\n",
    "            cache[cache_key] = daylight_data\n",
    "            save_cache(cache, cache_file)\n",
    "            return daylight_data\n",
    "\n",
    "        except requests.exceptions.RequestException as e:\n",
    "            time.sleep(2)  # Wait before retrying\n",
    "\n",
    "    return 'Request Error'\n",
    "\n",
    "def process_haunted_places_df(df, cache_file=\"../data/daylight_cache.pkl\"):\n",
    "    \"\"\"Processes the haunted places DataFrame and fetches daylight duration.\"\"\"\n",
    "\n",
    "    df_cleaned = df[['State', 'description', 'city', 'longitude', 'latitude', 'Haunted Places Date']].copy()\n",
    "\n",
    "    df_cleaned[['Year', 'Month', 'Day']] = df_cleaned['Haunted Places Date'].apply(\n",
    "        lambda x: pd.Series(parse_date(str(x)) if pd.notna(x) else (None, None, None))\n",
    "    )\n",
    "\n",
    "    df_cleaned = df_cleaned.dropna(subset=['longitude', 'latitude', 'Year', 'Month', 'Day'])\n",
    "\n",
    "    df_cleaned['longitude'] = df_cleaned['longitude'].astype(float)\n",
    "    df_cleaned['latitude'] = df_cleaned['latitude'].astype(float)\n",
    "\n",
    "    # Load existing cache\n",
    "    cache = load_cache(cache_file)\n",
    "\n",
    "    df_cleaned['Daylight Data USNO Navy'] = df_cleaned.apply(\n",
    "        lambda row: get_daylight_duration(row['Year'], row['Month'], row['Day'], row['latitude'], row['longitude'], cache, cache_file),\n",
    "        axis=1\n",
    "    )\n",
    "\n",
    "    # Drop unnecessary columns\n",
    "    df_cleaned = df_cleaned.drop(columns=['Year', 'Month', 'Day'], errors='ignore')\n",
    "    df = df_cleaned\n",
    "\n",
    "    return df\n",
    "\n",
    "df = process_haunted_places_df(df)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 585
    },
    "id": "dchMHBoT_EAR",
    "outputId": "8e353cb7-0050-4e37-b406-19a17bd9eb05"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>State</th>\n",
       "      <th>city</th>\n",
       "      <th>country</th>\n",
       "      <th>description</th>\n",
       "      <th>location</th>\n",
       "      <th>state_abbrev</th>\n",
       "      <th>longitude</th>\n",
       "      <th>latitude</th>\n",
       "      <th>city_longitude</th>\n",
       "      <th>city_latitude</th>\n",
       "      <th>...</th>\n",
       "      <th>death_rate_Influenza and pneumonia</th>\n",
       "      <th>death_rate_Suicide</th>\n",
       "      <th>death_rate_Kidney disease</th>\n",
       "      <th>death_rate_CLRD</th>\n",
       "      <th>death_rate_Diabetes</th>\n",
       "      <th>Haunted Places Date</th>\n",
       "      <th>Total Deaths</th>\n",
       "      <th>% Under 21</th>\n",
       "      <th>Daylight Data USNO Navy</th>\n",
       "      <th>Daylight Data TimeandDate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>Adamsville</td>\n",
       "      <td>United States</td>\n",
       "      <td>The ghost of a young man has been seen by seve...</td>\n",
       "      <td>Bottenfield Middle School</td>\n",
       "      <td>AL</td>\n",
       "      <td>-86.933312</td>\n",
       "      <td>33.594520</td>\n",
       "      <td>-86.956106</td>\n",
       "      <td>33.600939</td>\n",
       "      <td>...</td>\n",
       "      <td>21.178947</td>\n",
       "      <td>13.273684</td>\n",
       "      <td>20.957895</td>\n",
       "      <td>52.510526</td>\n",
       "      <td>26.4</td>\n",
       "      <td>2013/01/14</td>\n",
       "      <td>2208</td>\n",
       "      <td>3.9%</td>\n",
       "      <td>10:10</td>\n",
       "      <td>No data found</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>Adamsville</td>\n",
       "      <td>United States</td>\n",
       "      <td>The community of Indian Meadows and its sister...</td>\n",
       "      <td>Indian Meadows</td>\n",
       "      <td>AL</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-86.956106</td>\n",
       "      <td>33.600939</td>\n",
       "      <td>...</td>\n",
       "      <td>21.178947</td>\n",
       "      <td>13.273684</td>\n",
       "      <td>20.957895</td>\n",
       "      <td>52.510526</td>\n",
       "      <td>26.4</td>\n",
       "      <td>2025/01/01</td>\n",
       "      <td>2208</td>\n",
       "      <td>3.9%</td>\n",
       "      <td>09:59</td>\n",
       "      <td>No data found</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>Alabaster</td>\n",
       "      <td>United States</td>\n",
       "      <td>This is an old cotton mill opened in 1896. The...</td>\n",
       "      <td>Old Buck Creek Cotton Mill</td>\n",
       "      <td>AL</td>\n",
       "      <td>-86.825893</td>\n",
       "      <td>33.231356</td>\n",
       "      <td>-86.816377</td>\n",
       "      <td>33.244281</td>\n",
       "      <td>...</td>\n",
       "      <td>21.178947</td>\n",
       "      <td>13.273684</td>\n",
       "      <td>20.957895</td>\n",
       "      <td>52.510526</td>\n",
       "      <td>26.4</td>\n",
       "      <td>2025/01/01</td>\n",
       "      <td>2208</td>\n",
       "      <td>3.9%</td>\n",
       "      <td>10:00</td>\n",
       "      <td>No data found</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>Albertville</td>\n",
       "      <td>United States</td>\n",
       "      <td>At night you will hear doors slamming and see ...</td>\n",
       "      <td>Alabama Avenue Middle School</td>\n",
       "      <td>AL</td>\n",
       "      <td>-86.206151</td>\n",
       "      <td>34.260159</td>\n",
       "      <td>-86.208867</td>\n",
       "      <td>34.267594</td>\n",
       "      <td>...</td>\n",
       "      <td>21.178947</td>\n",
       "      <td>13.273684</td>\n",
       "      <td>20.957895</td>\n",
       "      <td>52.510526</td>\n",
       "      <td>26.4</td>\n",
       "      <td>2006/09/22</td>\n",
       "      <td>2208</td>\n",
       "      <td>3.9%</td>\n",
       "      <td>12:09</td>\n",
       "      <td>No data found</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>Albertville</td>\n",
       "      <td>United States</td>\n",
       "      <td>Some of the workers say that the elevator will...</td>\n",
       "      <td>Albertville Public Library</td>\n",
       "      <td>AL</td>\n",
       "      <td>-86.203214</td>\n",
       "      <td>34.264041</td>\n",
       "      <td>-86.208867</td>\n",
       "      <td>34.267594</td>\n",
       "      <td>...</td>\n",
       "      <td>21.178947</td>\n",
       "      <td>13.273684</td>\n",
       "      <td>20.957895</td>\n",
       "      <td>52.510526</td>\n",
       "      <td>26.4</td>\n",
       "      <td>1900/03/12</td>\n",
       "      <td>2208</td>\n",
       "      <td>3.9%</td>\n",
       "      <td>11:50</td>\n",
       "      <td>No data found</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 58 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     State         city        country  \\\n",
       "0  Alabama   Adamsville  United States   \n",
       "1  Alabama   Adamsville  United States   \n",
       "2  Alabama    Alabaster  United States   \n",
       "3  Alabama  Albertville  United States   \n",
       "4  Alabama  Albertville  United States   \n",
       "\n",
       "                                         description  \\\n",
       "0  The ghost of a young man has been seen by seve...   \n",
       "1  The community of Indian Meadows and its sister...   \n",
       "2  This is an old cotton mill opened in 1896. The...   \n",
       "3  At night you will hear doors slamming and see ...   \n",
       "4  Some of the workers say that the elevator will...   \n",
       "\n",
       "                       location state_abbrev  longitude   latitude  \\\n",
       "0     Bottenfield Middle School           AL -86.933312  33.594520   \n",
       "1                Indian Meadows           AL        NaN        NaN   \n",
       "2    Old Buck Creek Cotton Mill           AL -86.825893  33.231356   \n",
       "3  Alabama Avenue Middle School           AL -86.206151  34.260159   \n",
       "4    Albertville Public Library           AL -86.203214  34.264041   \n",
       "\n",
       "   city_longitude  city_latitude  ... death_rate_Influenza and pneumonia  \\\n",
       "0      -86.956106      33.600939  ...                          21.178947   \n",
       "1      -86.956106      33.600939  ...                          21.178947   \n",
       "2      -86.816377      33.244281  ...                          21.178947   \n",
       "3      -86.208867      34.267594  ...                          21.178947   \n",
       "4      -86.208867      34.267594  ...                          21.178947   \n",
       "\n",
       "  death_rate_Suicide death_rate_Kidney disease death_rate_CLRD  \\\n",
       "0          13.273684                 20.957895       52.510526   \n",
       "1          13.273684                 20.957895       52.510526   \n",
       "2          13.273684                 20.957895       52.510526   \n",
       "3          13.273684                 20.957895       52.510526   \n",
       "4          13.273684                 20.957895       52.510526   \n",
       "\n",
       "  death_rate_Diabetes Haunted Places Date Total Deaths % Under 21  \\\n",
       "0                26.4          2013/01/14         2208       3.9%   \n",
       "1                26.4          2025/01/01         2208       3.9%   \n",
       "2                26.4          2025/01/01         2208       3.9%   \n",
       "3                26.4          2006/09/22         2208       3.9%   \n",
       "4                26.4          1900/03/12         2208       3.9%   \n",
       "\n",
       "  Daylight Data USNO Navy Daylight Data TimeandDate  \n",
       "0                   10:10             No data found  \n",
       "1                   09:59             No data found  \n",
       "2                   10:00             No data found  \n",
       "3                   12:09             No data found  \n",
       "4                   11:50             No data found  \n",
       "\n",
       "[5 rows x 58 columns]"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_daylight = pd.read_csv(\"../data/finalized_df_text_adding_timeanddate.csv\", sep=\",\")\n",
    "df_daylight.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 551
    },
    "id": "G15tmv4O_EAS",
    "outputId": "13849343-66a9-4a2b-ef54-3b837444bcd3"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>city</th>\n",
       "      <th>country</th>\n",
       "      <th>description</th>\n",
       "      <th>location</th>\n",
       "      <th>State</th>\n",
       "      <th>state_abbrev</th>\n",
       "      <th>longitude</th>\n",
       "      <th>latitude</th>\n",
       "      <th>city_longitude</th>\n",
       "      <th>city_latitude</th>\n",
       "      <th>...</th>\n",
       "      <th>apparition_gender_str</th>\n",
       "      <th>apparition_age_str</th>\n",
       "      <th>unique_apparition_mentions</th>\n",
       "      <th>adjectives</th>\n",
       "      <th>unique_app_descriptor_mentions</th>\n",
       "      <th>Haunted Places Date_x</th>\n",
       "      <th>Haunted Places Date_y</th>\n",
       "      <th>Total Deaths</th>\n",
       "      <th>% Under 21</th>\n",
       "      <th>Daylight Data USNO Navy</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Ada</td>\n",
       "      <td>United States</td>\n",
       "      <td>Ada witch - Sometimes you can see a misty blue...</td>\n",
       "      <td>Ada Cemetery</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-85.504893</td>\n",
       "      <td>42.962106</td>\n",
       "      <td>-85.495480</td>\n",
       "      <td>42.960727</td>\n",
       "      <td>...</td>\n",
       "      <td>man men husband wife</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>3</td>\n",
       "      <td>[(misty, figure), (blue, figure)]</td>\n",
       "      <td>2</td>\n",
       "      <td>1/1/2025</td>\n",
       "      <td>1/1/2025</td>\n",
       "      <td>4548.0</td>\n",
       "      <td>2.6%</td>\n",
       "      <td>09:05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Addison</td>\n",
       "      <td>United States</td>\n",
       "      <td>A little girl was killed suddenly while waitin...</td>\n",
       "      <td>North Adams Rd.</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-84.381843</td>\n",
       "      <td>41.971425</td>\n",
       "      <td>-84.347168</td>\n",
       "      <td>41.986434</td>\n",
       "      <td>...</td>\n",
       "      <td>girl them</td>\n",
       "      <td>child</td>\n",
       "      <td>1</td>\n",
       "      <td>[]</td>\n",
       "      <td>1</td>\n",
       "      <td>1/1/2025</td>\n",
       "      <td>1/1/2025</td>\n",
       "      <td>4548.0</td>\n",
       "      <td>2.6%</td>\n",
       "      <td>11:22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Adrian</td>\n",
       "      <td>United States</td>\n",
       "      <td>If you take Gorman Rd. west towards Sand Creek...</td>\n",
       "      <td>Ghost Trestle</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-84.035656</td>\n",
       "      <td>41.904538</td>\n",
       "      <td>-84.037166</td>\n",
       "      <td>41.897547</td>\n",
       "      <td>...</td>\n",
       "      <td>father son wife they them</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>1</td>\n",
       "      <td>[]</td>\n",
       "      <td>1</td>\n",
       "      <td>3/1/1972</td>\n",
       "      <td>3/1/1972</td>\n",
       "      <td>4548.0</td>\n",
       "      <td>2.6%</td>\n",
       "      <td>11:16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Adrian</td>\n",
       "      <td>United States</td>\n",
       "      <td>In the 1970's, one room, room 211, in the old ...</td>\n",
       "      <td>Siena Heights University</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-84.017565</td>\n",
       "      <td>41.905712</td>\n",
       "      <td>-84.037166</td>\n",
       "      <td>41.897547</td>\n",
       "      <td>...</td>\n",
       "      <td>they them</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>1</td>\n",
       "      <td>[]</td>\n",
       "      <td>1</td>\n",
       "      <td>3/1/1970</td>\n",
       "      <td>3/1/1970</td>\n",
       "      <td>4548.0</td>\n",
       "      <td>2.6%</td>\n",
       "      <td>11:45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Albion</td>\n",
       "      <td>United States</td>\n",
       "      <td>Kappa Delta Sorority - The Kappa Delta Sororit...</td>\n",
       "      <td>Albion College</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-84.745177</td>\n",
       "      <td>42.244006</td>\n",
       "      <td>-84.753030</td>\n",
       "      <td>42.243097</td>\n",
       "      <td>...</td>\n",
       "      <td>sister they</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>1</td>\n",
       "      <td>[]</td>\n",
       "      <td>1</td>\n",
       "      <td>1/1/2025</td>\n",
       "      <td>1/1/2025</td>\n",
       "      <td>4548.0</td>\n",
       "      <td>2.6%</td>\n",
       "      <td>09:10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 41 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      city        country                                        description  \\\n",
       "0      Ada  United States  Ada witch - Sometimes you can see a misty blue...   \n",
       "1  Addison  United States  A little girl was killed suddenly while waitin...   \n",
       "2   Adrian  United States  If you take Gorman Rd. west towards Sand Creek...   \n",
       "3   Adrian  United States  In the 1970's, one room, room 211, in the old ...   \n",
       "4   Albion  United States  Kappa Delta Sorority - The Kappa Delta Sororit...   \n",
       "\n",
       "                   location     State state_abbrev  longitude   latitude  \\\n",
       "0              Ada Cemetery  Michigan           MI -85.504893  42.962106   \n",
       "1           North Adams Rd.  Michigan           MI -84.381843  41.971425   \n",
       "2             Ghost Trestle  Michigan           MI -84.035656  41.904538   \n",
       "3  Siena Heights University  Michigan           MI -84.017565  41.905712   \n",
       "4            Albion College  Michigan           MI -84.745177  42.244006   \n",
       "\n",
       "   city_longitude  city_latitude  ...      apparition_gender_str  \\\n",
       "0      -85.495480      42.960727  ...       man men husband wife   \n",
       "1      -84.347168      41.986434  ...                  girl them   \n",
       "2      -84.037166      41.897547  ...  father son wife they them   \n",
       "3      -84.037166      41.897547  ...                  they them   \n",
       "4      -84.753030      42.243097  ...                sister they   \n",
       "\n",
       "  apparition_age_str unique_apparition_mentions  \\\n",
       "0            Unknown                          3   \n",
       "1              child                          1   \n",
       "2            Unknown                          1   \n",
       "3            Unknown                          1   \n",
       "4            Unknown                          1   \n",
       "\n",
       "                          adjectives unique_app_descriptor_mentions  \\\n",
       "0  [(misty, figure), (blue, figure)]                              2   \n",
       "1                                 []                              1   \n",
       "2                                 []                              1   \n",
       "3                                 []                              1   \n",
       "4                                 []                              1   \n",
       "\n",
       "   Haunted Places Date_x Haunted Places Date_y Total Deaths % Under 21  \\\n",
       "0               1/1/2025              1/1/2025       4548.0       2.6%   \n",
       "1               1/1/2025              1/1/2025       4548.0       2.6%   \n",
       "2               3/1/1972              3/1/1972       4548.0       2.6%   \n",
       "3               3/1/1970              3/1/1970       4548.0       2.6%   \n",
       "4               1/1/2025              1/1/2025       4548.0       2.6%   \n",
       "\n",
       "  Daylight Data USNO Navy  \n",
       "0                   09:05  \n",
       "1                   11:22  \n",
       "2                   11:16  \n",
       "3                   11:45  \n",
       "4                   09:10  \n",
       "\n",
       "[5 rows x 41 columns]"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = df.merge(df_daylight[['description', 'Daylight Data USNO Navy']], on='description', how='left')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 603
    },
    "id": "CCOHmiH3FXbW",
    "outputId": "024228dd-1597-4409-9d13-2d66cede35db"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>city</th>\n",
       "      <th>country</th>\n",
       "      <th>description</th>\n",
       "      <th>location</th>\n",
       "      <th>State</th>\n",
       "      <th>state_abbrev</th>\n",
       "      <th>longitude</th>\n",
       "      <th>latitude</th>\n",
       "      <th>city_longitude</th>\n",
       "      <th>city_latitude</th>\n",
       "      <th>...</th>\n",
       "      <th>apparition_gender_str</th>\n",
       "      <th>apparition_age_str</th>\n",
       "      <th>unique_apparition_mentions</th>\n",
       "      <th>adjectives</th>\n",
       "      <th>unique_app_descriptor_mentions</th>\n",
       "      <th>Haunted Places Date_x</th>\n",
       "      <th>Haunted Places Date_y</th>\n",
       "      <th>Total Deaths</th>\n",
       "      <th>% Under 21</th>\n",
       "      <th>Daylight Data USNO Navy</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1653</th>\n",
       "      <td>&lt;&gt;Manteca</td>\n",
       "      <td>United States</td>\n",
       "      <td>Tthere have been may reports of children playi...</td>\n",
       "      <td>Sequoia elementary</td>\n",
       "      <td>California</td>\n",
       "      <td>CA</td>\n",
       "      <td>-122.068543</td>\n",
       "      <td>37.943595</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>they</td>\n",
       "      <td>children</td>\n",
       "      <td>1</td>\n",
       "      <td>[]</td>\n",
       "      <td>1</td>\n",
       "      <td>1/1/2025</td>\n",
       "      <td>1/1/2025</td>\n",
       "      <td>15443.0</td>\n",
       "      <td>2.5%</td>\n",
       "      <td>09:35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9822</th>\n",
       "      <td>ARNOLD</td>\n",
       "      <td>United States</td>\n",
       "      <td>every since this place was built there was sai...</td>\n",
       "      <td>WHEREBERG ARNOLD 14 CINE</td>\n",
       "      <td>Missouri</td>\n",
       "      <td>MO</td>\n",
       "      <td>-90.386043</td>\n",
       "      <td>38.409959</td>\n",
       "      <td>-90.377619</td>\n",
       "      <td>38.432832</td>\n",
       "      <td>...</td>\n",
       "      <td>them</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>3</td>\n",
       "      <td>[(evil, presence)]</td>\n",
       "      <td>2</td>\n",
       "      <td>3/1/1981</td>\n",
       "      <td>3/1/1981</td>\n",
       "      <td>2877.0</td>\n",
       "      <td>3.7%</td>\n",
       "      <td>11:21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10653</th>\n",
       "      <td>Abbeville</td>\n",
       "      <td>United States</td>\n",
       "      <td>The Historical Abbeville Opera House is old en...</td>\n",
       "      <td>Abbeville Opera House</td>\n",
       "      <td>South Carolina</td>\n",
       "      <td>SC</td>\n",
       "      <td>-82.377870</td>\n",
       "      <td>34.177567</td>\n",
       "      <td>-82.379015</td>\n",
       "      <td>34.178172</td>\n",
       "      <td>...</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>1</td>\n",
       "      <td>[]</td>\n",
       "      <td>1</td>\n",
       "      <td>1/1/2025</td>\n",
       "      <td>1/1/2025</td>\n",
       "      <td>2586.0</td>\n",
       "      <td>3.2%</td>\n",
       "      <td>09:56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4542</th>\n",
       "      <td>Abercrombie</td>\n",
       "      <td>United States</td>\n",
       "      <td>ghostly Indians and soldiers have been seen here.</td>\n",
       "      <td>Fort Abercrombie</td>\n",
       "      <td>North Dakota</td>\n",
       "      <td>ND</td>\n",
       "      <td>-96.719415</td>\n",
       "      <td>46.444854</td>\n",
       "      <td>-96.730356</td>\n",
       "      <td>46.447738</td>\n",
       "      <td>...</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>1</td>\n",
       "      <td>[]</td>\n",
       "      <td>1</td>\n",
       "      <td>1/1/2025</td>\n",
       "      <td>1/1/2025</td>\n",
       "      <td>347.0</td>\n",
       "      <td>2.6%</td>\n",
       "      <td>08:40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3855</th>\n",
       "      <td>Aberdeen</td>\n",
       "      <td>United States</td>\n",
       "      <td>There is an uneasy feeling when you walk or dr...</td>\n",
       "      <td>Aberdeen Baptist Church</td>\n",
       "      <td>Ohio</td>\n",
       "      <td>OH</td>\n",
       "      <td>-83.760880</td>\n",
       "      <td>38.655274</td>\n",
       "      <td>-83.761032</td>\n",
       "      <td>38.655630</td>\n",
       "      <td>...</td>\n",
       "      <td>boy girl they them</td>\n",
       "      <td>children</td>\n",
       "      <td>1</td>\n",
       "      <td>[]</td>\n",
       "      <td>1</td>\n",
       "      <td>1/15/1929</td>\n",
       "      <td>1/15/1929</td>\n",
       "      <td>5739.0</td>\n",
       "      <td>2.6%</td>\n",
       "      <td>09:46</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 41 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              city        country  \\\n",
       "1653     <>Manteca  United States   \n",
       "9822        ARNOLD  United States   \n",
       "10653    Abbeville  United States   \n",
       "4542   Abercrombie  United States   \n",
       "3855      Aberdeen  United States   \n",
       "\n",
       "                                             description  \\\n",
       "1653   Tthere have been may reports of children playi...   \n",
       "9822   every since this place was built there was sai...   \n",
       "10653  The Historical Abbeville Opera House is old en...   \n",
       "4542   ghostly Indians and soldiers have been seen here.   \n",
       "3855   There is an uneasy feeling when you walk or dr...   \n",
       "\n",
       "                       location           State state_abbrev   longitude  \\\n",
       "1653         Sequoia elementary      California           CA -122.068543   \n",
       "9822   WHEREBERG ARNOLD 14 CINE        Missouri           MO  -90.386043   \n",
       "10653     Abbeville Opera House  South Carolina           SC  -82.377870   \n",
       "4542           Fort Abercrombie    North Dakota           ND  -96.719415   \n",
       "3855    Aberdeen Baptist Church            Ohio           OH  -83.760880   \n",
       "\n",
       "        latitude  city_longitude  city_latitude  ... apparition_gender_str  \\\n",
       "1653   37.943595             NaN            NaN  ...                  they   \n",
       "9822   38.409959      -90.377619      38.432832  ...                  them   \n",
       "10653  34.177567      -82.379015      34.178172  ...               Unknown   \n",
       "4542   46.444854      -96.730356      46.447738  ...               Unknown   \n",
       "3855   38.655274      -83.761032      38.655630  ...    boy girl they them   \n",
       "\n",
       "      apparition_age_str unique_apparition_mentions          adjectives  \\\n",
       "1653            children                          1                  []   \n",
       "9822             Unknown                          3  [(evil, presence)]   \n",
       "10653            Unknown                          1                  []   \n",
       "4542             Unknown                          1                  []   \n",
       "3855            children                          1                  []   \n",
       "\n",
       "      unique_app_descriptor_mentions  Haunted Places Date_x  \\\n",
       "1653                               1               1/1/2025   \n",
       "9822                               2               3/1/1981   \n",
       "10653                              1               1/1/2025   \n",
       "4542                               1               1/1/2025   \n",
       "3855                               1              1/15/1929   \n",
       "\n",
       "      Haunted Places Date_y Total Deaths % Under 21 Daylight Data USNO Navy  \n",
       "1653               1/1/2025      15443.0       2.5%                   09:35  \n",
       "9822               3/1/1981       2877.0       3.7%                   11:21  \n",
       "10653              1/1/2025       2586.0       3.2%                   09:56  \n",
       "4542               1/1/2025        347.0       2.6%                   08:40  \n",
       "3855              1/15/1929       5739.0       2.6%                   09:46  \n",
       "\n",
       "[5 rows x 41 columns]"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_city_sort = df.sort_values(by='city')\n",
    "df_city_sort.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "8gDoF4d_raPH"
   },
   "source": [
    "## Daylight by State Merge - TimeandDate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 443
    },
    "id": "YjHwNNCPrey1",
    "outputId": "51913f93-1495-4751-d682-fbfb05592be9"
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import requests\n",
    "from bs4 import BeautifulSoup\n",
    "from datetime import datetime\n",
    "import pickle\n",
    "import os\n",
    "\n",
    "def parse_date(date_str):\n",
    "    \"\"\"Parses date strings in multiple formats and extracts the year, month, and day.\"\"\"\n",
    "    for fmt in (\"%m/%d/%Y\", \"%Y/%m/%d\"):\n",
    "        try:\n",
    "            date_obj = datetime.strptime(date_str, fmt)\n",
    "            return date_obj.year, date_obj.month, date_obj.day\n",
    "        except ValueError:\n",
    "            continue\n",
    "    return None, None, None\n",
    "\n",
    "def load_cache(cache_file):\n",
    "    \"\"\"Loads cached daylight data from a pickle file.\"\"\"\n",
    "    if os.path.exists(cache_file):\n",
    "        with open(cache_file, 'rb') as f:\n",
    "            return pickle.load(f)\n",
    "    return {}\n",
    "\n",
    "def save_cache(cache, cache_file):\n",
    "    \"\"\"Saves daylight data cache to a pickle file.\"\"\"\n",
    "    with open(cache_file, 'wb') as f:\n",
    "        pickle.dump(cache, f)\n",
    "\n",
    "def format_city_state(city, state):\n",
    "    \"\"\"Formats the city and state for the Time and Date website URL using the state abbreviation.\"\"\"\n",
    "    city = city.lower().replace(\" \", \"-\").replace(\".\", \"\").replace(\",\", \"\")\n",
    "    state_abbreviation = state.lower()[:2]  # Use only the first two letters as the state abbreviation\n",
    "    return f\"{city}-{state_abbreviation}\", city\n",
    "\n",
    "def get_daylight_from_timeanddate(city, state, month, day, year, cache, cache_file):\n",
    "    \"\"\"Fetches daylight duration from Time and Date website with caching and error handling.\"\"\"\n",
    "    cache_key = (city, state, month, day, year)\n",
    "    if cache_key in cache:\n",
    "        return cache[cache_key]\n",
    "\n",
    "    formatted_location, city_only = format_city_state(city, state)\n",
    "    url_variants = [\n",
    "        f\"https://www.timeanddate.com/sun/usa/{formatted_location}?month={month}&year={year}\",\n",
    "        f\"https://www.timeanddate.com/sun/usa/{city_only}?month={month}&year={year}\"\n",
    "    ]\n",
    "\n",
    "    headers = {\n",
    "        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'\n",
    "    }\n",
    "\n",
    "    for url in url_variants:\n",
    "        try:\n",
    "            response = requests.get(url, headers=headers, timeout=10)\n",
    "            response.raise_for_status()\n",
    "            soup = BeautifulSoup(response.text, 'html.parser')\n",
    "\n",
    "            daylight_table = soup.find(\"table\", id=\"as-monthsun\")\n",
    "            if not daylight_table:\n",
    "                continue\n",
    "\n",
    "            rows = daylight_table.find_all(\"tr\", attrs={\"data-day\": str(day)})\n",
    "            if not rows:\n",
    "                continue\n",
    "\n",
    "            cols = rows[0].find_all(\"td\")\n",
    "            if len(cols) > 2:\n",
    "                daylight_duration = cols[2].text.strip().split(\":\")[:2]  # Extract only HH:MM format\n",
    "                daylight_duration = daylight_duration[0] + \":\" + daylight_duration[1]  # Ensure HH:MM format\n",
    "                cache[cache_key] = daylight_duration\n",
    "                save_cache(cache, cache_file)\n",
    "                return daylight_duration\n",
    "        except requests.exceptions.RequestException:\n",
    "            continue\n",
    "\n",
    "    return \"No data found\"\n",
    "\n",
    "def process_haunted_places_timeanddate_df(df, cache_file=\".../data/timeanddate_cache.pkl\"):\n",
    "    \"\"\"Processes the haunted places DataFrame and fetches daylight duration from Time and Date.\"\"\"\n",
    "\n",
    "    df[['Year', 'Month', 'Day']] = df['Haunted Places Date'].apply(\n",
    "        lambda x: pd.Series(parse_date(str(x)) if pd.notna(x) else (None, None, None))\n",
    "    )\n",
    "\n",
    "    df = df.dropna(subset=['Year', 'Month', 'Day'])\n",
    "\n",
    "    cache = load_cache(cache_file)\n",
    "\n",
    "    df['Daylight Data TimeandDate'] = df.apply(\n",
    "        lambda row: get_daylight_from_timeanddate(row['city'], row['State'], row['Month'], row['Day'], row['Year'], cache, cache_file),\n",
    "        axis=1\n",
    "    )\n",
    "\n",
    "    df = df.drop(columns=['Year', 'Month', 'Day'])\n",
    "\n",
    "    return df\n",
    "\n",
    "df = process_haunted_places_timeanddate_df(df)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 585
    },
    "id": "f3EUEHEg_FX2",
    "outputId": "63decbf8-463f-43ed-c75f-c716e1623835"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>State</th>\n",
       "      <th>city</th>\n",
       "      <th>country</th>\n",
       "      <th>description</th>\n",
       "      <th>location</th>\n",
       "      <th>state_abbrev</th>\n",
       "      <th>longitude</th>\n",
       "      <th>latitude</th>\n",
       "      <th>city_longitude</th>\n",
       "      <th>city_latitude</th>\n",
       "      <th>...</th>\n",
       "      <th>death_rate_Influenza and pneumonia</th>\n",
       "      <th>death_rate_Suicide</th>\n",
       "      <th>death_rate_Kidney disease</th>\n",
       "      <th>death_rate_CLRD</th>\n",
       "      <th>death_rate_Diabetes</th>\n",
       "      <th>Haunted Places Date</th>\n",
       "      <th>Total Deaths</th>\n",
       "      <th>% Under 21</th>\n",
       "      <th>Daylight Data USNO Navy</th>\n",
       "      <th>Daylight Data TimeandDate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>Adamsville</td>\n",
       "      <td>United States</td>\n",
       "      <td>The ghost of a young man has been seen by seve...</td>\n",
       "      <td>Bottenfield Middle School</td>\n",
       "      <td>AL</td>\n",
       "      <td>-86.933312</td>\n",
       "      <td>33.594520</td>\n",
       "      <td>-86.956106</td>\n",
       "      <td>33.600939</td>\n",
       "      <td>...</td>\n",
       "      <td>21.178947</td>\n",
       "      <td>13.273684</td>\n",
       "      <td>20.957895</td>\n",
       "      <td>52.510526</td>\n",
       "      <td>26.4</td>\n",
       "      <td>2013/01/14</td>\n",
       "      <td>2208</td>\n",
       "      <td>3.9%</td>\n",
       "      <td>10:10</td>\n",
       "      <td>No data found</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>Adamsville</td>\n",
       "      <td>United States</td>\n",
       "      <td>The community of Indian Meadows and its sister...</td>\n",
       "      <td>Indian Meadows</td>\n",
       "      <td>AL</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-86.956106</td>\n",
       "      <td>33.600939</td>\n",
       "      <td>...</td>\n",
       "      <td>21.178947</td>\n",
       "      <td>13.273684</td>\n",
       "      <td>20.957895</td>\n",
       "      <td>52.510526</td>\n",
       "      <td>26.4</td>\n",
       "      <td>2025/01/01</td>\n",
       "      <td>2208</td>\n",
       "      <td>3.9%</td>\n",
       "      <td>09:59</td>\n",
       "      <td>No data found</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>Alabaster</td>\n",
       "      <td>United States</td>\n",
       "      <td>This is an old cotton mill opened in 1896. The...</td>\n",
       "      <td>Old Buck Creek Cotton Mill</td>\n",
       "      <td>AL</td>\n",
       "      <td>-86.825893</td>\n",
       "      <td>33.231356</td>\n",
       "      <td>-86.816377</td>\n",
       "      <td>33.244281</td>\n",
       "      <td>...</td>\n",
       "      <td>21.178947</td>\n",
       "      <td>13.273684</td>\n",
       "      <td>20.957895</td>\n",
       "      <td>52.510526</td>\n",
       "      <td>26.4</td>\n",
       "      <td>2025/01/01</td>\n",
       "      <td>2208</td>\n",
       "      <td>3.9%</td>\n",
       "      <td>10:00</td>\n",
       "      <td>No data found</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>Albertville</td>\n",
       "      <td>United States</td>\n",
       "      <td>At night you will hear doors slamming and see ...</td>\n",
       "      <td>Alabama Avenue Middle School</td>\n",
       "      <td>AL</td>\n",
       "      <td>-86.206151</td>\n",
       "      <td>34.260159</td>\n",
       "      <td>-86.208867</td>\n",
       "      <td>34.267594</td>\n",
       "      <td>...</td>\n",
       "      <td>21.178947</td>\n",
       "      <td>13.273684</td>\n",
       "      <td>20.957895</td>\n",
       "      <td>52.510526</td>\n",
       "      <td>26.4</td>\n",
       "      <td>2006/09/22</td>\n",
       "      <td>2208</td>\n",
       "      <td>3.9%</td>\n",
       "      <td>12:09</td>\n",
       "      <td>No data found</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>Albertville</td>\n",
       "      <td>United States</td>\n",
       "      <td>Some of the workers say that the elevator will...</td>\n",
       "      <td>Albertville Public Library</td>\n",
       "      <td>AL</td>\n",
       "      <td>-86.203214</td>\n",
       "      <td>34.264041</td>\n",
       "      <td>-86.208867</td>\n",
       "      <td>34.267594</td>\n",
       "      <td>...</td>\n",
       "      <td>21.178947</td>\n",
       "      <td>13.273684</td>\n",
       "      <td>20.957895</td>\n",
       "      <td>52.510526</td>\n",
       "      <td>26.4</td>\n",
       "      <td>1900/03/12</td>\n",
       "      <td>2208</td>\n",
       "      <td>3.9%</td>\n",
       "      <td>11:50</td>\n",
       "      <td>No data found</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 58 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     State         city        country  \\\n",
       "0  Alabama   Adamsville  United States   \n",
       "1  Alabama   Adamsville  United States   \n",
       "2  Alabama    Alabaster  United States   \n",
       "3  Alabama  Albertville  United States   \n",
       "4  Alabama  Albertville  United States   \n",
       "\n",
       "                                         description  \\\n",
       "0  The ghost of a young man has been seen by seve...   \n",
       "1  The community of Indian Meadows and its sister...   \n",
       "2  This is an old cotton mill opened in 1896. The...   \n",
       "3  At night you will hear doors slamming and see ...   \n",
       "4  Some of the workers say that the elevator will...   \n",
       "\n",
       "                       location state_abbrev  longitude   latitude  \\\n",
       "0     Bottenfield Middle School           AL -86.933312  33.594520   \n",
       "1                Indian Meadows           AL        NaN        NaN   \n",
       "2    Old Buck Creek Cotton Mill           AL -86.825893  33.231356   \n",
       "3  Alabama Avenue Middle School           AL -86.206151  34.260159   \n",
       "4    Albertville Public Library           AL -86.203214  34.264041   \n",
       "\n",
       "   city_longitude  city_latitude  ... death_rate_Influenza and pneumonia  \\\n",
       "0      -86.956106      33.600939  ...                          21.178947   \n",
       "1      -86.956106      33.600939  ...                          21.178947   \n",
       "2      -86.816377      33.244281  ...                          21.178947   \n",
       "3      -86.208867      34.267594  ...                          21.178947   \n",
       "4      -86.208867      34.267594  ...                          21.178947   \n",
       "\n",
       "  death_rate_Suicide death_rate_Kidney disease death_rate_CLRD  \\\n",
       "0          13.273684                 20.957895       52.510526   \n",
       "1          13.273684                 20.957895       52.510526   \n",
       "2          13.273684                 20.957895       52.510526   \n",
       "3          13.273684                 20.957895       52.510526   \n",
       "4          13.273684                 20.957895       52.510526   \n",
       "\n",
       "  death_rate_Diabetes Haunted Places Date Total Deaths % Under 21  \\\n",
       "0                26.4          2013/01/14         2208       3.9%   \n",
       "1                26.4          2025/01/01         2208       3.9%   \n",
       "2                26.4          2025/01/01         2208       3.9%   \n",
       "3                26.4          2006/09/22         2208       3.9%   \n",
       "4                26.4          1900/03/12         2208       3.9%   \n",
       "\n",
       "  Daylight Data USNO Navy Daylight Data TimeandDate  \n",
       "0                   10:10             No data found  \n",
       "1                   09:59             No data found  \n",
       "2                   10:00             No data found  \n",
       "3                   12:09             No data found  \n",
       "4                   11:50             No data found  \n",
       "\n",
       "[5 rows x 58 columns]"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_timeanddate = pd.read_csv(\"../data/finalized_df_text_adding_timeanddate.csv\", sep=\",\")\n",
    "df_timeanddate.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 551
    },
    "id": "VdtXy2Ba_FX3",
    "outputId": "00a3fe0c-39e8-4c03-e927-49600b4d76d4"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>city</th>\n",
       "      <th>country</th>\n",
       "      <th>description</th>\n",
       "      <th>location</th>\n",
       "      <th>State</th>\n",
       "      <th>state_abbrev</th>\n",
       "      <th>longitude</th>\n",
       "      <th>latitude</th>\n",
       "      <th>city_longitude</th>\n",
       "      <th>city_latitude</th>\n",
       "      <th>...</th>\n",
       "      <th>apparition_age_str</th>\n",
       "      <th>unique_apparition_mentions</th>\n",
       "      <th>adjectives</th>\n",
       "      <th>unique_app_descriptor_mentions</th>\n",
       "      <th>Haunted Places Date_x</th>\n",
       "      <th>Haunted Places Date_y</th>\n",
       "      <th>Total Deaths</th>\n",
       "      <th>% Under 21</th>\n",
       "      <th>Daylight Data USNO Navy</th>\n",
       "      <th>Daylight Data TimeandDate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Ada</td>\n",
       "      <td>United States</td>\n",
       "      <td>Ada witch - Sometimes you can see a misty blue...</td>\n",
       "      <td>Ada Cemetery</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-85.504893</td>\n",
       "      <td>42.962106</td>\n",
       "      <td>-85.495480</td>\n",
       "      <td>42.960727</td>\n",
       "      <td>...</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>3</td>\n",
       "      <td>[(misty, figure), (blue, figure)]</td>\n",
       "      <td>2</td>\n",
       "      <td>1/1/2025</td>\n",
       "      <td>1/1/2025</td>\n",
       "      <td>4548.0</td>\n",
       "      <td>2.6%</td>\n",
       "      <td>09:05</td>\n",
       "      <td>No data found</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Addison</td>\n",
       "      <td>United States</td>\n",
       "      <td>A little girl was killed suddenly while waitin...</td>\n",
       "      <td>North Adams Rd.</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-84.381843</td>\n",
       "      <td>41.971425</td>\n",
       "      <td>-84.347168</td>\n",
       "      <td>41.986434</td>\n",
       "      <td>...</td>\n",
       "      <td>child</td>\n",
       "      <td>1</td>\n",
       "      <td>[]</td>\n",
       "      <td>1</td>\n",
       "      <td>1/1/2025</td>\n",
       "      <td>1/1/2025</td>\n",
       "      <td>4548.0</td>\n",
       "      <td>2.6%</td>\n",
       "      <td>11:22</td>\n",
       "      <td>No data found</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Adrian</td>\n",
       "      <td>United States</td>\n",
       "      <td>If you take Gorman Rd. west towards Sand Creek...</td>\n",
       "      <td>Ghost Trestle</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-84.035656</td>\n",
       "      <td>41.904538</td>\n",
       "      <td>-84.037166</td>\n",
       "      <td>41.897547</td>\n",
       "      <td>...</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>1</td>\n",
       "      <td>[]</td>\n",
       "      <td>1</td>\n",
       "      <td>3/1/1972</td>\n",
       "      <td>3/1/1972</td>\n",
       "      <td>4548.0</td>\n",
       "      <td>2.6%</td>\n",
       "      <td>11:16</td>\n",
       "      <td>No data found</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Adrian</td>\n",
       "      <td>United States</td>\n",
       "      <td>In the 1970's, one room, room 211, in the old ...</td>\n",
       "      <td>Siena Heights University</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-84.017565</td>\n",
       "      <td>41.905712</td>\n",
       "      <td>-84.037166</td>\n",
       "      <td>41.897547</td>\n",
       "      <td>...</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>1</td>\n",
       "      <td>[]</td>\n",
       "      <td>1</td>\n",
       "      <td>3/1/1970</td>\n",
       "      <td>3/1/1970</td>\n",
       "      <td>4548.0</td>\n",
       "      <td>2.6%</td>\n",
       "      <td>11:45</td>\n",
       "      <td>No data found</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Albion</td>\n",
       "      <td>United States</td>\n",
       "      <td>Kappa Delta Sorority - The Kappa Delta Sororit...</td>\n",
       "      <td>Albion College</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-84.745177</td>\n",
       "      <td>42.244006</td>\n",
       "      <td>-84.753030</td>\n",
       "      <td>42.243097</td>\n",
       "      <td>...</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>1</td>\n",
       "      <td>[]</td>\n",
       "      <td>1</td>\n",
       "      <td>1/1/2025</td>\n",
       "      <td>1/1/2025</td>\n",
       "      <td>4548.0</td>\n",
       "      <td>2.6%</td>\n",
       "      <td>09:10</td>\n",
       "      <td>No data found</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 42 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      city        country                                        description  \\\n",
       "0      Ada  United States  Ada witch - Sometimes you can see a misty blue...   \n",
       "1  Addison  United States  A little girl was killed suddenly while waitin...   \n",
       "2   Adrian  United States  If you take Gorman Rd. west towards Sand Creek...   \n",
       "3   Adrian  United States  In the 1970's, one room, room 211, in the old ...   \n",
       "4   Albion  United States  Kappa Delta Sorority - The Kappa Delta Sororit...   \n",
       "\n",
       "                   location     State state_abbrev  longitude   latitude  \\\n",
       "0              Ada Cemetery  Michigan           MI -85.504893  42.962106   \n",
       "1           North Adams Rd.  Michigan           MI -84.381843  41.971425   \n",
       "2             Ghost Trestle  Michigan           MI -84.035656  41.904538   \n",
       "3  Siena Heights University  Michigan           MI -84.017565  41.905712   \n",
       "4            Albion College  Michigan           MI -84.745177  42.244006   \n",
       "\n",
       "   city_longitude  city_latitude  ... apparition_age_str  \\\n",
       "0      -85.495480      42.960727  ...            Unknown   \n",
       "1      -84.347168      41.986434  ...              child   \n",
       "2      -84.037166      41.897547  ...            Unknown   \n",
       "3      -84.037166      41.897547  ...            Unknown   \n",
       "4      -84.753030      42.243097  ...            Unknown   \n",
       "\n",
       "  unique_apparition_mentions                         adjectives  \\\n",
       "0                          3  [(misty, figure), (blue, figure)]   \n",
       "1                          1                                 []   \n",
       "2                          1                                 []   \n",
       "3                          1                                 []   \n",
       "4                          1                                 []   \n",
       "\n",
       "  unique_app_descriptor_mentions Haunted Places Date_x  Haunted Places Date_y  \\\n",
       "0                              2              1/1/2025               1/1/2025   \n",
       "1                              1              1/1/2025               1/1/2025   \n",
       "2                              1              3/1/1972               3/1/1972   \n",
       "3                              1              3/1/1970               3/1/1970   \n",
       "4                              1              1/1/2025               1/1/2025   \n",
       "\n",
       "  Total Deaths % Under 21 Daylight Data USNO Navy Daylight Data TimeandDate  \n",
       "0       4548.0       2.6%                   09:05             No data found  \n",
       "1       4548.0       2.6%                   11:22             No data found  \n",
       "2       4548.0       2.6%                   11:16             No data found  \n",
       "3       4548.0       2.6%                   11:45             No data found  \n",
       "4       4548.0       2.6%                   09:10             No data found  \n",
       "\n",
       "[5 rows x 42 columns]"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = df.merge(df_timeanddate[['description','Daylight Data TimeandDate']], on='description', how='left')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "GUIDp4Tx5Lxr"
   },
   "source": [
    "# 3 MIME Type Datasets"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "nG1QN-4g5Qpe"
   },
   "source": [
    "## FBI Crime Data\n",
    "https://realtimecrimeindex.com/\n",
    "* FBI defined geographical regions (Midwest/Northwest/South/West)\n",
    "* Crime types (broad and sub-types) with count and 12 month rolling sum\n",
    "* date (Month and Year), no days\n",
    "\n",
    "In 2021, 37% of police departments nationwide, including Los Angeles and New York, stopped reporting crime data to the FBI.\n",
    "https://crimeresearch.org/2024/04/how-reliable-are-the-fbis-report-of-violent-crime-data-there-are-some-major-problems/\n",
    "https://www.themarshallproject.org/2023/07/13/fbi-crime-rates-data-gap-nibrs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "vTAnETFx5WcU",
    "outputId": "29ab33e6-85af-4b58-f06e-0f34bf220284"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              Month          Year        Murder          Rape       Robbery  \\\n",
      "count  38687.000000  38687.000000  38627.000000  37361.000000  38202.000000   \n",
      "mean       6.488252   2020.990695      7.895798     34.970022    106.264646   \n",
      "std        3.447843      1.996188     43.918210    184.583003    584.116523   \n",
      "min        1.000000   2018.000000     -3.000000     -3.000000     -1.000000   \n",
      "25%        3.000000   2019.000000      0.000000      1.000000      1.000000   \n",
      "50%        6.000000   2021.000000      0.000000      4.000000      5.000000   \n",
      "75%        9.000000   2023.000000      2.000000     11.000000     22.000000   \n",
      "max       12.000000   2024.000000   1053.000000   3540.000000  11848.000000   \n",
      "\n",
      "       Aggravated Assault      Burglary          Theft  Motor Vehicle Theft  \\\n",
      "count        38118.000000  38118.000000   38202.000000         38202.000000   \n",
      "mean           276.434073    275.126764    1355.828150           319.995445   \n",
      "std           1492.186616   1487.688947    7282.543733          1790.434015   \n",
      "min             -2.000000      0.000000       0.000000            -3.000000   \n",
      "25%              7.000000      9.000000      68.000000             7.000000   \n",
      "50%             19.000000     23.000000     139.000000            20.000000   \n",
      "75%             75.000000     78.000000     402.750000            78.000000   \n",
      "max          30363.000000  31620.000000  140259.000000         48391.000000   \n",
      "\n",
      "       Violent Crime  ...  Robbery_mvs_12mo  Aggravated Assault_mvs_12mo  \\\n",
      "count   33516.000000  ...      38152.000000                 38068.000000   \n",
      "mean      476.014739  ...       1310.973789                  3292.278265   \n",
      "std      2436.452958  ...       7171.477552                 17652.446979   \n",
      "min         0.000000  ...          0.000000                     0.000000   \n",
      "25%        12.000000  ...         21.000000                    91.000000   \n",
      "50%        30.000000  ...         61.000000                   228.000000   \n",
      "75%       121.000000  ...        270.000000                   916.000000   \n",
      "max     44450.000000  ...     144591.000000                320535.000000   \n",
      "\n",
      "       Motor Vehicle Theft_mvs_12mo  Theft_mvs_12mo  Violent Crime_mvs_12mo  \\\n",
      "count                  38152.000000    3.815200e+04            33516.000000   \n",
      "mean                    3774.114909    1.645947e+04             5720.909416   \n",
      "std                    21043.543696    8.813551e+04            29150.569337   \n",
      "min                        0.000000    0.000000e+00                7.000000   \n",
      "25%                       94.000000    8.480000e+02              143.000000   \n",
      "50%                      236.000000    1.698000e+03              361.000000   \n",
      "75%                      948.000000    4.937000e+03             1465.000000   \n",
      "max                   490419.000000    1.578903e+06           483013.000000   \n",
      "\n",
      "       Property Crime_mvs_12mo  FBI.Population.Covered  Number.of.Agencies  \\\n",
      "count             3.351600e+04            3.777400e+04        38687.000000   \n",
      "mean              2.647398e+04            9.209252e+05            3.944245   \n",
      "std               1.349495e+05            4.836177e+06           21.093166   \n",
      "min               0.000000e+00            4.160100e+04            1.000000   \n",
      "25%               1.117000e+03            6.529800e+04            1.000000   \n",
      "50%               2.325000e+03            1.035690e+05            1.000000   \n",
      "75%               7.926000e+03            2.540510e+05            1.000000   \n",
      "max               2.228593e+06            8.155004e+07          351.000000   \n",
      "\n",
      "       Latitude  Longitude  \n",
      "count       0.0        0.0  \n",
      "mean        NaN        NaN  \n",
      "std         NaN        NaN  \n",
      "min         NaN        NaN  \n",
      "25%         NaN        NaN  \n",
      "50%         NaN        NaN  \n",
      "75%         NaN        NaN  \n",
      "max         NaN        NaN  \n",
      "\n",
      "[8 rows x 24 columns]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/yh/z83nv3dd2hl49zy2b2zxjx4h0000gn/T/ipykernel_75207/803760995.py:1: DtypeWarning: Columns (32) have mixed types. Specify dtype option on import or set low_memory=False.\n",
      "  fbi_df = pd.read_csv('../data/FBI_crime_data.csv')\n"
     ]
    }
   ],
   "source": [
    "fbi_df = pd.read_csv('../data/FBI_crime_data.csv')\n",
    "print(fbi_df.describe())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "YeG0TV0XIF6W",
    "outputId": "632f3b3d-4cd3-4c44-de4d-3834a0024097"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "State\n",
      "AR             168\n",
      "AZ            1761\n",
      "CA            2350\n",
      "CO            1678\n",
      "CT            1677\n",
      "DC             168\n",
      "FL             168\n",
      "GA             336\n",
      "HI             168\n",
      "ID             755\n",
      "IL            1594\n",
      "IN             334\n",
      "KY             252\n",
      "LA             247\n",
      "MA            2389\n",
      "MD             168\n",
      "MI            2345\n",
      "MN            1680\n",
      "MO            1175\n",
      "MS             168\n",
      "NC             588\n",
      "NE             420\n",
      "NH             252\n",
      "NJ             250\n",
      "NM             168\n",
      "NV             502\n",
      "NY             420\n",
      "Nationwide     756\n",
      "OH            2009\n",
      "OR            1081\n",
      "PA            1595\n",
      "PR             913\n",
      "RI             420\n",
      "SD             252\n",
      "TN            1344\n",
      "TX            6036\n",
      "UT             168\n",
      "VA            1092\n",
      "WA             420\n",
      "WI             252\n",
      "WY             168\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "state_row_count = fbi_df.groupby('State').size()\n",
    "print(state_row_count)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "GocVjJAdIIpX",
    "outputId": "8a891209-9129-47d0-b10d-d878ef417983"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       Month  Year          Date       Agency State     Region  \\\n",
      "34498      1  2018  January 2018  Full Sample    AR      South   \n",
      "34499      1  2018  January 2018  Full Sample    AZ       West   \n",
      "34500      1  2018  January 2018  Full Sample    CA       West   \n",
      "34501      1  2018  January 2018  Full Sample    CO       West   \n",
      "34502      1  2018  January 2018  Full Sample    CT  Northeast   \n",
      "\n",
      "          Agency_State  Murder   Rape  Robbery  ...  Property Crime_mvs_12mo  \\\n",
      "34498  Full Sample, AR     3.0   15.0     31.0  ...                  13724.0   \n",
      "34499  Full Sample, AZ    26.0  266.0    565.0  ...                 142574.0   \n",
      "34500  Full Sample, CA    61.0  189.0   1059.0  ...                 204479.0   \n",
      "34501  Full Sample, CO    15.0  330.0    306.0  ...                  98457.0   \n",
      "34502  Full Sample, CT     7.0   33.0    144.0  ...                  30186.0   \n",
      "\n",
      "                                             Source.Link  Source.Type  \\\n",
      "34498  https://ah-datalytics.github.io/rtci/list/list...    Aggregate   \n",
      "34499  https://ah-datalytics.github.io/rtci/list/list...    Aggregate   \n",
      "34500  https://ah-datalytics.github.io/rtci/list/list...    Aggregate   \n",
      "34501  https://ah-datalytics.github.io/rtci/list/list...    Aggregate   \n",
      "34502  https://ah-datalytics.github.io/rtci/list/list...    Aggregate   \n",
      "\n",
      "                                           Source.Method  \\\n",
      "34498  All agencies in state with complete data throu...   \n",
      "34499  All agencies in state with complete data throu...   \n",
      "34500  All agencies in state with complete data throu...   \n",
      "34501  All agencies in state with complete data throu...   \n",
      "34502  All agencies in state with complete data throu...   \n",
      "\n",
      "       FBI.Population.Covered  Number.of.Agencies  Latitude  Longitude  \\\n",
      "34498                202986.0                   1       NaN        NaN   \n",
      "34499               4983987.0                  18       NaN        NaN   \n",
      "34500              10466512.0                  25       NaN        NaN   \n",
      "34501               3049828.0                  17       NaN        NaN   \n",
      "34502               1295402.0                  16       NaN        NaN   \n",
      "\n",
      "       Comment             Last Updated  \n",
      "34498      NaN  2025-02-19 11:10:10 EST  \n",
      "34499      NaN  2025-02-19 11:10:10 EST  \n",
      "34500      NaN  2025-02-19 11:10:10 EST  \n",
      "34501      NaN  2025-02-19 11:10:10 EST  \n",
      "34502      NaN  2025-02-19 11:10:10 EST  \n",
      "\n",
      "[5 rows x 34 columns]\n"
     ]
    }
   ],
   "source": [
    "filtered_fbi_df = fbi_df.loc[(fbi_df['Agency'] == 'Full Sample') & (fbi_df['State'] != 'Nationwide') & (fbi_df['Source.Type'] == 'Aggregate')]\n",
    "\n",
    "print(filtered_fbi_df.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "YKhYAEHgIT8Y",
    "outputId": "ff10fe14-4963-45a2-ae9e-50b7459245e8"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       Month      Year       Murder          Rape        Robbery  \\\n",
      "count   39.0      39.0    39.000000     39.000000      39.000000   \n",
      "mean   546.0  169764.0  1536.435897   6574.538462   20559.410256   \n",
      "std      0.0       0.0  1750.792073  10413.728057   29324.901878   \n",
      "min    546.0  169764.0     4.000000      0.000000       0.000000   \n",
      "25%    546.0  169764.0   221.000000   1283.000000    2236.000000   \n",
      "50%    546.0  169764.0  1057.000000   3036.000000   11524.000000   \n",
      "75%    546.0  169764.0  2217.000000   8525.500000   23794.000000   \n",
      "max    546.0  169764.0  8253.000000  60461.000000  130477.000000   \n",
      "\n",
      "       Aggravated Assault       Burglary         Theft  Motor Vehicle Theft  \\\n",
      "count           39.000000      39.000000  3.900000e+01            39.000000   \n",
      "mean         53145.564103   52875.923077  2.613122e+05         61853.025641   \n",
      "std          72423.323600   75737.497254  3.686514e+05         83710.587927   \n",
      "min              0.000000       0.000000  0.000000e+00             0.000000   \n",
      "25%           8527.000000    8355.500000  5.278850e+04          8173.000000   \n",
      "50%          26487.000000   29692.000000  1.501860e+05         35007.000000   \n",
      "75%          71663.000000   77114.000000  3.181590e+05         86279.000000   \n",
      "max         380521.000000  429395.000000  2.153510e+06        449994.000000   \n",
      "\n",
      "       Violent Crime  ...  Robbery_mvs_12mo  Aggravated Assault_mvs_12mo  \\\n",
      "count      39.000000  ...      3.900000e+01                 3.900000e+01   \n",
      "mean    81815.948718  ...      2.532739e+05                 6.320716e+05   \n",
      "std    111402.138564  ...      3.586576e+05                 8.587005e+05   \n",
      "min       589.000000  ...      0.000000e+00                 0.000000e+00   \n",
      "25%     11748.000000  ...      2.740650e+04                 1.007060e+05   \n",
      "50%     40716.000000  ...      1.437690e+05                 3.129620e+05   \n",
      "75%    105315.500000  ...      2.918630e+05                 8.527555e+05   \n",
      "max    579712.000000  ...      1.619675e+06                 4.528087e+06   \n",
      "\n",
      "       Motor Vehicle Theft_mvs_12mo  Theft_mvs_12mo  Violent Crime_mvs_12mo  \\\n",
      "count                  3.900000e+01    3.900000e+01            3.900000e+01   \n",
      "mean                   7.284143e+05    3.167925e+06            9.832923e+05   \n",
      "std                    9.854423e+05    4.467258e+06            1.334678e+06   \n",
      "min                    0.000000e+00    0.000000e+00            6.947000e+03   \n",
      "25%                    9.739750e+04    6.382360e+05            1.403930e+05   \n",
      "50%                    4.159940e+05    1.824471e+06            4.870910e+05   \n",
      "75%                    1.017964e+06    3.849266e+06            1.270400e+06   \n",
      "max                    5.277803e+06    2.608712e+07            6.974290e+06   \n",
      "\n",
      "       Property Crime_mvs_12mo  FBI.Population.Covered  Number.of.Agencies  \\\n",
      "count             3.900000e+01            3.900000e+01           39.000000   \n",
      "mean              4.550266e+06            1.756462e+08          756.000000   \n",
      "std               6.346803e+06            2.541284e+08         1032.209281   \n",
      "min               0.000000e+00            4.799340e+06           84.000000   \n",
      "25%               8.633945e+05            4.156475e+07           84.000000   \n",
      "50%               2.663999e+06            8.311481e+07          336.000000   \n",
      "75%               5.630757e+06            2.083461e+08         1344.000000   \n",
      "max               3.665632e+07            1.242828e+09         5712.000000   \n",
      "\n",
      "       Latitude  Longitude  \n",
      "count      39.0       39.0  \n",
      "mean        0.0        0.0  \n",
      "std         0.0        0.0  \n",
      "min         0.0        0.0  \n",
      "25%         0.0        0.0  \n",
      "50%         0.0        0.0  \n",
      "75%         0.0        0.0  \n",
      "max         0.0        0.0  \n",
      "\n",
      "[8 rows x 24 columns]\n",
      "Index(['State', 'Month', 'Year', 'Murder', 'Rape', 'Robbery',\n",
      "       'Aggravated Assault', 'Burglary', 'Theft', 'Motor Vehicle Theft',\n",
      "       'Violent Crime', 'Property Crime', 'Murder_mvs_12mo',\n",
      "       'Burglary_mvs_12mo', 'Rape_mvs_12mo', 'Robbery_mvs_12mo',\n",
      "       'Aggravated Assault_mvs_12mo', 'Motor Vehicle Theft_mvs_12mo',\n",
      "       'Theft_mvs_12mo', 'Violent Crime_mvs_12mo', 'Property Crime_mvs_12mo',\n",
      "       'FBI.Population.Covered', 'Number.of.Agencies', 'Latitude',\n",
      "       'Longitude'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "agg_fbi_df = filtered_fbi_df.groupby('State').sum(numeric_only=True).reset_index()\n",
    "print(agg_fbi_df.describe())\n",
    "print(agg_fbi_df.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "UzU-TkdhnnxQ",
    "outputId": "67e74bf5-ad68-41f7-9ed4-301513589f08"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['State', 'Month', 'Year', 'Murder', 'Rape', 'Robbery',\n",
      "       'Aggravated Assault', 'Burglary', 'Theft', 'Motor Vehicle Theft',\n",
      "       'Violent Crime', 'Property Crime', 'Murder_mvs_12mo',\n",
      "       'Burglary_mvs_12mo', 'Rape_mvs_12mo', 'Robbery_mvs_12mo',\n",
      "       'Aggravated Assault_mvs_12mo', 'Motor Vehicle Theft_mvs_12mo',\n",
      "       'Theft_mvs_12mo', 'Violent Crime_mvs_12mo', 'Property Crime_mvs_12mo',\n",
      "       'FBI.Population.Covered', 'Number.of.Agencies', 'Latitude', 'Longitude',\n",
      "       'Murder per capita', 'Rape per capita', 'Robbery per capita',\n",
      "       'Aggravated Assault per capita', 'Burglary per capita',\n",
      "       'Theft per capita', 'Motor Vehicle Theft per capita',\n",
      "       'Violent Crime per capita', 'Property Crime per capita'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "for column_name in ['Murder', 'Rape', 'Robbery', 'Aggravated Assault', 'Burglary', 'Theft', 'Motor Vehicle Theft', 'Violent Crime', 'Property Crime']:\n",
    "    agg_fbi_df[f'{column_name} per capita'] = agg_fbi_df[column_name]/agg_fbi_df['FBI.Population.Covered']\n",
    "\n",
    "print(agg_fbi_df.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "GKlnhS97nsi8",
    "outputId": "c65e9f12-183a-4556-d9a6-3d8a4ffbd85e"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   State  Violent Crime per capita\n",
      "15    MD                  0.001672\n",
      "0     AR                  0.001428\n",
      "32    TN                  0.000967\n",
      "11    IN                  0.000827\n",
      "18    MO                  0.000795\n",
      "13    LA                  0.000736\n",
      "10    IL                  0.000688\n",
      "34    UT                  0.000676\n",
      "6     FL                  0.000622\n",
      "16    MI                  0.000602\n",
      "   State  Property Crime per capita\n",
      "6     FL                   0.006685\n",
      "34    UT                   0.005132\n",
      "0     AR                   0.004587\n",
      "36    WA                   0.004521\n",
      "28    OR                   0.004292\n",
      "13    LA                   0.004087\n",
      "15    MD                   0.003464\n",
      "32    TN                   0.003459\n",
      "7     GA                   0.003350\n",
      "5     DC                   0.003255\n"
     ]
    }
   ],
   "source": [
    "sorted_VCPC_fbi_df = agg_fbi_df.sort_values(by=['Violent Crime per capita'], ascending=False)\n",
    "print(sorted_VCPC_fbi_df[['State', 'Violent Crime per capita']].head(10))\n",
    "\n",
    "sorted_PCPC_fbi_df = agg_fbi_df.sort_values(by=['Property Crime per capita'], ascending=False)\n",
    "print(sorted_PCPC_fbi_df[['State', 'Property Crime per capita']].head(10))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "hMXm74cjqBnK",
    "outputId": "8f3e5857-c107-4be5-9d5f-f660f30809d2"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['State', 'Month', 'Year', 'Murder', 'Rape', 'Robbery',\n",
      "       'Aggravated Assault', 'Burglary', 'Theft', 'Motor Vehicle Theft',\n",
      "       'Violent Crime', 'Property Crime', 'Murder_mvs_12mo',\n",
      "       'Burglary_mvs_12mo', 'Rape_mvs_12mo', 'Robbery_mvs_12mo',\n",
      "       'Aggravated Assault_mvs_12mo', 'Motor Vehicle Theft_mvs_12mo',\n",
      "       'Theft_mvs_12mo', 'Violent Crime_mvs_12mo', 'Property Crime_mvs_12mo',\n",
      "       'FBI.Population.Covered', 'Number.of.Agencies', 'Latitude', 'Longitude',\n",
      "       'Murder per capita', 'Rape per capita', 'Robbery per capita',\n",
      "       'Aggravated Assault per capita', 'Burglary per capita',\n",
      "       'Theft per capita', 'Motor Vehicle Theft per capita',\n",
      "       'Violent Crime per capita', 'Property Crime per capita'],\n",
      "      dtype='object')\n",
      "  State  Month    Year  Murder     Rape  Robbery  Aggravated Assault  \\\n",
      "0    AR    546  169764   387.0   1349.0   2840.0             19781.0   \n",
      "1    AZ    546  169764  2303.0  17665.0  32091.0             97062.0   \n",
      "2    CA    546  169764  4746.0  18661.0  71980.0            143771.0   \n",
      "3    CO    546  169764  1514.0  18666.0  23231.0             93995.0   \n",
      "4    CT    546  169764   531.0   2407.0   7943.0             14432.0   \n",
      "\n",
      "   Burglary     Theft  Motor Vehicle Theft  ...  Longitude  Murder per capita  \\\n",
      "0   12746.0   58328.0               7137.0  ...        0.0           0.000023   \n",
      "1  111935.0  634831.0             103946.0  ...        0.0           0.000006   \n",
      "2  200142.0  839039.0             260931.0  ...        0.0           0.000005   \n",
      "3  101210.0  521206.0             172975.0  ...        0.0           0.000006   \n",
      "4   19152.0  131854.0              29997.0  ...        0.0           0.000005   \n",
      "\n",
      "   Rape per capita  Robbery per capita  Aggravated Assault per capita  \\\n",
      "0         0.000079            0.000167                       0.001160   \n",
      "1         0.000042            0.000077                       0.000232   \n",
      "2         0.000021            0.000082                       0.000164   \n",
      "3         0.000073            0.000091                       0.000367   \n",
      "4         0.000022            0.000073                       0.000133   \n",
      "\n",
      "   Burglary per capita  Theft per capita  Motor Vehicle Theft per capita  \\\n",
      "0             0.000748          0.003421                        0.000419   \n",
      "1             0.000267          0.001516                        0.000248   \n",
      "2             0.000228          0.000954                        0.000297   \n",
      "3             0.000395          0.002034                        0.000675   \n",
      "4             0.000176          0.001212                        0.000276   \n",
      "\n",
      "   Violent Crime per capita  Property Crime per capita  \n",
      "0                  0.001428                   0.004587  \n",
      "1                  0.000356                   0.002032  \n",
      "2                  0.000272                   0.001479  \n",
      "3                  0.000536                   0.003105  \n",
      "4                  0.000233                   0.001663  \n",
      "\n",
      "[5 rows x 34 columns]\n"
     ]
    }
   ],
   "source": [
    "print(agg_fbi_df.columns)\n",
    "print(agg_fbi_df.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "mqkb4Qv6oJnZ"
   },
   "source": [
    "### FBI Join with Haunted Df (Aggregated)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "pPWvHWmtoQDN",
    "outputId": "f4fefb1f-7dfb-436a-b572-d157ffa63c35"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      city        country                                        description  \\\n",
      "0      Ada  United States  Ada witch - Sometimes you can see a misty blue...   \n",
      "1  Addison  United States  A little girl was killed suddenly while waitin...   \n",
      "2   Adrian  United States  If you take Gorman Rd. west towards Sand Creek...   \n",
      "3   Adrian  United States  In the 1970's, one room, room 211, in the old ...   \n",
      "4   Albion  United States  Kappa Delta Sorority - The Kappa Delta Sororit...   \n",
      "\n",
      "                   location     State state_abbrev  longitude   latitude  \\\n",
      "0              Ada Cemetery  Michigan           MI -85.504893  42.962106   \n",
      "1           North Adams Rd.  Michigan           MI -84.381843  41.971425   \n",
      "2             Ghost Trestle  Michigan           MI -84.035656  41.904538   \n",
      "3  Siena Heights University  Michigan           MI -84.017565  41.905712   \n",
      "4            Albion College  Michigan           MI -84.745177  42.244006   \n",
      "\n",
      "   city_longitude  city_latitude  ... apparition_age_str  \\\n",
      "0      -85.495480      42.960727  ...            Unknown   \n",
      "1      -84.347168      41.986434  ...              child   \n",
      "2      -84.037166      41.897547  ...            Unknown   \n",
      "3      -84.037166      41.897547  ...            Unknown   \n",
      "4      -84.753030      42.243097  ...            Unknown   \n",
      "\n",
      "  unique_apparition_mentions                         adjectives  \\\n",
      "0                          3  [(misty, figure), (blue, figure)]   \n",
      "1                          1                                 []   \n",
      "2                          1                                 []   \n",
      "3                          1                                 []   \n",
      "4                          1                                 []   \n",
      "\n",
      "  unique_app_descriptor_mentions Haunted Places Date_x  Haunted Places Date_y  \\\n",
      "0                              2              1/1/2025               1/1/2025   \n",
      "1                              1              1/1/2025               1/1/2025   \n",
      "2                              1              3/1/1972               3/1/1972   \n",
      "3                              1              3/1/1970               3/1/1970   \n",
      "4                              1              1/1/2025               1/1/2025   \n",
      "\n",
      "  Total Deaths % Under 21 Daylight Data USNO Navy Daylight Data TimeandDate  \n",
      "0       4548.0       2.6%                   09:05             No data found  \n",
      "1       4548.0       2.6%                   11:22             No data found  \n",
      "2       4548.0       2.6%                   11:16             No data found  \n",
      "3       4548.0       2.6%                   11:45             No data found  \n",
      "4       4548.0       2.6%                   09:10             No data found  \n",
      "\n",
      "[5 rows x 42 columns]\n",
      "  state_abbrev      longitude      latitude  city_longitude  city_latitude  \\\n",
      "0           AK   -4014.025166   1671.425787    -4736.561389    1977.525556   \n",
      "1           AL  -15984.216510   6249.402254   -19247.227807    7370.127633   \n",
      "2           AR   -9105.803017   3479.814058   -10819.664708    4105.987729   \n",
      "3           AZ  -16004.032196   4788.623095   -17363.343373    5184.475543   \n",
      "4           CA -123078.800131  36647.889330  -131141.529783   38949.780041   \n",
      "\n",
      "   Visual Evidence  unique_apparition_mentions  \\\n",
      "0                0                          36   \n",
      "1                6                         244   \n",
      "2                3                         129   \n",
      "3                7                         176   \n",
      "4               27                        1254   \n",
      "\n",
      "   unique_app_descriptor_mentions  Total Deaths State  ...  Longitude  \\\n",
      "0                              32       13856.0   NaN  ...        NaN   \n",
      "1                             227      494592.0   NaN  ...        NaN   \n",
      "2                             120      167433.0    AR  ...        0.0   \n",
      "3                             160      572520.0    AZ  ...        0.0   \n",
      "4                            1119    16987300.0    CA  ...        0.0   \n",
      "\n",
      "   Murder per capita  Rape per capita  Robbery per capita  \\\n",
      "0                NaN              NaN                 NaN   \n",
      "1                NaN              NaN                 NaN   \n",
      "2           0.000023         0.000079            0.000167   \n",
      "3           0.000006         0.000042            0.000077   \n",
      "4           0.000005         0.000021            0.000082   \n",
      "\n",
      "   Aggravated Assault per capita  Burglary per capita  Theft per capita  \\\n",
      "0                            NaN                  NaN               NaN   \n",
      "1                            NaN                  NaN               NaN   \n",
      "2                       0.001160             0.000748          0.003421   \n",
      "3                       0.000232             0.000267          0.001516   \n",
      "4                       0.000164             0.000228          0.000954   \n",
      "\n",
      "   Motor Vehicle Theft per capita  Violent Crime per capita  \\\n",
      "0                             NaN                       NaN   \n",
      "1                             NaN                       NaN   \n",
      "2                        0.000419                  0.001428   \n",
      "3                        0.000248                  0.000356   \n",
      "4                        0.000297                  0.000272   \n",
      "\n",
      "   Property Crime per capita  \n",
      "0                        NaN  \n",
      "1                        NaN  \n",
      "2                   0.004587  \n",
      "3                   0.002032  \n",
      "4                   0.001479  \n",
      "\n",
      "[5 rows x 43 columns]\n"
     ]
    }
   ],
   "source": [
    "print(df.head())\n",
    "\n",
    "#Grouping haunted df by states and returning sums\n",
    "agg_df_by_state = df.groupby('state_abbrev').sum(numeric_only=True).reset_index()\n",
    "\n",
    "#Merging aggregated datasets\n",
    "merged_fbi_df = pd.merge(agg_df_by_state, agg_fbi_df, left_on='state_abbrev', right_on = 'State', how = 'left')\n",
    "print(merged_fbi_df.head())\n",
    "merged_fbi_df.to_csv('../data/merged_fbi_df.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "4BBZie4H37DZ",
    "outputId": "f41e3196-1422-4373-8519-c28c3e7016b2"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  state_abbrev  haunted_entry_counts\n",
      "0           AK                    32\n",
      "1           AL                   224\n",
      "2           AR                   119\n",
      "3           AZ                   156\n",
      "4           CA                  1100\n",
      "  state_abbrev  haunted_entry_counts\n",
      "0           AK                    32\n",
      "1           AL                   224\n",
      "2           AR                   119\n",
      "3           AZ                   156\n",
      "4           CA                  1100\n"
     ]
    }
   ],
   "source": [
    "df_state_row_counts = df.groupby('state_abbrev').size().reset_index(name='haunted_entry_counts')\n",
    "print(df_state_row_counts.head())\n",
    "\n",
    "merged_fbi_df = merged_fbi_df.merge(df_state_row_counts, on='state_abbrev', how='left')\n",
    "print(merged_fbi_df[['state_abbrev', 'haunted_entry_counts']].head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "UPQJ_3AmCWRm",
    "outputId": "4c6914d5-6913-4e17-cd8a-bede5ac4b8d6"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   state_abbrev  haunted_entry_counts  apparition_per_state_entry\n",
      "0            AK                    32                    1.125000\n",
      "1            AL                   224                    1.089286\n",
      "2            AR                   119                    1.084034\n",
      "3            AZ                   156                    1.128205\n",
      "4            CA                  1100                    1.140000\n",
      "5            CO                   166                    1.192771\n",
      "6            CT                   185                    1.189189\n",
      "7            DC                    16                    1.062500\n",
      "8            DE                    37                    1.162162\n",
      "9            FL                   328                    1.149390\n",
      "10           GA                   289                    1.100346\n",
      "11           HI                    96                    1.062500\n",
      "12           IA                   169                    1.065089\n",
      "13           ID                    66                    1.166667\n",
      "14           IL                   395                    1.136709\n",
      "15           IN                   381                    1.083990\n",
      "16           KS                   123                    1.097561\n",
      "17           KY                   370                    1.081081\n",
      "18           LA                    99                    1.161616\n",
      "19           MA                   372                    1.075269\n",
      "20           MD                   170                    1.052941\n",
      "21           ME                    57                    1.087719\n",
      "22           MI                   559                    1.135957\n",
      "23           MN                   162                    1.080247\n",
      "24           MO                   314                    1.092357\n",
      "25           MS                    63                    1.063492\n",
      "26           MT                    42                    1.119048\n",
      "27           NC                   211                    1.137441\n",
      "28           ND                    58                    1.137931\n",
      "29           NE                   111                    1.126126\n",
      "30           NH                    72                    1.236111\n",
      "31           NJ                   194                    1.154639\n",
      "32           NM                    78                    1.128205\n",
      "33           NV                    56                    1.053571\n",
      "34           NY                   459                    1.135076\n",
      "35           OH                   477                    1.119497\n",
      "36           OK                   211                    1.085308\n",
      "37           OR                   155                    1.129032\n",
      "38           PA                   649                    1.141757\n",
      "39           RI                    68                    1.338235\n",
      "40           SC                   183                    1.071038\n",
      "41           SD                    75                    1.133333\n",
      "42           TN                   221                    1.085973\n",
      "43           TX                   711                    1.102672\n",
      "44           UT                   134                    1.179104\n",
      "45           VA                   192                    1.093750\n",
      "46           VT                    63                    1.095238\n",
      "47           WA                   218                    1.096330\n",
      "48           WI                   274                    1.145985\n",
      "49           WV                   106                    1.113208\n",
      "50           WY                    76                    1.131579\n"
     ]
    }
   ],
   "source": [
    "merged_fbi_df['apparition_per_state_entry'] = merged_fbi_df['unique_apparition_mentions']/merged_fbi_df['haunted_entry_counts']\n",
    "print(merged_fbi_df[['state_abbrev', 'haunted_entry_counts', 'apparition_per_state_entry']])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "qcSf45JloVJo",
    "outputId": "e0560711-9e49-44b9-acb1-4435c7d66ece"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   state_abbrev  unique_apparition_mentions  Violent Crime  Property Crime  \\\n",
      "4            CA                        1254       239158.0       1300112.0   \n",
      "43           TX                         784       579712.0       3032899.0   \n",
      "38           PA                         741       134325.0        532908.0   \n",
      "22           MI                         635       133908.0        395951.0   \n",
      "35           OH                         534       103553.0        398639.0   \n",
      "34           NY                         521       315003.0        606687.0   \n",
      "14           IL                         449       220037.0        728507.0   \n",
      "15           IN                         413        68771.0        245733.0   \n",
      "19           MA                         400        73282.0        220503.0   \n",
      "17           KY                         400        40716.0        252392.0   \n",
      "\n",
      "    Violent Crime per capita  Property Crime per capita  \n",
      "4                   0.000272                   0.001479  \n",
      "43                  0.000466                   0.002440  \n",
      "38                  0.000551                   0.002186  \n",
      "22                  0.000602                   0.001781  \n",
      "35                  0.000483                   0.001859  \n",
      "34                  0.000429                   0.000826  \n",
      "14                  0.000688                   0.002276  \n",
      "15                  0.000827                   0.002955  \n",
      "19                  0.000450                   0.001353  \n",
      "17                  0.000490                   0.003037  \n"
     ]
    }
   ],
   "source": [
    "merged_fbi_df_sorted = merged_fbi_df.sort_values(by=['unique_apparition_mentions', 'Violent Crime'], ascending=[False, False])\n",
    "\n",
    "# Display the top 5 rows after sorting\n",
    "print(merged_fbi_df_sorted[['state_abbrev', 'unique_apparition_mentions', 'Violent Crime', 'Property Crime','Violent Crime per capita', 'Property Crime per capita']].head(10))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "07Gh5HguoX2w",
    "outputId": "7153dab3-8454-4ac0-93cd-fe68f7d02181"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   state_abbrev  unique_apparition_mentions  Violent Crime  Property Crime  \\\n",
      "4            CA                        1254       239158.0       1300112.0   \n",
      "43           TX                         784       579712.0       3032899.0   \n",
      "38           PA                         741       134325.0        532908.0   \n",
      "22           MI                         635       133908.0        395951.0   \n",
      "35           OH                         534       103553.0        398639.0   \n",
      "\n",
      "    Apparition_ViolentCrime_Ratio  Apparition_PropertyCrime_Ratio  \n",
      "4                        0.005243                        0.000965  \n",
      "43                       0.001352                        0.000258  \n",
      "38                       0.005516                        0.001390  \n",
      "22                       0.004742                        0.001604  \n",
      "35                       0.005157                        0.001340  \n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "# Replace zeros in Property Crime and Violent Crime columns with NaN\n",
    "merged_fbi_df_sorted['Violent Crime'] = merged_fbi_df_sorted['Violent Crime'].replace(0, np.nan)\n",
    "merged_fbi_df_sorted['Property Crime'] = merged_fbi_df_sorted['Property Crime'].replace(0, np.nan)\n",
    "\n",
    "# Calculate the ratio between 'unique_apparition_mentions' and 'Violent Crime'\n",
    "merged_fbi_df_sorted['Apparition_ViolentCrime_Ratio'] = merged_fbi_df_sorted['unique_apparition_mentions'] / merged_fbi_df_sorted['Violent Crime']\n",
    "\n",
    "# Calculate the ratio between 'unique_apparition_mentions' and 'Property Crime'\n",
    "merged_fbi_df_sorted['Apparition_PropertyCrime_Ratio'] = merged_fbi_df_sorted['unique_apparition_mentions'] / merged_fbi_df_sorted['Property Crime']\n",
    "\n",
    "# Display the first few rows to check the new columns\n",
    "print(merged_fbi_df_sorted[['state_abbrev', 'unique_apparition_mentions', 'Violent Crime', 'Property Crime', 'Apparition_ViolentCrime_Ratio', 'Apparition_PropertyCrime_Ratio']].head())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "5570Xa8BtWwq",
    "outputId": "aca040e1-06a4-4453-fa62-f1c4f82132b0"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Top 10 States by Apparition-to-Violent Crime Ratio:\n",
      "              Apparition_ViolentCrime_Ratio\n",
      "state_abbrev                               \n",
      "NJ                                 0.380306\n",
      "NM                                 0.135802\n",
      "WI                                 0.135403\n",
      "FL                                 0.091505\n",
      "MS                                 0.076571\n",
      "WY                                 0.057410\n",
      "NH                                 0.019152\n",
      "UT                                 0.013457\n",
      "GA                                 0.011404\n",
      "RI                                 0.011103\n",
      "\n",
      "Top 10 States by Apparition-to-Property Crime Ratio:\n",
      "              Apparition_PropertyCrime_Ratio\n",
      "state_abbrev                                \n",
      "NJ                                  0.073346\n",
      "WI                                  0.042307\n",
      "FL                                  0.008518\n",
      "MS                                  0.005749\n",
      "WY                                  0.005393\n",
      "NH                                  0.003508\n",
      "GA                                  0.001826\n",
      "MA                                  0.001814\n",
      "UT                                  0.001773\n",
      "IN                                  0.001681\n"
     ]
    }
   ],
   "source": [
    "# Group by state_abbrev and calculate the mean of the ratios\n",
    "# Selecting only the numeric columns for the mean calculation\n",
    "grouped_by_apparition_violentcrime = merged_fbi_df_sorted.groupby('state_abbrev')[['Apparition_ViolentCrime_Ratio']].mean()\n",
    "grouped_by_apparition_propertycrime = merged_fbi_df_sorted.groupby('state_abbrev')[['Apparition_PropertyCrime_Ratio']].mean()\n",
    "\n",
    "# Sort the ratios in descending order\n",
    "sorted_by_apparition_violentcrime = grouped_by_apparition_violentcrime.sort_values(by='Apparition_ViolentCrime_Ratio', ascending=False)\n",
    "sorted_by_apparition_propertycrime = grouped_by_apparition_propertycrime.sort_values(by='Apparition_PropertyCrime_Ratio', ascending=False)\n",
    "\n",
    "# Print the top 5 states sorted by Apparition-to-Violent Crime Ratio\n",
    "print(\"Top 10 States by Apparition-to-Violent Crime Ratio:\")\n",
    "print(sorted_by_apparition_violentcrime.head(10))\n",
    "\n",
    "# Print the top 5 states sorted by Apparition-to-Property Crime Ratio\n",
    "print(\"\\nTop 10 States by Apparition-to-Property Crime Ratio:\")\n",
    "print(sorted_by_apparition_propertycrime.head(10))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "08Q_2cKEe2U8"
   },
   "source": [
    "### FBI Join with Haunted Df (Line item)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {
    "id": "39UMnRGAe1KC"
   },
   "outputs": [],
   "source": [
    "merged_fbi_df = pd.merge(agg_df_by_state, agg_fbi_df, left_on='state_abbrev', right_on = 'State', how = 'left')\n",
    "\n",
    "select_cols_fbi_df = merged_fbi_df[['state_abbrev', 'FBI.Population.Covered', 'Murder per capita', 'Violent Crime per capita', 'Property Crime per capita']]\n",
    "\n",
    "# Merge the aggregated ratios and calculations back into the original DataFrame to prepare it for Tika Similarity\n",
    "df_merged_with_fbi = pd.merge(df, select_cols_fbi_df, on='state_abbrev', how='left')\n",
    "df_merged_with_fbi.to_csv('../data/fbi_merged_line_item.csv', index=False)\n",
    "\n",
    "df = df_merged_with_fbi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "sNEUPPiVAIgs",
    "outputId": "4fdc8851-862b-4d7f-a4d2-94c2c09fed69"
   },
   "outputs": [],
   "source": [
    "print(df.columns)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "K8zHhq3WL9_L"
   },
   "source": [
    "## US Leading Causes of Death\n",
    "https://catalog.data.gov/dataset/nchs-leading-causes-of-death-united-states\n",
    "\n",
    "This dataset presents the age-adjusted death rates for the 10 leading causes of death in the United States beginning in 1999.\n",
    "\n",
    "Data are based on information from all resident death certificates filed in the 50 states and the District of Columbia using demographic and medical characteristics. Age-adjusted death rates (per 100,000 population) are based on the 2000 U.S. standard population. Populations used for computing death rates after 2010 are postcensal estimates based on the 2010 census, estimated as of July 1, 2010. Rates for census years are based on populations enumerated in the corresponding censuses. Rates for non-census years before 2010 are revised using updated intercensal population estimates and may differ from rates previously published.\n",
    "\n",
    "**Note: The code below uses the age adjusted death rate rather than the # of deaths**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "JMMlPNtLMyT4",
    "outputId": "3e843b29-dfb9-4906-fb4c-20a8d42cbdb0"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Columns: ['city', 'country', 'description', 'location', 'State', 'state_abbrev', 'longitude', 'latitude', 'city_longitude', 'city_latitude', 'clean_description', 'clean_spelling', 'Audio Evidence', 'Audio Reasoning', 'time_of_day', 'Visual Evidence', 'Visual Reasoning', 'Witness Count', 'Witness Reasoning', 'tokenized', 'pos_tokenized', 'filtered_tokenized', 'lemma_filtered_tokenized', 'lemma_pos_tokenized', 'Event', 'apparition_types', 'apparition_descriptors', 'apparition_gender', 'apparition_age', 'apparition_types_str', 'apparition_descriptors_str', 'apparition_gender_str', 'apparition_age_str', 'unique_apparition_mentions', 'adjectives', 'unique_app_descriptor_mentions', 'Haunted Places Date_x', 'Haunted Places Date_y', 'Total Deaths', '% Under 21', 'Daylight Data USNO Navy', 'Daylight Data TimeandDate', 'FBI.Population.Covered', 'Murder per capita', 'Violent Crime per capita', 'Property Crime per capita', 'death_rate_Diabetes', 'death_rate_Stroke', \"death_rate_Alzheimer's disease\", 'death_rate_Suicide', 'death_rate_CLRD', 'death_rate_Cancer', 'death_rate_Kidney disease', 'death_rate_Heart disease', 'death_rate_All causes', 'death_rate_Unintentional injuries']\n",
      "\n",
      "Joined dataset saved in 'deathCauses_merged_line_item.csv'\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import json\n",
    "import requests\n",
    "import warnings\n",
    "warnings.filterwarnings(\n",
    "    action='ignore', category=UserWarning, message=r\"Boolean Series.*\"\n",
    ")\n",
    "\n",
    "# get column names from JSON dictionary\n",
    "def get_json_column_names(data: dict) -> list[str]:\n",
    "    column_names = list()\n",
    "\n",
    "    columns_frame = data['meta']['view']['columns']\n",
    "    for frame in columns_frame:\n",
    "        column_name = frame['name']\n",
    "        column_names.append(column_name)\n",
    "\n",
    "    return column_names\n",
    "\n",
    "# process JSON into dictionary\n",
    "def json_to_df(json_path: str) -> pd.DataFrame:\n",
    "    # read json into dict using json.load()\n",
    "    with open(json_path, 'r') as json_file:\n",
    "        data = json.load(json_file)\n",
    "\n",
    "    # get columns\n",
    "    column_names = get_json_column_names(data=data)\n",
    "\n",
    "    # get rows\n",
    "    df_json = pd.DataFrame(columns=column_names)\n",
    "    for index, datapoint in enumerate(data['data']):\n",
    "        df_json.loc[index] = datapoint\n",
    "\n",
    "    selected_columns = ['State', 'Cause Name', 'Year', 'Deaths', 'Age-adjusted Death Rate']\n",
    "    return df_json[selected_columns]\n",
    "\n",
    "# aggregrate JSON dictionary into JSON dataframe (df_final)\n",
    "def aggregate_df_json(df_json: pd.DataFrame) -> pd.DataFrame:\n",
    "    # AGGREGRATION: aggregate mean with tuple (state, cause name) as index\n",
    "    df = df_json.groupby([\"State\", \"Cause Name\"]).agg('mean').drop('Year', axis=1)\n",
    "\n",
    "    columns = [\"State\", \"Cause Name\", \"Deaths\", \"Age-adjusted Death Rate\"]\n",
    "    df_agg = pd.DataFrame(columns=columns)\n",
    "\n",
    "    # unpack index\n",
    "    for index, row in df.iterrows():\n",
    "        state, cause = index\n",
    "        deaths = row['Deaths']\n",
    "        age_death = row['Age-adjusted Death Rate']\n",
    "        df_agg.loc[len(df_agg)] = [state, cause, deaths, age_death]\n",
    "\n",
    "    # ORGANIZE COLUMNS: [state, death_rate{cause[0]}, death_rate{cause[1]}, ...]\n",
    "    # Yields df_final\n",
    "    states = list(set(df_agg.State.values))\n",
    "    causes = list(set(df_agg[\"Cause Name\"].values))\n",
    "    columns = [\"state\"] + [f\"death_rate_{cause}\" for cause in causes]\n",
    "\n",
    "    df_final = pd.DataFrame(columns=columns)\n",
    "    for state in states:\n",
    "        row = [state]\n",
    "        for cause in causes:\n",
    "            death_rate = df_agg[df_agg.State == state][df_agg['Cause Name'] == cause][\"Age-adjusted Death Rate\"].values[0]\n",
    "            row.append(death_rate)\n",
    "        df_final.loc[len(df_final)] = row\n",
    "\n",
    "    return df_final\n",
    "\n",
    "# join Haunted DataFrame (df) with JSON DataFrame (json_path -> df_json -> df_agg)\n",
    "def join(df: pd.DataFrame, json_path: str) -> pd.DataFrame:\n",
    "    #df_json = json_to_df(json_path=json_path) # process json into df, might take a couple minutes\n",
    "    #df_json.to_csv('df_json.csv', index=False) # can also be found in google drive\n",
    "    df_json = pd.read_csv('../data/df_json.csv')\n",
    "\n",
    "    # aggregate on state\n",
    "    df_agg = aggregate_df_json(df_json=df_json).set_index('state')\n",
    "    #print(df_agg)\n",
    "\n",
    "    # join manually, df.join() not working\n",
    "    new_col_names = list(df_agg.columns)[1:]\n",
    "    new_col_dict = {}\n",
    "    for new_col in new_col_names:\n",
    "        new_col_dict[new_col] = list()\n",
    "\n",
    "    for index, row in df.iterrows():\n",
    "        state = row['State']\n",
    "        for col in new_col_names: # death_rate_{cause}\n",
    "            if state == 'Washington DC':\n",
    "                new_col_dict[col].append(None)\n",
    "                continue\n",
    "            value = df_agg.loc[state][col]\n",
    "            new_col_dict[col].append(value)\n",
    "\n",
    "    for key, value in new_col_dict.items():\n",
    "        df[key] = value\n",
    "\n",
    "    return df\n",
    "\n",
    "df = df.copy()\n",
    "json_path = '../data/causes.json' # can be found in google drive\n",
    "df_joined = join(df=df, json_path=json_path)\n",
    "\n",
    "print(f\"Columns: {list(df_joined.columns)}\")\n",
    "print(\"\")\n",
    "df_joined.to_csv('../data/deathCauses_merged_line_item.csv', index=False)\n",
    "print(\"Joined dataset saved in 'deathCauses_merged_line_item.csv'\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {
    "id": "w9Oli1OYVhU-"
   },
   "outputs": [],
   "source": [
    "# Set new df columns from 'deathCauses_merge_line_item.csv'\n",
    "df_joined = pd.read_csv('../data/deathCauses_merged_line_item.csv')\n",
    "for column in [x for x in list(df_joined.columns) if x.startswith('death_rate_')]:\n",
    "    df[column] = df_joined[column].astype(float)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Nt4MnioHPD9K"
   },
   "source": [
    "Analysis of Death Data:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'google'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[90], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mgoogle\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mg\u001b[39;00m\n",
      "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'google'"
     ]
    }
   ],
   "source": [
    "import google as g"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 669
    },
    "id": "PyqSyAEUVg8R",
    "outputId": "8b6f4bff-daa4-4cc5-af4a-5b9caea8b3c0"
   },
   "outputs": [],
   "source": [
    "#lists each state, the amount of hauntings, and the death rates\n",
    "\n",
    "import pandas as pd\n",
    "#from google.colab.data_table import DataTable  # Enables interactive display in Colab\n",
    "\n",
    "df_copy = df.copy()\n",
    "\n",
    "df_copy.columns = df_copy.columns.str.lower().str.strip()\n",
    "\n",
    "#Count the number of haunted encounters per state\n",
    "haunted_counts_by_state = df_copy[\"state\"].value_counts().rename(\"haunted_encounter_count\")\n",
    "\n",
    "#Select death rate columns\n",
    "column_subset = df_copy.iloc[:, 10:22]  # Adjust this range if columns are misaligned\n",
    "\n",
    "#Compute the mean values for each state for selected columns\n",
    "state_aggregated_data = df_copy.groupby(\"state\")[column_subset.columns].mean(numeric_only=True)\n",
    "\n",
    "#Merge the haunted count with the death rate columns\n",
    "final_df = haunted_counts_by_state.to_frame().merge(state_aggregated_data, left_index=True, right_index=True)\n",
    "\n",
    "csv_filename = \"states_death_rates.csv\"\n",
    "final_df.to_csv(csv_filename, index=True)\n",
    "\n",
    "#display(DataTable(final_df))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "rLbnawHxSJ7u",
    "outputId": "6151bb9b-2719-4949-90ac-d4af89bb64ed"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['city', 'country', 'description', 'location', 'State', 'state_abbrev',\n",
       "       'longitude', 'latitude', 'city_longitude', 'city_latitude',\n",
       "       'clean_description', 'clean_spelling', 'Audio Evidence',\n",
       "       'Audio Reasoning', 'time_of_day', 'Visual Evidence', 'Visual Reasoning',\n",
       "       'Witness Count', 'Witness Reasoning', 'tokenized', 'pos_tokenized',\n",
       "       'filtered_tokenized', 'lemma_filtered_tokenized', 'lemma_pos_tokenized',\n",
       "       'Event', 'apparition_types', 'apparition_descriptors',\n",
       "       'apparition_gender', 'apparition_age', 'apparition_types_str',\n",
       "       'apparition_descriptors_str', 'apparition_gender_str',\n",
       "       'apparition_age_str', 'unique_apparition_mentions', 'adjectives',\n",
       "       'unique_app_descriptor_mentions', 'Haunted Places Date_x',\n",
       "       'Haunted Places Date_y', 'Total Deaths', '% Under 21',\n",
       "       'Daylight Data USNO Navy', 'Daylight Data TimeandDate',\n",
       "       'FBI.Population.Covered', 'Murder per capita',\n",
       "       'Violent Crime per capita', 'Property Crime per capita',\n",
       "       'death_rate_Diabetes', 'death_rate_Stroke',\n",
       "       'death_rate_Alzheimer's disease', 'death_rate_Suicide',\n",
       "       'death_rate_CLRD', 'death_rate_Cancer', 'death_rate_Kidney disease',\n",
       "       'death_rate_Heart disease', 'death_rate_All causes',\n",
       "       'death_rate_Unintentional injuries'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "HC-VjE9Ml2Nr",
    "outputId": "03fa6aa8-45f1-4fa5-d448-29cb9f302123"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Data saved to: ../data/states_death_rates.csv\n",
      "\n",
      "Correlation values between hauntings and death rates:\n",
      "death_rate_diabetes: nan\n",
      "death_rate_stroke: nan\n",
      "death_rate_alzheimer's disease: nan\n",
      "death_rate_suicide: nan\n",
      "death_rate_clrd: nan\n",
      "death_rate_cancer: nan\n",
      "death_rate_kidney disease: nan\n",
      "death_rate_heart disease: nan\n",
      "death_rate_all causes: nan\n",
      "death_rate_unintentional injuries: nan\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'\\nfor col in death_cause_columns:\\n    plt.figure(figsize=(8, 6))\\n    sns.scatterplot(x=final_df[col], y=final_df[\"haunted_encounter_count\"])\\n    plt.title(f\"Hauntings vs {col} (Corr: {correlations[col]:.2f})\")\\n    plt.xlabel(col)\\n    plt.ylabel(\"Number of Haunted Encounters\")\\n    plot_filename = f\"{output_folder}/scatter_{col}.png\"\\n    plt.savefig(plot_filename)\\n    print(f\"Saved: {plot_filename}\")\\n    plt.show()\\n'"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import os\n",
    "import numpy as np\n",
    "# Create a copy of df to avoid modifying original data\n",
    "df_copy = df.copy()\n",
    "# Normalize column names\n",
    "df_copy.columns = df_copy.columns.str.lower().str.strip()\n",
    "# Count the number of haunted encounters per state\n",
    "haunted_counts_by_state = df_copy[\"state\"].value_counts().rename(\"haunted_encounter_count\")\n",
    "death_cause_columns = [col for col in df_copy.columns if \"death_rate\" in col.lower()]\n",
    "# Compute the mean values for each state for death rate columns\n",
    "state_aggregated_data = df_copy.groupby(\"state\")[death_cause_columns].mean(numeric_only=True)\n",
    "# Merge haunted counts with death rate columns\n",
    "final_df = haunted_counts_by_state.to_frame().merge(state_aggregated_data, left_index=True, right_index=True)\n",
    "# Save the processed dataset\n",
    "csv_filename = \"../data/states_death_rates.csv\"\n",
    "final_df.to_csv(csv_filename, index=True)\n",
    "print(f\"Data saved to: {csv_filename}\")\n",
    "#display(DataTable(final_df))\n",
    "correlations = {}\n",
    "for col in death_cause_columns:\n",
    "    correlation = np.corrcoef(final_df[col], final_df[\"haunted_encounter_count\"])[0, 1]\n",
    "    correlations[col] = correlation\n",
    "print(\"\\nCorrelation values between hauntings and death rates:\")\n",
    "for col, value in correlations.items():\n",
    "    print(f\"{col}: {value:.2f}\")\n",
    "output_folder = \"../data/death_rates_scatter_plots\"\n",
    "os.makedirs(output_folder, exist_ok=True)\n",
    "for col in death_cause_columns:\n",
    "    plt.figure(figsize=(8, 6))\n",
    "    sns.scatterplot(x=final_df[col], y=final_df[\"haunted_encounter_count\"])\n",
    "    plt.title(f\"Hauntings vs {col} (Corr: {correlations[col]:.2f})\")\n",
    "    plt.xlabel(col)\n",
    "    plt.ylabel(\"Number of Haunted Encounters\")\n",
    "    plot_filename = f\"{output_folder}/scatter_{col}.png\"\n",
    "    plt.savefig(plot_filename)\n",
    "    print(f\"Saved: {plot_filename}\")\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "dJ9J3kuU60EU"
   },
   "source": [
    "MERGE all 3 MIME dataset back into main \"df\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "uRyIY23j7Ns7"
   },
   "source": [
    "# JPEG"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "0WdcbgjHqvDH"
   },
   "source": [
    "Original Idea using computer vision library to read jpeg files and obtain results of education of undergraduate graduation rates, high school graduation rates, and STEM graduation rates. although lots of fine tune testing was done, results are subpar, so will yeiled very poor results. This block only displays for the undergrad.jpeg file\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 332
    },
    "id": "be0rFxV9rQVF",
    "outputId": "1327cbc0-2e6e-4cb7-ba75-d992773b7002"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original image dimensions: (525, 700, 3)\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "'\\n# Install tesseract and attach to environ path to use\\nextracted_text = pytesseract.image_to_string(thresh, config=custom_config)\\nprint(\"OCR extracted text:\\n\", extracted_text)\\n\\n# try and extract abbrivs and data\\npattern = r\"([A-Z]{2})\\\\s*([0-9]{1,3}\\\\.?[0-9]*%)\"\\nmatches = re.findall(pattern, extracted_text)\\nprint(\"Extracted state data:\", matches)\\n\\n# post-process the results to remove all invalid values\\nvalid_states = {\"AL\", \"AK\", \"AZ\", \"AR\", \"CA\", \"CO\", \"CT\", \"DE\", \"FL\",\\n                \"GA\", \"HI\", \"ID\", \"IL\", \"IN\", \"IA\", \"KS\", \"KY\", \"LA\",\\n                \"ME\", \"MD\", \"MA\", \"MI\", \"MN\", \"MS\", \"MO\", \"MT\", \"NE\",\\n                \"NV\", \"NH\", \"NJ\", \"NM\", \"NY\", \"NC\", \"ND\", \"OH\", \"OK\",\\n                \"OR\", \"PA\", \"RI\", \"SC\", \"SD\", \"TN\", \"TX\", \"UT\", \"VT\",\\n                \"VA\", \"WA\", \"WV\", \"WI\", \"WY\", \"DC\"}\\nextracted_data = [(state, perc) for state, perc in matches if state in valid_states]\\nprint(\"Filtered extracted data:\", extracted_data)\\n'"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# THIS CODE yields very poor results :(\n",
    "import cv2\n",
    "import pytesseract\n",
    "import re\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "image_path = \"../data/jpeg data set/undergrad.jpeg\"\n",
    "image = cv2.imread(image_path)\n",
    "if image is None:\n",
    "    raise ValueError(f\"Image not found at {image_path}\")\n",
    "\n",
    "# original image shape\n",
    "h, w, _ = image.shape\n",
    "print(\"Original image dimensions:\", image.shape)\n",
    "\n",
    "# crop image\n",
    "cropped = image[50:h-50, 0:w]\n",
    "\n",
    "\n",
    "# grayscale image for readability\n",
    "gray = cv2.cvtColor(cropped, cv2.COLOR_BGR2GRAY)\n",
    "\n",
    "# apply adaptive thresholding to handle variations in text/background\n",
    "thresh = cv2.adaptiveThreshold(gray, 255,\n",
    "                               cv2.ADAPTIVE_THRESH_MEAN_C,\n",
    "                               cv2.THRESH_BINARY, 11, 2)\n",
    "\n",
    "# display the preprocessed image\n",
    "plt.imshow(thresh, cmap='gray')\n",
    "plt.title(\"Preprocessed Image\")\n",
    "plt.axis(\"off\")\n",
    "plt.show()\n",
    "\n",
    "# running OCR\n",
    "custom_config = r'--oem 3 --psm 6'\n",
    "'''\n",
    "# Install tesseract and attach to environ path to use\n",
    "extracted_text = pytesseract.image_to_string(thresh, config=custom_config)\n",
    "print(\"OCR extracted text:\\n\", extracted_text)\n",
    "\n",
    "# try and extract abbrivs and data\n",
    "pattern = r\"([A-Z]{2})\\s*([0-9]{1,3}\\.?[0-9]*%)\"\n",
    "matches = re.findall(pattern, extracted_text)\n",
    "print(\"Extracted state data:\", matches)\n",
    "\n",
    "# post-process the results to remove all invalid values\n",
    "valid_states = {\"AL\", \"AK\", \"AZ\", \"AR\", \"CA\", \"CO\", \"CT\", \"DE\", \"FL\",\n",
    "                \"GA\", \"HI\", \"ID\", \"IL\", \"IN\", \"IA\", \"KS\", \"KY\", \"LA\",\n",
    "                \"ME\", \"MD\", \"MA\", \"MI\", \"MN\", \"MS\", \"MO\", \"MT\", \"NE\",\n",
    "                \"NV\", \"NH\", \"NJ\", \"NM\", \"NY\", \"NC\", \"ND\", \"OH\", \"OK\",\n",
    "                \"OR\", \"PA\", \"RI\", \"SC\", \"SD\", \"TN\", \"TX\", \"UT\", \"VT\",\n",
    "                \"VA\", \"WA\", \"WV\", \"WI\", \"WY\", \"DC\"}\n",
    "extracted_data = [(state, perc) for state, perc in matches if state in valid_states]\n",
    "print(\"Filtered extracted data:\", extracted_data)\n",
    "'''"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "G_iUnAvUrzY8"
   },
   "source": [
    "Solution? unfortunatly the only solution at this time was to record manually from each image and append them to df as the new columns."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {
    "id": "IbSJSIAHr-01"
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "# grad rates undergrad\n",
    "graduation_rates_college = {\n",
    "    \"AK\": 26.4,\n",
    "    \"AL\": 51.8,\n",
    "    \"AR\": 46.9,\n",
    "    \"AZ\": 26.3,\n",
    "    \"CA\": 64.1,\n",
    "    \"CO\": 54.1,\n",
    "    \"CT\": 68.0,\n",
    "    \"DE\": 65.3,\n",
    "    \"FL\": 56.1,\n",
    "    \"GA\": 42.6,\n",
    "    \"HI\": 53.3,\n",
    "    \"ID\": 47.4,\n",
    "    \"IL\": 61.5,\n",
    "    \"IN\": 61.1,\n",
    "    \"IA\": 68.5,\n",
    "    \"KS\": 53.4,\n",
    "    \"KY\": 49.2,\n",
    "    \"LA\": 49.8,\n",
    "    \"ME\": 58.1,\n",
    "    \"MD\": 68.3,\n",
    "    \"MA\": 73.5,\n",
    "    \"MI\": 62.0,\n",
    "    \"MN\": 64.9,\n",
    "    \"MS\": 51.9,\n",
    "    \"MO\": 56.5,\n",
    "    \"MT\": 47.3,\n",
    "    \"NE\": 60.7,\n",
    "    \"NV\": 45.1,\n",
    "    \"NH\": 67.7,\n",
    "    \"NJ\": 66.3,\n",
    "    \"NM\": 43.6,\n",
    "    \"NY\": 66.0,\n",
    "    \"NC\": 61.9,\n",
    "    \"ND\": 52.1,\n",
    "    \"OH\": 58.4,\n",
    "    \"OK\": 46.3,\n",
    "    \"OR\": 62.4,\n",
    "    \"PA\": 67.0,\n",
    "    \"RI\": 71.1,\n",
    "    \"SC\": 61.9,\n",
    "    \"SD\": 51.5,\n",
    "    \"TN\": 50.7,\n",
    "    \"TX\": 54.9,\n",
    "    \"UT\": 54.5,\n",
    "    \"VT\": 67.1,\n",
    "    \"VA\": 67.0,\n",
    "    \"WA\": 69.3,\n",
    "    \"WV\": 47.0,\n",
    "    \"WI\": 63.2,\n",
    "    \"WY\": 58.2\n",
    "}\n",
    "# high school grad\n",
    "graduation_rates_HS = {\n",
    "    \"AK\": 80.4,\n",
    "    \"AL\": 91.7,\n",
    "    \"AR\": 87.6,\n",
    "    \"AZ\": 77.8,\n",
    "    \"CA\": 84.5,\n",
    "    \"CO\": 81.1,\n",
    "    \"CT\": 88.5,\n",
    "    \"DE\": 89.0,\n",
    "    \"FL\": 87.2,\n",
    "    \"GA\": 82.0,\n",
    "    \"HI\": 85.2,\n",
    "    \"ID\": 80.8,\n",
    "    \"IL\": 86.2,\n",
    "    \"IN\": 87.2,\n",
    "    \"IA\": 91.6,\n",
    "    \"KS\": 87.2,\n",
    "    \"KY\": 90.6,\n",
    "    \"LA\": 80.1,\n",
    "    \"ME\": 87.4,\n",
    "    \"MD\": 86.9,\n",
    "    \"MA\": 88.0,\n",
    "    \"MI\": 84.1,\n",
    "    \"MN\": 83.7,\n",
    "    \"MS\": 85.0,\n",
    "    \"MO\": 89.7,\n",
    "    \"MT\": 86.6,\n",
    "    \"NE\": 88.4,\n",
    "    \"NV\": 84.1,\n",
    "    \"NH\": 88.4,\n",
    "    \"NJ\": 90.6,\n",
    "    \"NM\": 75.1,\n",
    "    \"NY\": 82.8,\n",
    "    \"NC\": 86.5,\n",
    "    \"ND\": 88.3,\n",
    "    \"OH\": 82.0,\n",
    "    \"OK\": 84.9,\n",
    "    \"OR\": 80.0,\n",
    "    \"PA\": 86.5,\n",
    "    \"RI\": 83.9,\n",
    "    \"SC\": 81.1,\n",
    "    \"SD\": 84.1,\n",
    "    \"TN\": 90.5,\n",
    "    \"TX\": 90.0,\n",
    "    \"UT\": 87.4,\n",
    "    \"VT\": 84.5,\n",
    "    \"VA\": 87.5,\n",
    "    \"WA\": 81.1,\n",
    "    \"WV\": 91.3,\n",
    "    \"WI\": 90.1,\n",
    "    \"WY\": 82.1\n",
    "}\n",
    "# stem grad rate\n",
    "graduation_rates_stem_percent = {\n",
    "    \"AK\": 23,\n",
    "    \"AL\": 21,\n",
    "    \"AR\": 22,\n",
    "    \"AZ\": 13,\n",
    "    \"CA\": 23,\n",
    "    \"CO\": 25,\n",
    "    \"CT\": 22,\n",
    "    \"DE\": 21,\n",
    "    \"FL\": 19,\n",
    "    \"GA\": 22,\n",
    "    \"HI\": 17,\n",
    "    \"ID\": 22,\n",
    "    \"IL\": 19,\n",
    "    \"IN\": 22,\n",
    "    \"IA\": 20,\n",
    "    \"KS\": 19,\n",
    "    \"KY\": 18,\n",
    "    \"LA\": 19,\n",
    "    \"ME\": 20,\n",
    "    \"MD\": 30,\n",
    "    \"MA\": 22,\n",
    "    \"MI\": 22,\n",
    "    \"MN\": 16,\n",
    "    \"MS\": 19,\n",
    "    \"MO\": 19,\n",
    "    \"MT\": 25,\n",
    "    \"NE\": 18,\n",
    "    \"NV\": 16,\n",
    "    \"NH\": 21,\n",
    "    \"NJ\": 25,\n",
    "    \"NM\": 23,\n",
    "    \"NY\": 19,\n",
    "    \"NC\": 23,\n",
    "    \"ND\": 22,\n",
    "    \"OH\": 21,\n",
    "    \"OK\": 21,\n",
    "    \"OR\": 19,\n",
    "    \"PA\": 21,\n",
    "    \"RI\": 18,\n",
    "    \"SC\": 21,\n",
    "    \"SD\": 27,\n",
    "    \"TN\": 16,\n",
    "    \"TX\": 25,\n",
    "    \"UT\": 26,\n",
    "    \"VT\": 17,\n",
    "    \"VA\": 22,\n",
    "    \"WA\": 23,\n",
    "    \"WV\": 18,\n",
    "    \"WI\": 21,\n",
    "    \"WY\": 34\n",
    "}\n",
    "\n",
    "# helper to format with % sign\n",
    "def format_percent(value):\n",
    "    return f\"{value:.1f}%\" if pd.notnull(value) else None\n",
    "\n",
    "# map dict values to columns and append\n",
    "df[\"Undergrad_Grad_Rate\"] = df[\"state_abbrev\"].map(graduation_rates_college).apply(format_percent)\n",
    "df[\"HS_Grad_Rate\"] = df[\"state_abbrev\"].map(graduation_rates_HS).apply(format_percent)\n",
    "df[\"STEM_Grad_Percentage\"] = df[\"state_abbrev\"].map(graduation_rates_stem_percent).apply(format_percent)\n",
    "\n",
    "# testing\n",
    "# print(df.head())\n",
    "\n",
    "# save\n",
    "# df.to_csv(\"df_with_img_feat.csv\", index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 516
    },
    "id": "kaK2GFo1Hpip",
    "outputId": "591152cb-d599-462c-aa03-2f3bdf00aa8a"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>city</th>\n",
       "      <th>country</th>\n",
       "      <th>description</th>\n",
       "      <th>location</th>\n",
       "      <th>State</th>\n",
       "      <th>state_abbrev</th>\n",
       "      <th>longitude</th>\n",
       "      <th>latitude</th>\n",
       "      <th>city_longitude</th>\n",
       "      <th>city_latitude</th>\n",
       "      <th>...</th>\n",
       "      <th>death_rate_Suicide</th>\n",
       "      <th>death_rate_CLRD</th>\n",
       "      <th>death_rate_Cancer</th>\n",
       "      <th>death_rate_Kidney disease</th>\n",
       "      <th>death_rate_Heart disease</th>\n",
       "      <th>death_rate_All causes</th>\n",
       "      <th>death_rate_Unintentional injuries</th>\n",
       "      <th>Undergrad_Grad_Rate</th>\n",
       "      <th>HS_Grad_Rate</th>\n",
       "      <th>STEM_Grad_Percentage</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Ada</td>\n",
       "      <td>United States</td>\n",
       "      <td>Ada witch - Sometimes you can see a misty blue...</td>\n",
       "      <td>Ada Cemetery</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-85.504893</td>\n",
       "      <td>42.962106</td>\n",
       "      <td>-85.495480</td>\n",
       "      <td>42.960727</td>\n",
       "      <td>...</td>\n",
       "      <td>11.773684</td>\n",
       "      <td>44.742105</td>\n",
       "      <td>184.521053</td>\n",
       "      <td>15.136842</td>\n",
       "      <td>228.531579</td>\n",
       "      <td>821.4</td>\n",
       "      <td>37.631579</td>\n",
       "      <td>62.0%</td>\n",
       "      <td>84.1%</td>\n",
       "      <td>22.0%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Addison</td>\n",
       "      <td>United States</td>\n",
       "      <td>A little girl was killed suddenly while waitin...</td>\n",
       "      <td>North Adams Rd.</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-84.381843</td>\n",
       "      <td>41.971425</td>\n",
       "      <td>-84.347168</td>\n",
       "      <td>41.986434</td>\n",
       "      <td>...</td>\n",
       "      <td>11.773684</td>\n",
       "      <td>44.742105</td>\n",
       "      <td>184.521053</td>\n",
       "      <td>15.136842</td>\n",
       "      <td>228.531579</td>\n",
       "      <td>821.4</td>\n",
       "      <td>37.631579</td>\n",
       "      <td>62.0%</td>\n",
       "      <td>84.1%</td>\n",
       "      <td>22.0%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Adrian</td>\n",
       "      <td>United States</td>\n",
       "      <td>If you take Gorman Rd. west towards Sand Creek...</td>\n",
       "      <td>Ghost Trestle</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-84.035656</td>\n",
       "      <td>41.904538</td>\n",
       "      <td>-84.037166</td>\n",
       "      <td>41.897547</td>\n",
       "      <td>...</td>\n",
       "      <td>11.773684</td>\n",
       "      <td>44.742105</td>\n",
       "      <td>184.521053</td>\n",
       "      <td>15.136842</td>\n",
       "      <td>228.531579</td>\n",
       "      <td>821.4</td>\n",
       "      <td>37.631579</td>\n",
       "      <td>62.0%</td>\n",
       "      <td>84.1%</td>\n",
       "      <td>22.0%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Adrian</td>\n",
       "      <td>United States</td>\n",
       "      <td>In the 1970's, one room, room 211, in the old ...</td>\n",
       "      <td>Siena Heights University</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-84.017565</td>\n",
       "      <td>41.905712</td>\n",
       "      <td>-84.037166</td>\n",
       "      <td>41.897547</td>\n",
       "      <td>...</td>\n",
       "      <td>11.773684</td>\n",
       "      <td>44.742105</td>\n",
       "      <td>184.521053</td>\n",
       "      <td>15.136842</td>\n",
       "      <td>228.531579</td>\n",
       "      <td>821.4</td>\n",
       "      <td>37.631579</td>\n",
       "      <td>62.0%</td>\n",
       "      <td>84.1%</td>\n",
       "      <td>22.0%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Albion</td>\n",
       "      <td>United States</td>\n",
       "      <td>Kappa Delta Sorority - The Kappa Delta Sororit...</td>\n",
       "      <td>Albion College</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>MI</td>\n",
       "      <td>-84.745177</td>\n",
       "      <td>42.244006</td>\n",
       "      <td>-84.753030</td>\n",
       "      <td>42.243097</td>\n",
       "      <td>...</td>\n",
       "      <td>11.773684</td>\n",
       "      <td>44.742105</td>\n",
       "      <td>184.521053</td>\n",
       "      <td>15.136842</td>\n",
       "      <td>228.531579</td>\n",
       "      <td>821.4</td>\n",
       "      <td>37.631579</td>\n",
       "      <td>62.0%</td>\n",
       "      <td>84.1%</td>\n",
       "      <td>22.0%</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 59 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      city        country                                        description  \\\n",
       "0      Ada  United States  Ada witch - Sometimes you can see a misty blue...   \n",
       "1  Addison  United States  A little girl was killed suddenly while waitin...   \n",
       "2   Adrian  United States  If you take Gorman Rd. west towards Sand Creek...   \n",
       "3   Adrian  United States  In the 1970's, one room, room 211, in the old ...   \n",
       "4   Albion  United States  Kappa Delta Sorority - The Kappa Delta Sororit...   \n",
       "\n",
       "                   location     State state_abbrev  longitude   latitude  \\\n",
       "0              Ada Cemetery  Michigan           MI -85.504893  42.962106   \n",
       "1           North Adams Rd.  Michigan           MI -84.381843  41.971425   \n",
       "2             Ghost Trestle  Michigan           MI -84.035656  41.904538   \n",
       "3  Siena Heights University  Michigan           MI -84.017565  41.905712   \n",
       "4            Albion College  Michigan           MI -84.745177  42.244006   \n",
       "\n",
       "   city_longitude  city_latitude  ... death_rate_Suicide death_rate_CLRD  \\\n",
       "0      -85.495480      42.960727  ...          11.773684       44.742105   \n",
       "1      -84.347168      41.986434  ...          11.773684       44.742105   \n",
       "2      -84.037166      41.897547  ...          11.773684       44.742105   \n",
       "3      -84.037166      41.897547  ...          11.773684       44.742105   \n",
       "4      -84.753030      42.243097  ...          11.773684       44.742105   \n",
       "\n",
       "  death_rate_Cancer death_rate_Kidney disease death_rate_Heart disease  \\\n",
       "0        184.521053                 15.136842               228.531579   \n",
       "1        184.521053                 15.136842               228.531579   \n",
       "2        184.521053                 15.136842               228.531579   \n",
       "3        184.521053                 15.136842               228.531579   \n",
       "4        184.521053                 15.136842               228.531579   \n",
       "\n",
       "   death_rate_All causes death_rate_Unintentional injuries  \\\n",
       "0                  821.4                         37.631579   \n",
       "1                  821.4                         37.631579   \n",
       "2                  821.4                         37.631579   \n",
       "3                  821.4                         37.631579   \n",
       "4                  821.4                         37.631579   \n",
       "\n",
       "  Undergrad_Grad_Rate HS_Grad_Rate STEM_Grad_Percentage  \n",
       "0               62.0%        84.1%                22.0%  \n",
       "1               62.0%        84.1%                22.0%  \n",
       "2               62.0%        84.1%                22.0%  \n",
       "3               62.0%        84.1%                22.0%  \n",
       "4               62.0%        84.1%                22.0%  \n",
       "\n",
       "[5 rows x 59 columns]"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "m4dxzZss5Pla"
   },
   "source": [
    "#Merge all df\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "4LsWlMqH5ZRp"
   },
   "outputs": [],
   "source": [
    "#With assumption that all code above is downloaded, this is the point where we can download the dataframe into 1 CSV with all the added features."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {
    "id": "9DGaErfkAhBd"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['city', 'country', 'description', 'location', 'State', 'state_abbrev',\n",
      "       'longitude', 'latitude', 'city_longitude', 'city_latitude',\n",
      "       'clean_description', 'clean_spelling', 'Audio Evidence',\n",
      "       'Audio Reasoning', 'time_of_day', 'Visual Evidence', 'Visual Reasoning',\n",
      "       'Witness Count', 'Witness Reasoning', 'tokenized', 'pos_tokenized',\n",
      "       'filtered_tokenized', 'lemma_filtered_tokenized', 'lemma_pos_tokenized',\n",
      "       'Event', 'apparition_types', 'apparition_descriptors',\n",
      "       'apparition_gender', 'apparition_age', 'apparition_types_str',\n",
      "       'apparition_descriptors_str', 'apparition_gender_str',\n",
      "       'apparition_age_str', 'unique_apparition_mentions', 'adjectives',\n",
      "       'unique_app_descriptor_mentions', 'Haunted Places Date_x',\n",
      "       'Haunted Places Date_y', 'Total Deaths', '% Under 21',\n",
      "       'Daylight Data USNO Navy', 'Daylight Data TimeandDate',\n",
      "       'FBI.Population.Covered', 'Murder per capita',\n",
      "       'Violent Crime per capita', 'Property Crime per capita',\n",
      "       'death_rate_Diabetes', 'death_rate_Stroke',\n",
      "       'death_rate_Alzheimer's disease', 'death_rate_Suicide',\n",
      "       'death_rate_CLRD', 'death_rate_Cancer', 'death_rate_Kidney disease',\n",
      "       'death_rate_Heart disease', 'death_rate_All causes',\n",
      "       'death_rate_Unintentional injuries', 'Undergrad_Grad_Rate',\n",
      "       'HS_Grad_Rate', 'STEM_Grad_Percentage'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "df.to_csv('finalized_df.csv', index=False)\n",
    "print(df.columns)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "WGMJRQYN4OMK"
   },
   "source": [
    "# Tika Similarity and Cluster Analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "--57wHjl4XOy"
   },
   "source": [
    "GitHub link for source code: https://github.com/Dark-eXe/haunted-places-similarity"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.21"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
